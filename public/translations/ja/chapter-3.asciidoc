[[ch03_bitcoin_client]]
== Bitcoinクライアント

=== Bitcoin Core：参照実装

((("bitcoin client", id="ix_ch03-asciidoc0", range="startofrange")))((("bitcoin client","Bitcoin Core", id="ix_ch03-asciidoc1", range="startofrange")))((("Bitcoin Core client", id="ix_ch03-asciidoc2", range="startofrange")))((("Satoshi client", see="Bitcoin Core client")))あなたは"Satoshi client"とも呼ばれているBitcoin参照クライアントであるBitcoin Coreをbitcoin.orgからダウンロードすることができます。このクライアントはBitcoinの仕組みのいろいろな面(ウォレット、全てのブロックチェーンのコピーを保持したトランザクション確認エンジン、peer-to-peer Bitcoinネットワーク内でのノード)を実装しています。

((("bitcoin.org","Bitcoin Core, downloading"))) Bitcoin参照クライアントをダウンロードするために http://bitcoin.org/en/choose-your-wallet[Bitcoin's Choose Your Wallet page] でBitcoin Coreを選び>ます。使っているOSによっては、実行可能なインストーラーがダウンロードできます。もしWindowsなら、ZIPアーカイブか.exe実行ファイルです。もしMac OSなら、.dmgディスクイメージ。Linuxなら、UbuntuのPPA>パッケージかtar.gzアーカイブです。<<bitcoin-choose-client>>図にあるように、bitcin.orgには推薦されるBitcoinクライアントがリストアップされています。

[[bitcoin-choose-client]]
.bitcoin.org でのBitcoinクライアント選択
image::images/msbt_0301.png["bitcoin choose client"]

==== 最初にBitcoin Coreを実行するに際して

((("Bitcoin Core client","running")))もしインストール可能なパッケージファイル(.exe, .dmg, PPAなど)をダウンロードしたのであれば、他のアプリケーションと同じ方法でそれをインストールできます。Windowsなら、.exeファイルを実行しステップごとのインストールプロセスに従います。Mac OSなら、.dmgファイルを実行しBicoin-QTアイコンをアプリケーションフォルダにドラッグしてください。Ubuntuなら、PPAファイルをダブルクリックするとパッケージマネージャーが起動します。一度インストールが完全に終わると、アプリケーションリストにBitcoin-QTというソフトウェアがインストールされているはずです。Bitcoinクライアントを起動するためにアイコンをダブルクリックしてください。 

Bitcoin Coreを最初に起動したとき、まずブロックチェーンをダウンロードし始めます。これには数日かかるかもしれません(<<bitcoin-qt-firstload>>図参照)。画面に"同期完了"と出るまでバックグラウンドで動かしておいてください。"同期完了"と出ると、もう"同期されていません"とは表示されなくなります。

[[bitcoin-qt-firstload]]
.ブロックチェーン初期構築時のBitcoin Coreスクリーン
image::images/msbt_0302.png["bitcoin-qt first run"]

[TIP]
====
((("Bitcoin Core client","disk space requirement for")))((("blockchains","synchronizing for Bitcoin Core")))((("disk space requirement for Bitcoin Core")))Bitcoin Coreはトランザクション元帳(ブロックチェーン)の完全なコピーを保持しており、2009年の発端からBitcoinネットワークで起きた全てのトランザクションを含んでいます。このデータセットは数十GB(2013年後半の時点で約16GB)あり、数日かけてダウンロードされます。フルブロックチェーンデータセットをダウンロードまで、クライアントはトランザクションを処理することも口座残高を更新することもできません。クライアントの画面には、ダウンロードの間、口座残高の横に"同期されていません"と表示され、下部に"同期中"と表示されます。最初の同期を完了するために十分な空きディスク容量、帯域幅、時間があるかを確認してください。 
====
 



==== ソースコードからのBitcoin Coreのコンパイル

((("Bitcoin Core client","compiling from source code", id="ix_ch03-asciidoc3", range="startofrange")))((("bitcoind client", see="Bitcoin Core client")))開発者向けに、ZIPアーカイブとしてソースコードをダウンロードする、またはGitHubからソースコードをcloneしてくることもできます。((("Bitcoin Core client","source code, downloading")))((("GitHub, downloading Bitcoin Core from"))) https://github.com/bitcoin/bitcoin[GitHub bitcoin page]のサイドバーからZIPアーカイブのダウンロードが選べます。また、gitのコマンドを使うことでローカルコピーを作ることもできます。次の例は、ソースコードをLinuxやMac OSなどUnixのようなOS上でコマンドを実行してcloneしています。

----
$ git clone https://github.com/bitcoin/bitcoin.git
Cloning into 'bitcoin'...
remote: Counting objects: 31864, done.
remote: Compressing objects: 100% (12007/12007), done.
remote: Total 31864 (delta 24480), reused 26530 (delta 19621)
Receiving objects: 100% (31864/31864), 18.47 MiB | 119 KiB/s, done.
Resolving deltas: 100% (24480/24480), done.
$
----

[TIP]
====
導入手順と表示される結果はバージョンごとに変わるかもしれません。もしあなたがここで見た導入手順と違うことがあれば、このコードに付いているドキュメントに従ってください。また、あなたのスクリーンに表示される結果がここにある例とわずかに違っても驚かないでください。 
====

git cloneが終わると、 _bitcoin_ というディレクトリの中に完全なソースコードがダウンロードされます。プロンプトの次に +cd bitcoin+ と打ち込んでディレクトリを移ります。


----
$ cd bitcoin
----
 
デフォルトでローカルコピーは最新のソースコードと同期されているので、そのソースコードは不安定であったり、またベータ版であったりするかもしれません。ソースコードをコンパイルする前に、((("release tags")) _リリースタグ_ を確認して特定のバージョンを選択します。これは、タグが付けられたソースコードのスナップショットとローカルコピーを同期するということです。タグは、開発者がバージョン管理のためバージョン番号をソースコードに付与するために使われます。まず、 +git tag+ コマンドを実行して同期できるタグを確認してみましょう。

----
$ git tag
v0.1.5
v0.1.6test1
v0.2.0
v0.2.10
v0.2.11
v0.2.12

[... many more tags ...]

v0.8.4rc2
v0.8.5
v0.8.6
v0.8.6rc1
v0.9.0rc1
----

このタグリストはBitcoinの全てのリリースタグを示しています。慣習に沿って、テストが必要な((("release candidates"))) _リリース候補_ には"rc"という接尾詞がつきます。商用環境で使用できる安定なソースコードには接尾詞はつきません。前のリストから最も大きいバージョンのタグ v0.9.0rc1 (執筆時点)を選択しましょう。ローカルコピーとこのバージョンのソースコードを同期するために、git checkoutコマンドを実行します。

----
$ git checkout v0.9.0rc1
Note: checking out 'v0.9.0rc1'.

HEAD is now at 15ec451... Merge pull request #3605
$
----


((("Bitcoin Core client","documentation")))ソースコードにはドキュメントファイルも入っています。 +more README.md+ とプロンプトのところで入力して _README.md_ というドキュメントファイルを読んでみましょう。スペースキーを押すことで次のページに移ることができます。この章では、コマンドラインから操作できるLinux上で動作するBitcoinクライアント +bitcoind+ を構築します。+more doc/build-unix.md+ を入力してbitcoindのコンパイル説明書を読んでみましょう。またMac OS XやWindowsに対しても同様の _doc_ ディレクトリがあり、それぞれ _build-osx.md_ 、 _build-msw.md_ というコンパイル説明書があります。 

コンパイル説明書の最初の部分を注意深く読むと構築必須事項があります。これらは、コンパイルを始める上でないといけないライブラリです。もし欠けているようであれば、コンパイルは途中で失敗してしまいます。もし構築必須事項にあるものが足りなければ、それをインストールし失敗してしまったところからコンパイルをやり直してください。構築必須事項が全てインストールされていると考えて、 _autogen.sh_ というスクリプトを使ってbitcoindの構築を始めてみましょう。

[TIP]
====
Bitcoin Coreの構築手順は、version 0.9からautogen/configure/makeを使う形に変わりました。昔のバージョンだと簡単なMakefileを使い、例とわずかに違った形の手順になっています。あなたがコンパイルしたいバージョンの導入手順に従ってください。0.9に導入されたautogen/configure/makeは今後のバージョンで使われる構築方法だそうで、次の例で実行してる形になっています。
====

----
$ ./autogen.sh 
configure.ac:12: installing `src/build-aux/config.guess'
configure.ac:12: installing `src/build-aux/config.sub'
configure.ac:37: installing `src/build-aux/install-sh'
configure.ac:37: installing `src/build-aux/missing'
src/Makefile.am: installing `src/build-aux/depcomp'
$ 
----

((("autogen.sh script"))) _autogen.sh_ というスクリプトは自動的に設定スクリプトを生成するスクリプトです。あなたのシステムの設定やコンパイルに必要なライブラリがあるかをチェックしてくれます。最も重要なスクリプトは、bitcoindを構築する上での数多くのカスタマイズ方法を設定できる((("configure script"))) +configure+ スクリプトです。 +./configure --help+ と入力していろいろなオプションを見てみてください。

----
$ ./configure --help

`configure' configures Bitcoin Core 0.9.0 to adapt to many kinds of systems.

Usage: ./configure [OPTION]... [VAR=VALUE]...

To assign environment variables (e.g., CC, CFLAGS...), specify them as
VAR=VALUE.  See below for descriptions of some of the useful variables.

Defaults for the options are specified in brackets.

Configuration:
  -h, --help              display this help and exit
      --help=short        display options specific to this package
      --help=recursive    display the short help of all the included packages
  -V, --version           display version information and exit

[... さらに多くのオプション、変数が以下に表示されます ...]

Optional Features:
  --disable-option-checking  ignore unrecognized --enable/--with options
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]

[... 多くのオプションが出てくるため省略 ...]

Use these variables to override the choices made by `configure' or to help
it to find libraries and programs with nonstandard names/locations.

Report bugs to <info@bitcoin.org>.

$
----

+configure+ スクリプトによってbitcoindのある機能を有効化したり無効化したりできます。これを行うには、configureスクリプトの後ろに +--enable-FEATURE+ や +--disable-FEATURE+ といった形でフラグを設定して実行します。この +FEATURE+ のところにはhelpを実行したときに出ていた各機能の名前が入ります。この章では、全てのデフォルト機能を入れたbitcoindクライアントを構築することにします。我々は設定フラグを使いませんが、どんな機能を付けられるのか確認してみた方がよいです。次にconfigureスクリプトを実行して、必要なライブラリを自動的にチェックしカスタマイズされた構築スクリプトを生成してみます。

----
$ ./configure 
checking build system type... x86_64-unknown-linux-gnu
checking host system type... x86_64-unknown-linux-gnu
checking for a BSD-compatible install... /usr/bin/install -c
checking whether build environment is sane... yes
checking for a thread-safe mkdir -p... /bin/mkdir -p
checking for gawk... no
checking for mawk... mawk
checking whether make sets $(MAKE)... yes

[... システムが持っている多くの機能がチェックされます ...]

configure: creating ./config.status
config.status: creating Makefile
config.status: creating src/Makefile
config.status: creating src/test/Makefile
config.status: creating src/qt/Makefile
config.status: creating src/qt/test/Makefile
config.status: creating share/setup.nsi
config.status: creating share/qt/Info.plist
config.status: creating qa/pull-tester/run-bitcoind-for-test.sh
config.status: creating qa/pull-tester/build-tests.sh
config.status: creating src/bitcoin-config.h
config.status: executing depfiles commands
$
----

全てがうまくいったら、 +configure+ コマンドはカスタマイズされた構築スクリプトを生成して終了します。何か足りないライブラリがあったりエラーがあったりすると、 +configure+ コマンドは構築スクリプトを生成することなくエラーを出して終了してしまいます。もしエラーが出たら、おそらくライブラリ自体がないか、またはライブラリがあってもそのバージョンのライブラリとbitcoindの相性が悪いかでしょう。構築ドキュメントをもう一度確認後足りないものをインストールし +configure+ コマンドを実行するとエラーが解消されます。次にソースコードをコンパイルします。これには1時間ほどかかります。コンパイルが実行されている間、数秒に１回、数分に１回は表示されるメッセージを確認した方がよいです。というのは何かエラーが起きて止まってしまうことがあるからです。コンパイルはいつでも止まってしまったところから再開できます。makeと入力してコンパイルを始めてください。

----
$ make
Making all in src
make[1]: Entering directory `/home/ubuntu/bitcoin/src'
make  all-recursive
make[2]: Entering directory `/home/ubuntu/bitcoin/src'
Making all in .
make[3]: Entering directory `/home/ubuntu/bitcoin/src'
  CXX    addrman.o
  CXX    alert.o
  CXX    rpcserver.o
  CXX    bloom.o
  CXX    chainparams.o

[... 多くのコンパイルメッセージが続きますが省略 ...]

  CXX    test_bitcoin-wallet_tests.o
  CXX    test_bitcoin-rpc_wallet_tests.o
  CXXLD  test_bitcoin
make[4]: Leaving directory `/home/ubuntu/bitcoin/src/test'
make[3]: Leaving directory `/home/ubuntu/bitcoin/src/test'
make[2]: Leaving directory `/home/ubuntu/bitcoin/src'
make[1]: Leaving directory `/home/ubuntu/bitcoin/src'
make[1]: Entering directory `/home/ubuntu/bitcoin'
make[1]: Nothing to be done for `all-am'.
make[1]: Leaving directory `/home/ubuntu/bitcoin'
$ 
----

makeがエラーなく実行されると、コンパイルされたbitcoindが生成されます。最後に、この実行可能なbitcoind(コンパイルされたbitcoind)をシステム上の適切なところにインストールするために +make+ コマンドを使ってインストールします。

----
$ sudo make install
Making install in src
Making install in .
 /bin/mkdir -p '/usr/local/bin'
  /usr/bin/install -c bitcoind bitcoin-cli '/usr/local/bin'
Making install in test
make  install-am
 /bin/mkdir -p '/usr/local/bin'
  /usr/bin/install -c test_bitcoin '/usr/local/bin'
$
----

bitcoindが正常にインストールされたかは、以下のように２つのコマンドがどこに配置されているかを表示するコマンドを使うことで確認できます。

[source,bash]
----
$ which bitcoind
/usr/local/bin/bitcoind

$ which bitcoin-cli
/usr/local/bin/bitcoin-cli
----

デフォルトでbitcoindは _/usr/local/bin_ に配置されます。最初にbitcoindを実行したときに、JSON-RPCを使うための強力なパスワードの設定を含む設定ファイルを作るようにbitcoindから言われます。 +bitcoind+ とプロンプトのところに入力してbitcoindをスタートさせてください。

----
$ bitcoind
Error: To use the "-server" option, you must set a rpcpassword in the configuration file:
/home/ubuntu/.bitcoin/bitcoin.conf
It is recommended you use the following random password:
rpcuser=bitcoinrpc
rpcpassword=2XA4DuKNCbtZXsBQRRNDEwEY2nM6M4H9Tx5dFjoAVVbK
(you do not need to remember this password)
The username and password MUST NOT be the same.
If the file does not exist, create it with owner-readable-only file permissions.
It is also recommended to set alertnotify so you are notified of problems;
for example: alertnotify=echo %s | mail -s "Bitcoin Alert" admin@foo.com
----

好きなエディタを使って設定ファイルを編集し、bitcoindに言われたようにパスワードを強力なものにしてください。以下に書かれたパスワードを使っては _いけません。_ _.bitcoin_ ディレクトリの中に _.bitcoin/bitcoin.conf_ というファイルを作成し、ユーザ名とパスワードを入力してください。

[source,ini]
----
rpcuser=bitcoinrpc
rpcpassword=2XA4DuKNCbtZXsBQRRNDEwEY2nM6M4H9Tx5dFjoAVVbK
----

設定ファイルを編集しているときに、いくつか別のオプションを設定したいかもしれません。例えば、 +txindex+ とかです(<<txindex>>参照)。他の設定可能なオプションについては、 +bitcoind --help+ と入力して実行することで表示されます。

Bitcoin Coreクライアントを実行してみましょう。最初に全てのブロックをダウンロードしてブロックチェーンを構築し始めます。ブロックチェーンのファイルは1GB以上あるため平均してダウンロードに２日くらいかかります。BitTorrentクライアントを使って部分的な((("blockchains","downloading with bittorrent clients"))) ブロックチェーンを http://bit.ly/1qkLNyh[SourceForge]からダウンロードしてブロックチェーン初期化を短くすることもできます。 

bitcoindをバックグラウンドで実行したい場合は、オプションとして +-daemon+ を付けて実行してください。(((range="endofrange", startref="ix_ch03-asciidoc3")))

----
$ bitcoind -daemon

Bitcoin version v0.9.0rc1-beta (2014-01-31 09:30:15 +0100)
Using OpenSSL version OpenSSL 1.0.1c 10 May 2012
Default data directory /home/bitcoin/.bitcoin
Using data directory /bitcoin/
Using at most 4 connections (1024 file descriptors available)
init message: Verifying wallet...
dbenv.open LogDir=/bitcoin/database ErrorFile=/bitcoin/db.log
Bound to [::]:8333
Bound to 0.0.0.0:8333
init message: Loading block index...
Opening LevelDB in /bitcoin/blocks/index
Opened LevelDB successfully
Opening LevelDB in /bitcoin/chainstate
Opened LevelDB successfully

[... 多くの起動メッセージがありますが省略 ...]

----

=== コマンドラインからのBitcoin Core JSON-RPC APIの使用

((("Bitcoin Core client","JSON-RPC API for", id="ix_ch03-asciidoc5", range="startofrange")))((("Bitcoin Core client","using from command line", id="ix_ch03-asciidoc6", range="startofrange")))((("bitcoin-cli command line helper", id="ix_ch03-asciidoc7", range="startofrange")))Bitcoin CoreクライアントにはJSON-RPC APIが実装されており、 +bitcoin-cli+ コマンドでJSON-RPC APIにアクセスすることもできます。 +bitcoin-cli+ コマンドを使うことでbitcoindと１つ１つコミュニケーションをとるようにJSON-RPC APIを使ってみることができます。また、プログラムか>らJSON-RPC APIを使うこともできます。始めるために以下のように +help+ を使って利用できるRPCコマンドを確認してみてください。

[[bitcoind_commands]]

----
$ bitcoin-cli help
addmultisigaddress nrequired ["key",...] ( "account" )
addnode "node" "add|remove|onetry"
backupwallet "destination"
createmultisig nrequired ["key",...]
createrawtransaction [{"txid":"id","vout":n},...] {"address":amount,...}
decoderawtransaction "hexstring"
decodescript "hex"
dumpprivkey "bitcoinaddress"
dumpwallet "filename"
getaccount "bitcoinaddress"
getaccountaddress "account"
getaddednodeinfo dns ( "node" )
getaddressesbyaccount "account"
getbalance ( "account" minconf )
getbestblockhash
getblock "hash" ( verbose )
getblockchaininfo
getblockcount
getblockhash index
getblocktemplate ( "jsonrequestobject" )
getconnectioncount
getdifficulty
getgenerate
gethashespersec
getinfo
getmininginfo
getnettotals
getnetworkhashps ( blocks height )
getnetworkinfo
getnewaddress ( "account" )
getpeerinfo
getrawchangeaddress
getrawmempool ( verbose )
getrawtransaction "txid" ( verbose )
getreceivedbyaccount "account" ( minconf )
getreceivedbyaddress "bitcoinaddress" ( minconf )
gettransaction "txid"
gettxout "txid" n ( includemempool )
gettxoutsetinfo
getunconfirmedbalance
getwalletinfo
getwork ( "data" )
help ( "command" )
importprivkey "bitcoinprivkey" ( "label" rescan )
importwallet "filename"
keypoolrefill ( newsize )
listaccounts ( minconf )
listaddressgroupings
listlockunspent
listreceivedbyaccount ( minconf includeempty )
listreceivedbyaddress ( minconf includeempty )
listsinceblock ( "blockhash" target-confirmations )
listtransactions ( "account" count from )
listunspent ( minconf maxconf  ["address",...] )
lockunspent unlock [{"txid":"txid","vout":n},...]
move "fromaccount" "toaccount" amount ( minconf "comment" )
ping
sendfrom "fromaccount" "tobitcoinaddress" amount ( minconf "comment" "comment-to" )
sendmany "fromaccount" {"address":amount,...} ( minconf "comment" )
sendrawtransaction "hexstring" ( allowhighfees )
sendtoaddress "bitcoinaddress" amount ( "comment" "comment-to" )
setaccount "bitcoinaddress" "account"
setgenerate generate ( genproclimit )
settxfee amount
signmessage "bitcoinaddress" "message"
signrawtransaction "hexstring" ( [{"txid":"id","vout":n,"scriptPubKey":"hex","redeemScript":"hex"},...] ["privatekey1",...] sighashtype )
stop
submitblock "hexdata" ( "jsonparametersobject" )
validateaddress "bitcoinaddress"
verifychain ( checklevel numblocks )
verifymessage "bitcoinaddress" "signature" "message"
walletlock
walletpassphrase "passphrase" timeout
walletpassphrasechange "oldpassphrase" "newpassphrase"
----


==== Bitcoin Coreクライアントのステータスの取得

コマンド: +getinfo+

((("Bitcoin Core client","client status, getting")))((("bitcoin-cli command line helper","getinfo command")))((("client status, getting")))((("getinfo command (bitcoin-cli)")))Bitcoinのgetinfo RPCコマンドは、Bitcoinネットワークノード、ウォレット、ブロックチェーンデータベースについての基本的な情報を表示します。以下の +bitcoin-cli+ コマンドを実行してみてください。

[source,bash]
----
$ bitcoin-cli getinfo
----
[source,json]
----
{
    "version" : 90000,
    "protocolversion" : 70002,
    "walletversion" : 60000,
    "balance" : 0.00000000,
    "blocks" : 286216,
    "timeoffset" : -72,
    "connections" : 4,
    "proxy" : "",
    "difficulty" : 2621404453.06461525,
    "testnet" : false,
    "keypoololdest" : 1374553827,
    "keypoolsize" : 101,
    "paytxfee" : 0.00000000,
    "errors" : ""
}
----

このデータは((("JavaScript Object Notation (JSON)"))) Javascriptオブジェクト記法(JSON)で返されます。JSONは多くのプログラミング言語で簡単に利用できるとともに、人間にとっても読みやす>いものです。このデータの中に、Bitcoinクライアントのバージョン情報(90000)やプロトコルバージョン情報(70002)、ウォレットバージョン情報(60000)があります。ウォレットにある現在の残高を見>ると0になっています。"blocks"とあるところには、現在何ブロックをBitcoinクライアントが把握しているかというブロック高(286216)があります。また、Bitcoinネットワークに関するいろいろな統計情報も見ることができ、このクライアントの設定内容も見ることができます。この章の残りの部分で、これらの設定値についてもっと詳細に分け入ってみます。 

[TIP]
====
bitcoindクライアントが他のBitcoinクライアントからブロックをダウンロードしながら、現在のブロックチェーンの高さに"追いつく"ためにおそらく１日以上かかるでしょう。+getinfo+ コマンドを使うことで追い付いたブロック高を把握することができ、現在の進捗を知ることができます。
====

==== ウォレットセットアップと暗号化

コマンド: +encryptwallet+, +walletpassphrase+

((("bitcoin-cli command line helper","wallet setup with")))((("bitcoin-cli command line helper","walletpassphrase command")))((("encryptwallet command (bitcoin-cli)")))((("walletpassphrase command (bitcoin-cli)")))((("wallets","setup from command line")))秘密鍵の生成やその他のコマンドに進む前に、まず最初にウォレットをパスワードで暗号化しておくべきです。この例>では、"foo"というパスワードとともに +encryptwallet+ コマンドを使います。言うまでもないことですが、必ず"foo"をもっと強力で複雑なパスワードに置き換えてください！

----
$ bitcoin-cli encryptwallet foo
wallet encrypted; Bitcoin server stopping, restart to run with encrypted wallet. The keypool has been flushed, you need to make a new backup.
$
----

ウォレットが暗号化されたかどうかはgetinfoコマンドを実行することで確認できます。暗号化すると +getinfo+ コマンドの実行結果に +unlocked_until+ という新しい項目が表示されるようになりま>す。これはどれだけの時間メモリの中にパスワードを保持しておくかというカウンターを表します。暗号化直後にgetinfoコマンドを実行するとunlocked_untilは0になっています。つまり、ロックされ>ています。

[source,bash]
----
$ bitcoin-cli getinfo
----
[source,json]
----
{
    "version" : 90000,

#[... その他の情報は省略 ...]

    "unlocked_until" : 0,
    "errors" : ""
}
$
----

ウォレットのロックを解除するためには、 +walletpassphrase+ コマンドが必要になります。このコマンドは、パスワードとウォレットを再びロックするまでの秒数での時間という２つのパラメータが>必要です。

----
$ bitcoin-cli walletpassphrase foo 360
$
----

getinfoコマンドを再度実行することでウォレットのロックが解除されていること、および再びロックされる時刻が確認できます。

[source,bash]
----
$ bitcoin-cli getinfo
----
[source,json]
----
{
    "version" : 90000,

#[... その他の情報は省略 ...]

    "unlocked_until" : 1392580909,
    "errors" : ""
}
----

==== ウォレットバックアップ、プレインテキストダンプ、リストア

コマンド: +backupwallet+, +importwallet+, +dumpwallet+

((("backups","of wallets")))((("backupwallet command (bitcoin-cli)")))((("bitcoin-cli command line helper","backupwallet command")))((("bitcoin-cli command line helper","dumpwallet command")))((("bitcoin-cli command line helper","importwallet command")))((("dumpwallet command (bitcoin-cli)")))((("importwallet command (bitcoin-cli)")))((("wallets","backing up")))((("wallets","dumping into plain text")))((("wallets","restoring")))次にウォレットバックアップを作り、このバックアップからウォレットをリストアする練習をしてみます。パラメータとし>てバックアップファイル名を指定することで +backupwallet+ コマンドを使ってバックアップをすることができます。ここでは、バックアップファイルとして _wallet.backup_ というファイルを作成します。


----
$ bitcoin-cli backupwallet wallet.backup
$
----

バックアップファイルを用いてリストアするには +importwallet+ コマンドを使います。ウォレットがロックされている場合には、バックアップファイルをインポートするために最初にロックを解除し>なければいけません(１つ前の +walletpassphrase+ 参照)。


----
$ bitcoin-cli importwallet wallet.backup
$
----

+dumpwallet+ コマンドは、ウォレットを人間が読めるテキストとしてダンプするときに使うことができます。

----
$ bitcoin-cli dumpwallet wallet.txt
$ more wallet.txt
# Wallet dump created by Bitcoin v0.9.0rc1-beta (2014-01-31 09:30:15 +0100)
# * Created on 2014-02- 8dT20:34:55Z
# * Best block at time of backup was 286234 (0000000000000000f74f0bc9d3c186267bc45c7b91c49a0386538ac24c0d3a44),
#   mined on 2014-02- 8dT20:24:01Z

KzTg2wn6Z8s7ai5NA9MVX4vstHRsqP26QKJCzLg4JvFrp6mMaGB9 2013-07- 4dT04:30:27Z change=1 # addr=16pJ6XkwSQv5ma5FSXMRPaXEYrENCEg47F
Kz3dVz7R6mUpXzdZy4gJEVZxXJwA15f198eVui4CUivXotzLBDKY 2013-07- 4dT04:30:27Z change=1 # addr=17oJds8kaN8LP8kuAkWTco6ZM7BGXFC3gk
[... 他にも多くのキーが出てきます ...]

$
----

==== ウォレットアドレスと受信トランザクション

コマンド: +getnewaddress+, +getreceivedbyaddress+, +listtransactions+, +getaddressesbyaccount+, +getbalance+

((("addresses", id="ix_ch03-asciidoc9", range="startofrange")))((("bitcoin-cli command line helper","getaddressesbyaccount command", id="ix_ch03-asciidoc10", range="startofrange")))((("bitcoin-cli command line helper","getbalance command", id="ix_ch03-asciidoc11", range="startofrange")))((("bitcoin-cli command line helper","getnewaddress command", id="ix_ch03-asciidoc12", range="startofrange")))((("bitcoin-cli command line helper","getreceivedbyaddress command", id="ix_ch03-asciidoc13", range="startofrange")))((("bitcoin-cli command line helper","listtransactions command", id="ix_ch03-asciidoc14", range="startofrange")))((("getaddressesbyaccount command (bitcoin-cli)", id="ix_ch03-asciidoc15", range="startofrange")))((("getbalance command (bitcoin-cli)", id="ix_ch03-asciidoc16", range="startofrange")))((("getnewaddress command (bitcoin-cli)", id="ix_ch03-asciidoc17", range="startofrange")))((("getreceivedbyaddress command (bitcoin-cli)", id="ix_ch03-asciidoc18", range="startofrange")))((("listtransactions command (bitcoin-cli)", id="ix_ch03-asciidoc19", range="startofrange")))((("transactions","wallets, receiving", id="ix_ch03-asciidoc20", range="startofrange")))((("wallets","addresses of", id="ix_ch03-asciidoc21", range="startofrange")))((("wallets","receiving transactions", id="ix_ch03-asciidoc22", range="startofrange")))Bitcoin参照クライアントはBitcoinアドレスプールやこのプールのデータサイズを管理しており、このプールのデ>ータサイズは +getinfo+ コマンドで表示されるkeypoolsizeとして表示されます。これらのBitcoinアドレスは自動的に生成され、パブリックなBitcoin受信アドレス、おつり受信アドレスとして使われ>ます。Bitcoinアドレスを作るためには、 +getnewaddress+ コマンドを使ってください。


----
$ bitcoin-cli getnewaddress 
1hvzSofGwT8cjb8JU7nBsCSfEVQX5u9CL
----

我々はこのBitcoinアドレスを他のウォレット(例えば取引所やウェブウォレット、その他のbitcoindウォレット)から我々のbitcoindウォレットに少額を送るために使うことができます。この例だと、さきほど作ったBitcoinアドレスに50mbits(0.050bitcoin)を送ることを考えてみます。 

我々は今bitcoindクライアントに問い合わせることでこのBitcoinアドレスにbitcoinが届いたか、0.050bitcoinになるまでに何回の検証が必要とされたかを知ることができます。bitcoinが送られた直後だと検証が全くされておらず、数秒後にようやくウォレットに反映されたことを確認することができます。検証回数を意図的に0に設定してさきほどのBitcoinアドレスに対してgetreceivedbyaddressコ>マンドを実行してみましょう。


----
$ bitcoin-cli getreceivedbyaddress 1hvzSofGwT8cjb8JU7nBsCSfEVQX5u9CL 0
0.05000000
----

もしコマンドの最後にある0を省略すると、最低でもminconfで設定されている回数だけ検証されないと送られたbitcoinが残高に反映されないようになっています。minconfとは、残高にトランザクションを表示する前に行う検証の回数の設定値です。minconfはbitcoindの設定ファイルの中で設定できます。今回のbitcoin送付のトランザクションは送付から数秒経ってもまだ検証されておらず、よって>残高が0と表示されているのです。


----
$ bitcoin-cli getreceivedbyaddress 1hvzSofGwT8cjb8JU7nBsCSfEVQX5u9CL 
0.00000000
----

bitcoindにあるBitcoinアドレス全てに対して送られたトランザクションは +listtransactions+ コマンドを使うことで参照できます。


----
$ bitcoin-cli listtransactions 
----
[source,json]
----
[
    {
        "account" : "",
        "address" : "1hvzSofGwT8cjb8JU7nBsCSfEVQX5u9CL",
        "category" : "receive",
        "amount" : 0.05000000,
        "confirmations" : 0,
        "txid" : "9ca8f969bd3ef5ec2a8685660fdbf7a8bd365524c2e1fc66c309acbae2c14ae3",
        "time" : 1392660908,
        "timereceived" : 1392660908
    }
]

----

全てのBitcoinアドレスは +getaddressesbyaccount+ コマンドを使うことで参照できます。


----
$ bitcoin-cli getaddressesbyaccount ""
----
[source,json]
----
[
    "1LQoTPYy1TyERbNV4zZbhEmgyfAipC6eqL",
    "17vrg8uwMQUibkvS2ECRX4zpcVJ78iFaZS",
    "1FvRHWhHBBZA8cGRRsGiAeqEzUmjJkJQWR",
    "1NVJK3JsL41BF1KyxrUyJW5XHjunjfp2jz",
    "14MZqqzCxjc99M5ipsQSRfieT7qPZcM7Df",
    "1BhrGvtKFjTAhGdPGbrEwP3xvFjkJBuFCa",
    "15nem8CX91XtQE8B1Hdv97jE8X44H3DQMT",
    "1Q3q6taTsUiv3mMemEuQQJ9sGLEGaSjo81",
    "1HoSiTg8sb16oE6SrmazQEwcGEv8obv9ns",
    "13fE8BGhBvnoy68yZKuWJ2hheYKovSDjqM",
    "1hvzSofGwT8cjb8JU7nBsCSfEVQX5u9CL",
    "1KHUmVfCJteJ21LmRXHSpPoe23rXKifAb2",
    "1LqJZz1D9yHxG4cLkdujnqG5jNNGmPeAMD"
]
----

最後に、 +getbalance+ コマンドはこのウォレットにある総残高を表示します。ここに表示される数字は、minconfで設定された回数以上検証されたトランザクションについてのもののみです。


----
$ bitcoin-cli getbalance
0.05000000
----

[TIP]
====
((("getbalance command (bitcoin-cli)","unconfirmed transactions and")))((("unconfirmed transactions","getbalance command and")))もしトランザクションがまだ検証されていなければ、+getbalance+が返す残高は0になります。"minconf"オプションは、何回トランザクションが検証されれば残高に表示するかを設定しています。(((range="endofrange", startref="ix_ch03-asciidoc22")))(((range="endofrange", startref="ix_ch03-asciidoc21")))(((range="endofrange", startref="ix_ch03-asciidoc20")))(((range="endofrange", startref="ix_ch03-asciidoc19")))(((range="endofrange", startref="ix_ch03-asciidoc18")))(((range="endofrange", startref="ix_ch03-asciidoc17")))(((range="endofrange", startref="ix_ch03-asciidoc16")))(((range="endofrange", startref="ix_ch03-asciidoc15")))(((range="endofrange", startref="ix_ch03-asciidoc14")))(((range="endofrange", startref="ix_ch03-asciidoc13")))(((range="endofrange", startref="ix_ch03-asciidoc12")))(((range="endofrange", startref="ix_ch03-asciidoc11")))(((range="endofrange", startref="ix_ch03-asciidoc10")))(((range="endofrange", startref="ix_ch03-asciidoc9")))
====


==== トランザクションのデコード＆解読

コマンド: +gettransaction+, +getrawtransaction+, +decoderawtransaction+

((("bitcoin-cli command line helper","decoderawtransaction command", id="ix_ch03-asciidoc23", range="startofrange")))((("bitcoin-cli command line helper","getrawtransaction command", id="ix_ch03-asciidoc24", range="startofrange")))((("bitcoin-cli command line helper","gettransaction command", id="ix_ch03-asciidoc25", range="startofrange")))((("decoderawtransaction command (bitcoin-cli)", id="ix_ch03-asciidoc26", range="startofrange")))((("getrawtransaction command (bitcoin-cli)", id="ix_ch03-asciidoc27", range="startofrange")))((("gettransaction command (bitcoin-cli)", id="ix_ch03-asciidoc28", range="startofrange")))((("transactions","decoding", id="ix_ch03-asciidoc29", range="startofrange")))((("transactions","exploring", id="ix_ch03-asciidoc30", range="startofrange"))) +gettransaction+ コマンドを使ってさきほど表示された受信トランザクションを探索してみましょう。さきほど +listtransactions+ コマンドのときに出てきた txid というトランザクションハッシュと、 +gettransaction+ コマンドでトランザクションをさらに細かく見ていきます。


++++
<programlisting>
$ bitcoin-cli gettransaction 9ca8f969bd3ef5ec2a8685660fdbf7a8bd365524c2e1fc66<?pdf-cr?>c309acbae2c14ae3

</programlisting>
++++
[source,json]
----
{
    "amount" : 0.05000000,
    "confirmations" : 0,
    "txid" : "9ca8f969bd3ef5ec2a8685660fdbf7a8bd365524c2e1fc66c309acbae2c14ae3",
    "time" : 1392660908,
    "timereceived" : 1392660908,
    "details" : [
        {
            "account" : "",
            "address" : "1hvzSofGwT8cjb8JU7nBsCSfEVQX5u9CL",
            "category" : "receive",
            "amount" : 0.05000000
        }
    ]
}
----

[TIP]
====
トランザクションIDはトランザクションが検証されるまで信頼できるものではありません。ブロックチェーン内にトランザクションハッシュがないということは、トランザクションがまだ処理されていないということを意味するわけではありません。これは((("transaction malleability"))) "トランザクション展性" と呼ばれるもので、トランザクションハッシュはブロック内で検証される前は修正され得るのです。検証された後、txidは不変になり信頼できるものになります。
====

+gettransaction+ コマンドで表示されるトランザクション形式は簡略化されたものです。さらに細かいトランザクションの内容を見るためには、 +getrawtransaction+ コマンドと +decoderawtransaction+ コマンドを使います。最初に、 _トランザクションハッシュtxid_ を引数とする +getrawtransaction+ コマンドを実行すると、トランザクションが生の16進数テキストとして表示されます。

++++
<programlisting>
$ bitcoin-cli getrawtransaction 9ca8f969bd3ef5ec2a8685660fdbf7a8bd365524c2e1f<?pdf-cr?>c66c309acbae2c14ae3

0100000001d717279515f88e2f56ce4e8a31e2ae3e9f00ba1d0add648e80c480ea22e0c7d3000<?pdf-cr?>000008b483045022100a4ebbeec83225dedead659bbde7da3d026c8b8e12e61a2df0dd0758e22<?pdf-cr?>7383b302203301768ef878007e9ef7c304f70ffaf1f2c975b192d34c5b9b2ac1bd193dfba2014<?pdf-cr?>104793ac8a58ea751f9710e39aad2e296cc14daa44fa59248be58ede65e4c4b884ac5b5b6dede<?pdf-cr?>05ba84727e34c8fd3ee1d6929d7a44b6e111d41cc79e05dbfe5ceaffffffff02404b4c0000000<?pdf-cr?>0001976a91407bdb518fa2e6089fd810235cf1100c9c13d1fd288ac1f312906000000001976a9<?pdf-cr?>14107b7086b31518935c8d28703d66d09b3623134388ac00000000
</programlisting>
++++

この16進数テキストを +decoderawtransaction+ コマンドを使ってデコードしてみます。さきほどの16進数テキストをコピーして +decoderawtransaction+ コマンドの１つ目の引数として貼付けて実行>するとJSON形式として解釈された文字列が出てきます。(16進数テキストになっているのは、以下の例にある長いJSONを短く格納しておくためです)


++++
<programlisting>
$ bitcoin-cli decoderawtransaction 0100000001d717279515f88e2f56ce4e8a31e2ae3e<?pdf-cr?>9f00ba1d0add648e80c480ea22e0c7d3000000008b483045022100a4ebbeec83225dedead659b<?pdf-cr?>bde7da3d026c8b8e12e61a2df0dd0758e227383b302203301768ef878007e9ef7c304f70ffaf1<?pdf-cr?>f2c975b192d34c5b9b2ac1bd193dfba2014104793ac8a58ea751f9710e39aad2e296cc14daa44<?pdf-cr?>fa59248be58ede65e4c4b884ac5b5b6dede05ba84727e34c8fd3ee1d6929d7a44b6e111d41cc7<?pdf-cr?>9e05dbfe5ceaffffffff02404b4c00000000001976a91407bdb518fa2e6089fd810235cf1100c<?pdf-cr?>9c13d1fd288ac1f312906000000001976a914107b7086b31518935c8d28703d66d09b36231343<?pdf-cr?>88ac00000000
</programlisting>
++++

++++
<screen>
{
    "txid" : "9ca8f969bd3ef5ec2a8685660fdbf7a8bd365524c2e1fc66c309acbae2c14ae3",
    "version" : 1,
    "locktime" : 0,
    "vin" : [
        {
            "txid" : "d3c7e022ea80c4808e64dd0a1dba009f3eaee2318a4ece562f8ef815<?pdf-cr?>952717d7",
            "vout" : 0,
            "scriptSig" : {
                "asm" : "3045022100a4ebbeec83225dedead659bbde7da3d026c8b8e12e<?pdf-cr?>61a2df0dd0758e227383b302203301768ef878007e9ef7c304f70ffaf1f2c975b192d34c5b9b2<?pdf-cr?>ac1bd193dfba20104793ac8a58ea751f9710e39aad2e296cc14daa44fa59248be58ede65e4c4b<?pdf-cr?>884ac5b5b6dede05ba84727e34c8fd3ee1d6929d7a44b6e111d41cc79e05dbfe5cea",
                "hex": "483045022100a4ebbeec83225dedead659bbde7da3d026c8b8e1<?pdf-cr?>2e61a2df0dd0758e227383b302203301768ef878007e9ef7c304f70ffaf1f2c975b192d34c5b9<?pdf-cr?>b2ac1bd193dfba2014104793ac8a58ea751f9710e39aad2e296cc14daa44fa59248be58ede65e<?pdf-cr?>4c4b884ac5b5b6dede05ba84727e34c8fd3ee1d6929d7a44b6e111d41cc79e05dbfe5cea"
            },
            "sequence" : 4294967295
        }
    ],
    "vout" : [
        {
            "value" : 0.05000000,
            "n" : 0,
            "scriptPubKey" : {
                "asm" : "OP_DUP OP_HASH160 07bdb518fa2e6089fd810235cf1100c9c<?pdf-cr?>13d1fd2 OP_EQUALVERIFY OP_CHECKSIG",
                "hex" : "76a91407bdb518fa2e6089fd810235cf1100c9c13d1fd288ac",
                "reqSigs" : 1,
                "type" : "pubkeyhash",
                "addresses" : [
                    "1hvzSofGwT8cjb8JU7nBsCSfEVQX5u9CL"
                ]
            }
        },
        {
            "value" : 1.03362847,
            "n" : 1,
            "scriptPubKey" : {
                "asm" : "OP_DUP OP_HASH160 107b7086b31518935c8d28703d66d09b36<?pdf-cr?>231343 OP_EQUALVERIFY OP_CHECKSIG",
                "hex" : "76a914107b7086b31518935c8d28703d66d09b3623134388ac",
                "reqSigs" : 1,
                "type" : "pubkeyhash",
                "addresses" : [
                    "12W9goQ3P7Waw5JH8fRVs1e2rVAKoGnvoy"
                ]
            }
        }
    ]
}
</screen>
++++

デコードされたトランザクションには、トランザクションインプット/アウトプットを含む全ての項目が表示されます。この場合トランザクションには、さきほど作った新しいBitcoinアドレスへの50mbitsの送付に対応した１つのインプットとそれに対して生成された２つのアウトプットが含まれます。インプットは前に検証されたトランザクションのアウトプットだったもので、 +d3c7+ で始まるvinのtxidのところに書かれています。２つのアウトプットは50mbits分の返金と送付元に送り返されるおつりを示します。 

+gettransaction+ コマンドなどを通して、ブロックチェーンの中にあるこのtxid(9ca8から始まる)の中身をさらに分け入っていくことができます。トランザクションからトランザクションへ次々に見ていくと、ある所有者からある所有者へのbitcoinが転送されていくトランザクションのチェーンをたどることができるのです。 

一度受け取ったトランザクションが検証されると、gettransactionコマンドはこのトランザクションが含まれることになった _ブロックハッシュ(識別子)_ も返すようになります。


++++
<screen>
$ bitcoin-cli gettransaction 9ca8f969bd3ef5ec2a8685660fdbf7a8bd365524c2e1fc66<?pdf-cr?>c309acbae2c14ae3
</screen>
++++


++++
<screen>
{
    "amount" : 0.05000000,
    "confirmations" : 1,
    "blockhash" : "000000000000000051d2e759c63a26e247f185ecb7926ed7a6624bc31c<?pdf-cr?>2a717b",
    "blockindex" : 18,
    "blocktime" : 1392660808,
    "txid" : "9ca8f969bd3ef5ec2a8685660fdbf7a8bd365524c2e1fc66c309acbae2c14ae3",
    "time" : 1392660908,
    "timereceived" : 1392660908,
    "details" : [
        {
            "account" : "",
            "address" : "1hvzSofGwT8cjb8JU7nBsCSfEVQX5u9CL",
            "category" : "receive",
            "amount" : 0.05000000
        }
    ]
}
</screen>
++++

ここで、 +ブロックハッシュ+ と +ブロックインデックス+ という新しい情報について見ていきます。 +ブロックハッシュ+ はトランザクションが含まれることになったブロックのハッシュ値で、 +ブ>ロックインデックス+ は含まれることになったトランザクションがブロックの中の何番目のトランザクションとして入っているかを表し今の場合は18です(このトランザクションがブロック内の18番目にあったということを表します)。 

[[txindex]]
.トランザクションデータベースインデックスとtxindexオプション
****
((("transaction database index")))デフォルトでBitcoin Coreは自身のウォレットに関係したトランザクション _のみ_ を含むデータベースを構築します。もしgettransactionコマンドなどで _任意の_ トランザクションを見れるようにしたいなら、Bitcoin Coreに ((("txindex option (Bitcoin Core)"))) +txindex+ というオプションを設定する必要があります。Bitcoin Core設定ファイル(通常はあなたのホームディレクトリの下に配置されている _.bitcoin/bitcoin.conf_ )で +txindex=1+ に設定してください。一度この変更をするとbitcoindを再起動して、indexが再構築されるまで待たなければいけません。(((range="endofrange", startref="ix_ch03-asciidoc30")))(((range="endofrange", startref="ix_ch03-asciidoc29")))(((range="endofrange", startref="ix_ch03-asciidoc28")))(((range="endofrange", startref="ix_ch03-asciidoc27")))(((range="endofrange", startref="ix_ch03-asciidoc26")))(((range="endofrange", startref="ix_ch03-asciidoc25")))(((range="endofrange", startref="ix_ch03-asciidoc24")))(((range="endofrange", startref="ix_ch03-asciidoc23"))) 
****

==== ブロック探索

コマンド: +getblock+, +getblockhash+

((("bitcoin-cli command line helper","getblock command")))((("bitcoin-cli command line helper","getblockhash command")))((("blocks","exploring")))((("getblock command (bitcoin-cli)))((("getblockhash command (bitcoin-cli)")))今やどのブロックに我々が実行したトランザクションが含まれていたかが分かったので、そのブロックの中身を見てみましょう。ブロックハッシュを指定して +getblock+ コマンドを実行してみてください。


++++
<screen>
$ bitcoin-cli getblock 000000000000000051d2e759c63a26e247f185ecb7926ed7a6624b<?pdf-cr?>c31c2a717b true
</screen>
++++


++++
<screen>
{
    "hash" : "000000000000000051d2e759c63a26e247f185ecb7926ed7a6624bc31c2a717<?pdf-cr?>b",
    "confirmations" : 2,
    "size" : 248758,
    "height" : 286384,
    "version" : 2,
    "merkleroot" : "9891747e37903016c3b77c7a0ef10acf467c530de52d84735bd555387<?pdf-cr?>19f9916",
    "tx" : [
        "46e130ab3c67d31d2b2c7f8fbc1ca71604a72e6bc504c8a35f777286c6d89bf0",
        "2d5625725b66d6c1da88b80b41e8c07dc5179ae2553361c96b14bcf1ce2c3868",
        "923392fc41904894f32d7c127059bed27dbb3cfd550d87b9a2dc03824f249c80",
        "f983739510a0f75837a82bfd9c96cd72090b15fa3928efb9cce95f6884203214",
        "190e1b010d5a53161aa0733b953eb29ef1074070658aaa656f933ded1a177952",
        "ee791ec8161440262f6e9144d5702f0057cef7e5767bc043879b7c2ff3ff5277",
        "4c45449ff56582664abfadeb1907756d9bc90601d32387d9cfd4f1ef813b46be",
        "3b031ed886c6d5220b3e3a28e3261727f3b4f0b29de5f93bc2de3e97938a8a53",
        "14b533283751e34a8065952fd1cd2c954e3d37aaa69d4b183ac6483481e5497d",
        "57b28365adaff61aaf60462e917a7cc9931904258127685c18f136eeaebd5d35",
        "8c0cc19fff6b66980f90af39bee20294bc745baf32cd83199aa83a1f0cd6ca51",
        "1b408640d54a1409d66ddaf3915a9dc2e8a6227439e8d91d2f74e704ba1cdae2",
        "0568f4fad1fdeff4dc70b106b0f0ec7827642c05fe5d2295b9deba4f5c5f5168",
        "9194bfe5756c7ec04743341a3605da285752685b9c7eebb594c6ed9ec9145f86",
        "765038fc1d444c5d5db9163ba1cc74bba2b4f87dd87985342813bd24021b6faf",
        "bff1caa9c20fa4eef33877765ee0a7d599fd1962417871ca63a2486476637136",
        "d76aa89083f56fcce4d5bf7fcf20c0406abdac0375a2d3c62007f64aa80bed74",
        "e57a4c70f91c8d9ba0ff0a55987ea578affb92daaa59c76820125f31a9584dfc",
        "9ca8f969bd3ef5ec2a8685660fdbf7a8bd365524c2e1fc66c309acbae2c14ae3",

#[... 多くのトランザクションができますが省略 ...]

    ],
    "time" : 1392660808,
    "nonce" : 3888130470,
    "bits" : "19015f53",
    "difficulty" : 3129573174.52228737,
    "chainwork" : "000000000000000000000000000000000000000000001931d1658fc048<?pdf-cr?>79e466",
    "previousblockhash" : "0000000000000000177e61d5f6ba6b9450e0dade9f39c257b4<?pdf-cr?>d48b4941ac77e7",
    "nextblockhash" : "0000000000000001239d2c3bf7f4c68a4ca673e434702a57da8fe0<?pdf-cr?>d829a92eb6"

</screen>
++++

このブロックには367個のトランザクションが含まれていて、見て分かるように18番目(+9ca8f9...+)のトランザクションが、我々のBitcoinアドレスに50mbitsを送金したトランザクションのtxidです。 +height+ パラメータはこのブロックがブロックチェーンの286384番目のブロックであることを示しています。 

また、 +getblockhash+ コマンドの引数でブロック高を指定することでブロックハッシュを取得することもできます。


++++
<screen>
$ bitcoin-cli getblockhash 0

000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f
</screen>
++++

"起源ブロック"のブロックハッシュを取り出してみましょう。起源ブロックという一番最初のブロックはheightが0で、Satoshi Nakamotoによって掘り出されたものです。


++++
<screen>
$ bitcoin-cli getblock 000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1<?pdf-cr?>b60a8ce26f
</screen>
++++


++++
<screen>
{
    "hash" : "000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26<?pdf-cr?>f",
    "confirmations" : 286388,
    "size" : 285,
    "height" : 0,
    "version" : 1,
    "merkleroot" : "4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7af<?pdf-cr?>deda33b",
    "tx" : [
        "4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b"
    ],
    "time" : 1231006505,
    "nonce" : 2083236893,
    "bits" : "1d00ffff",
    "difficulty" : 1.00000000,
    "chainwork" : "0000000000000000000000000000000000000000000000000000000100<?pdf-cr?>010001",
    "nextblockhash" : "00000000839a8e6886ab5951d76f411475428afc90947ee320161b<?pdf-cr?>bf18eb6048"
}
</screen>
++++

+getblock+ 、 +getblockhash+ 、 +gettransaction+ コマンドはプログラムからブロックチェーンを探索するために使われます。 


==== pass:[<phrase role="keep-together">未使用アウトプット</phrase>] に基づくトランザクションの生成、署名、送信

コマンド: +listunspent+, +gettxout+, +createrawtransaction+, +decoderawtransaction+, +signrawtransaction+, +sendrawtransaction+

((("bitcoin-cli command line helper","createrawtransaction command", id="ix_ch03-asciidoc31", range="startofrange")))((("bitcoin-cli command line helper","decoderawtransaction command", id="ix_ch03-asciidoc32", range="startofrange")))((("bitcoin-cli command line helper","gettxout command", id="ix_ch03-asciidoc33", range="startofrange")))((("bitcoin-cli command line helper","listunspent command", id="ix_ch03-asciidoc34", range="startofrange")))((("bitcoin-cli command line helper","sendrawtransaction command", id="ix_ch03-asciidoc35", range="startofrange")))((("bitcoin-cli command line helper","signrawtransaction command", id="ix_ch03-asciidoc36", range="startofrange")))((("createrawtransaction command (bitcoin-cli)", id="ix_ch03-asciidoc37", range="startofrange")))((("decoderawtransaction command (bitcoin-cli)", id="ix_ch03-asciidoc38", range="startofrange")))((("gettxout command (bitcoin-cli)", id="ix_ch03-asciidoc39", range="startofrange")))((("listunspent command (bitcoin-cli)", id="ix_ch03-asciidoc40", range="startofrange")))((("sendrawtransaction command (bitcoin-cli)", id="ix_ch03-asciidoc41", range="startofrange")))((("signrawtransaction command (bitcoin-cli)", id="ix_ch03-asciidoc42", range="startofrange")))((("transactions","creating from the command line", id="ix_ch03-asciidoc43", range="startofrange")))((("transactions","signing from the command line", id="ix_ch03-asciidoc44", range="startofrange")))((("transactions","submitting from the command line", id="ix_ch03-asciidoc45", range="startofrange")))((("unspent transaction output (UTXO)", id="ix_ch03-asciidoc46", range="startofrange")))Bitcoinのトランザクションは、所有権の転送というトランザクションチェーンを作るために前のトランザクションの結果である"アウトプット"を利用する形になっています。我々のウォレットは我々のBitcoinアドレスにそのようなアウトプットに紐づけるトランザクションをちょうど受け取ったところです。一度これが検証されると我々はそのアウトプットを使うことができるようになります。 

First, we use the +listunspent+ command to show all the unspent _confirmed_ outputs in our wallet:


----
$ bitcoin-cli listunspent 
----


++++
<screen>
[
    {
        "txid" : "9ca8f969bd3ef5ec2a8685660fdbf7a8bd365524c2e1fc66c309acbae2c<?pdf-cr?>14ae3",
        "vout" : 0,
        "address" : "1hvzSofGwT8cjb8JU7nBsCSfEVQX5u9CL",
        "account" : "",
        "scriptPubKey" : "76a91407bdb518fa2e6089fd810235cf1100c9c13d1fd288ac",
        "amount" : 0.05000000,
        "confirmations" : 7
    }
]
</screen>
++++

トランザクション +9ca8f9...+ には、Bitcoinアドレス +1hvzSo...+ に紐づけられた50mbitのアウトプット(voutインデックスが0)が付加されていて、この時点でこのトランザクションは7回の検証を受けています。一般にトランザクションは前に作られたアウトプットを前のtxidとvoutインデックスを参照することでアウトプットを取得しインプットとして使います。これから、txid "9ca8f9..." の0番目のvoutをインプットとして使うトランザクションを作成し、新しい別のBitcoinアドレスにbitcoinを送る新しいアウトプットをこのインプットに紐づけます。 

まず、このアウトプットの細かいところを探ってみましょう。+gettxout+ コマンドを使うと未使用アウトプットの詳細を知ることができます。トランザクションアウトプットは常にtxidとvoutの組み合わせで指定でき、これらは +gettxout+ コマンドを実行するときの引数となります。


++++
<screen>
$ bitcoin-cli gettxout 9ca8f969bd3ef5ec2a8685660fdbf7a8bd365524c2e1fc66c309ac<?pdf-cr?>bae2c14ae3 0
</screen>
++++


++++
<screen>
{
    "bestblock" : "0000000000000001405ce69bd4ceebcdfdb537749cebe89d371eb37e13<?pdf-cr?>899fd9",
    "confirmations" : 7,
    "value" : 0.05000000,
    "scriptPubKey" : {
        "asm" : "OP_DUP OP_HASH160 07bdb518fa2e6089fd810235cf1100c9c13d1fd2
         OP_EQUALVERIFY OP_CHECKSIG",
        "hex" : "76a91407bdb518fa2e6089fd810235cf1100c9c13d1fd288ac",
        "reqSigs" : 1,
        "type" : "pubkeyhash",
        "addresses" : [
            "1hvzSofGwT8cjb8JU7nBsCSfEVQX5u9CL"
        ]
    },
    "version" : 1,
    "coinbase" : false
}
</screen>
++++

+gettxout+ コマンドで表示されたものは、我々のBitcoinアドレス +1hvz...+ に紐づけられた50mbitのアウトプットです。このアウトプットを使うには、新しいトランザクションを作成します。まずこの50mbitのお金を送る新しいBitcoinアドレスを生成しましょう。


----
$ bitcoin-cli getnewaddress 
1LnfTndy3qzXGN19Jwscj1T8LR3MVe3JDb
----

我々のウォレットが今作った新しいBitcoinアドレス +1LnfTn...+ に25mbitを送ってみましょう。新しいトランザクションでは、前に出てきた50mbitのアウトプットを使い、この新しいBitcoinアドレスに25mbitを送ります。前のトランザクションから _全て_ のアウトプットを使う必要があるので、Bitcoinアドレス +1hvz...+ に返すおつり分も作らなければいけません。また、このトランザクション>のトランザクション手数料も払う必要があります。この手数料を支払うために、0.5mbitだけおつりから差し引き、24.5mbitをおつりとして返します。新しいアウトプットのbitcoinの総和(25 mBTC + 24.5 mBTC = 49.5 mBTC)とインプットのbitcoin(50 mBTC)の差は、マイナーによってトランザクション手数料としてかき集められます。 

+createrawtransaction+ コマンドを使ってこのトランザクションを作成します。+createrawtransaction+ コマンドの引数として、トランザクションのインプット(我々の検証済トランザクションから来た50mbitの未使用アウトプット)と、新しいアドレスに送るお金と元のBitcoinアドレスに戻ってくるおつりの2つのアウトプットを指定します。

++++
<screen>
$ bitcoin-cli createrawtransaction '[{"txid" : "9ca8f969bd3ef5ec2a8685660fdbf<?pdf-cr?>7a8bd365524c2e1fc66c309acbae2c14ae3", "vout" : 0}]' '{"1LnfTndy3qzXGN19Jwscj1<?pdf-cr?>T8LR3MVe3JDb": 0.025, "1hvzSofGwT8cjb8JU7nBsCSfEVQX5u9CL": 0.0245}'

0100000001e34ac1e2baac09c366fce1c2245536bda8f7db0f6685862aecf53ebd69f9a89c000<?pdf-cr?>0000000ffffffff02a0252600000000001976a914d90d36e98f62968d2bc9bbd68107564a156a<?pdf-cr?>9bcf88ac50622500000000001976a91407bdb518fa2e6089fd810235cf1100c9c13d1fd288ac0<?pdf-cr?>0000000
</screen>
++++

+createrawtransaction+ コマンドは生成されたトランザクションを暗号化した16進数テキストを作ります。 +decoderawtransaction+ コマンドを使って、このトランザクションが正しいのか、人間には読みにくいこの16進数テキストをデコードして確認してみましょう。

++++
<screen>
$ bitcoin-cli decoderawtransaction 0100000001e34ac1e2baac09c366fce1c2245536bd<?pdf-cr?>a8f7db0f6685862aecf53ebd69f9a89c0000000000ffffffff02a0252600000000001976a914d<?pdf-cr?>90d36e98f62968d2bc9bbd68107564a156a9bcf88ac50622500000000001976a91407bdb518fa<?pdf-cr?>2e6089fd810235cf1100c9c13d1fd288ac00000000
</screen>
++++


++++
<screen>
{
    "txid" : "0793299cb26246a8d24e468ec285a9520a1c30fcb5b6125a102e3fc05d4f3cb<?pdf-cr?>a",
    "version" : 1,
    "locktime" : 0,
    "vin" : [
        {
            "txid" : "9ca8f969bd3ef5ec2a8685660fdbf7a8bd365524c2e1fc66c309acb<?pdf-cr?>ae2c14ae3",
            "vout" : 0,
            "scriptSig" : {
                "asm" : "",
                "hex" : ""
            },
            "sequence" : 4294967295
        }
    ],
    "vout" : [
        {
            "value" : 0.02500000,
            "n" : 0,
            "scriptPubKey" : {
                "asm" : "OP_DUP OP_HASH160 d90d36e98f62968d2bc9bbd68107564a15<?pdf-cr?>6a9bcf OP_EQUALVERIFY OP_CHECKSIG",
                "hex" : "76a914d90d36e98f62968d2bc9bbd68107564a156a9bcf88ac",
                "reqSigs" : 1,
                "type" : "pubkeyhash",
                "addresses" : [
                    "1LnfTndy3qzXGN19Jwscj1T8LR3MVe3JDb"
                ]
            }
        },
        {
            "value" : 0.02450000,
            "n" : 1,
            "scriptPubKey" : {
                "asm" : "OP_DUP OP_HASH160 07bdb518fa2e6089fd810235cf1100c9c1<?pdf-cr?>3d1fd2 OP_EQUALVERIFY OP_CHECKSIG",
                "hex" : "76a91407bdb518fa2e6089fd810235cf1100c9c13d1fd288ac",
                "reqSigs" : 1,
                "type" : "pubkeyhash",
                "addresses" : [
                    "1hvzSofGwT8cjb8JU7nBsCSfEVQX5u9CL"
                ]
            }
        }
    ]
}
</screen>
++++

これは正しそうです！この新しいトランザクションは、検証された我々のトランザクションから未使用アウトプットを消費し、それを２つのアウトプットの中で使用しました。１つは送付先の新しいBitcoinアドレスへの25mbit、もう１つは送付元のBitcoinアドレスに返ってくるおつりの24.5mbitです。差の0.5mbitはトランザクション手数料であり、この新しいトランザクションが含まれたブロックを>探したマイナーに充当されます。 

もう気づいたかもしれませんが、トランザクションには空の +scriptSig+ が含まれています。なぜなら、我々がまだ署名をしていないからです。署名がないと、このトランザクションは意味をなしません。未使用アウトプットが置かれていたBitcoinアドレスを我々が _所有している_ ということをまだ証明していないのです。署名によって、このアウトプットの解除条件を満たし我々がこのアウトプットの所有者であることを証明すると、このアウトプットを使うことができるのです。 +signrawtransaction+ コマンドを使うことでこのトランザクションに署名をします。このコマンドの引数として、>署名をしたいトランザクションの16進数テキストを指定します。

[TIP]
====
((("wallets","signing transactions with")))暗号化されたウォレットでは、トランザクションを署名する前にウォレットのロックを解除しなければいけません。というのは、署名をするにはウォレットの秘密鍵にアクセスする必要があるためです。
====

++++
<screen>
$ bitcoin-cli walletpassphrase foo 360
$ bitcoin-cli signrawtransaction 0100000001e34ac1e2baac09c366fce1c2245536bda8<?pdf-cr?>f7db0f6685862aecf53ebd69f9a89c0000000000ffffffff02a0252600000000001976a914d90<?pdf-cr?>d36e98f62968d2bc9bbd68107564a156a9bcf88ac50622500000000001976a91407bdb518fa2e<?pdf-cr?>6089fd810235cf1100c9c13d1fd288ac00000000
</screen>
++++


++++
<screen>
{
    "hex" : "0100000001e34ac1e2baac09c366fce1c2245536bda8f7db0f6685862aecf53e<?pdf-cr?>bd69f9a89c000000006a47304402203e8a16522da80cef66bacfbc0c800c6d52c4a26d1d86a54<?pdf-cr?>e0a1b76d661f020c9022010397f00149f2a8fb2bc5bca52f2d7a7f87e3897a273ef54b277e4af<?pdf-cr?>52051a06012103c9700559f690c4a9182faa8bed88ad8a0c563777ac1d3f00fd44ea6c71dc512<?pdf-cr?>7ffffffff02a0252600000000001976a914d90d36e98f62968d2bc9bbd68107564a156a9bcf88<?pdf-cr?>ac50622500000000001976a91407bdb518fa2e6089fd810235cf1100c9c13d1fd288ac00000000",
    "complete" : true
}
</screen>
++++

この +signrawtransaction+ コマンドはもう１つの16進数テキストを返します。 +decoderawtransaction+ コマンドでこの16進数テキストをデコードして何が変わったのかを見てみましょう。


++++
<screen>
$ bitcoin-cli decoderawtransaction 0100000001e34ac1e2baac09c366fce1c2245536bda<?pdf-cr?>8f7db0f6685862aecf53ebd69f9a89c000000006a47304402203e8a16522da80cef66bacfbc0c<?pdf-cr?>800c6d52c4a26d1d86a54e0a1b76d661f020c9022010397f00149f2a8fb2bc5bca52f2d7a7f87<?pdf-cr?>e3897a273ef54b277e4af52051a06012103c9700559f690c4a9182faa8bed88ad8a0c563777ac<?pdf-cr?>1d3f00fd44ea6c71dc5127ffffffff02a0252600000000001976a914d90d36e98f62968d2bc9b<?pdf-cr?>bd68107564a156a9bcf88ac50622500000000001976a91407bdb518fa2e6089fd810235cf1100<?pdf-cr?>c9c13d1fd288ac00000000
</screen>
++++


++++
<screen>
{
    "txid" : "ae74538baa914f3799081ba78429d5d84f36a0127438e9f721dff584ac17b34<?pdf-cr?>6",
    "version" : 1,
    "locktime" : 0,
    "vin" : [
        {
            "txid" : "9ca8f969bd3ef5ec2a8685660fdbf7a8bd365524c2e1fc66c309acb<?pdf-cr?>ae2c14ae3",
            "vout" : 0,
            "scriptSig" : {
                "asm" : "304402203e8a16522da80cef66bacfbc0c800c6d52c4a26d1d86<?pdf-cr?>a54e0a1b76d661f020c9022010397f00149f2a8fb2bc5bca52f2d7a7f87e3897a273ef54b277e<?pdf-cr?>4af52051a0601 03c9700559f690c4a9182faa8bed88ad8a0c563777ac1d3f00fd44ea6c71dc5<?pdf-cr?>127",
                "hex" : "47304402203e8a16522da80cef66bacfbc0c800c6d52c4a26d1d<?pdf-cr?>86a54e0a1b76d661f020c9022010397f00149f2a8fb2bc5bca52f2d7a7f87e3897a273ef54b27<?pdf-cr?>7e4af52051a06012103c9700559f690c4a9182faa8bed88ad8a0c563777ac1d3f00fd44ea6c71<?pdf-cr?>dc5127"
            },
            "sequence" : 4294967295
        }
    ],
    "vout" : [
        {
            "value" : 0.02500000,
            "n" : 0,
            "scriptPubKey" : {
                "asm" : "OP_DUP OP_HASH160 d90d36e98f62968d2bc9bbd68107564a15<?pdf-cr?>6a9bcf OP_EQUALVERIFY OP_CHECKSIG",
                "hex" : "76a914d90d36e98f62968d2bc9bbd68107564a156a9bcf88ac",
                "reqSigs" : 1,
                "type" : "pubkeyhash",
                "addresses" : [
                    "1LnfTndy3qzXGN19Jwscj1T8LR3MVe3JDb"
                ]
            }
        },
        {
            "value" : 0.02450000,
            "n" : 1,
            "scriptPubKey" : {
                "asm" : "OP_DUP OP_HASH160 07bdb518fa2e6089fd810235cf1100c9c1<?pdf-cr?>3d1fd2 OP_EQUALVERIFY OP_CHECKSIG",
                "hex" : "76a91407bdb518fa2e6089fd810235cf1100c9c13d1fd288ac",
                "reqSigs" : 1,
                "type" : "pubkeyhash",
                "addresses" : [
                    "1hvzSofGwT8cjb8JU7nBsCSfEVQX5u9CL"
                ]
            }
        }
    ]
}
</screen>
++++

再度トランザクションを見てみると、インプットの +scriptSig+ が空ではなくテキストが含まれていることが分かります。この +scriptSig+ はBitcoinアドレス +1hvz...+ の所有者を証明している電>子署名で、アウトプットの解除条件を満たしアウトプットが使用できるようになります。この署名が、Bitcoinネットワーク上のいかなるノードでもこのトランザクションを検証できるようにしているのです。 

Bitcoinネットワークに新しく作ったトランザクションを送信する時が来ました。 +sendrawtransaction+ コマンドを使って送信してください。 +sendrawtransaction+ コマンドでは +signrawtransaction+ コマンドで返ってきた16進数テキストを引数として指定します。これはさきほどデコードした16進数テキストです。

++++
<screen>
$ bitcoin-cli sendrawtransaction 0100000001e34ac1e2baac09c366fce1c2245536bda8<?pdf-cr?>f7db0f6685862aecf53ebd69f9a89c000000006a47304402203e8a16522da80cef66bacfbc0c8<?pdf-cr?>00c6d52c4a26d1d86a54e0a1b76d661f020c9022010397f00149f2a8fb2bc5bca52f2d7a7f87e<?pdf-cr?>3897a273ef54b277e4af52051a06012103c9700559f690c4a9182faa8bed88ad8a0c563777ac1<?pdf-cr?>d3f00fd44ea6c71dc5127ffffffff02a0252600000000001976a914d90d36e98f62968d2bc9bb<?pdf-cr?>d68107564a156a9bcf88ac50622500000000001976a91407bdb518fa2e6089fd810235cf1100c<?pdf-cr?>9c13d1fd288ac00000000ae74538baa914f3799081ba78429d5d84f36a0127438e9f721dff584<?pdf-cr?>ac17b346
</screen>
++++

+sendrawtransaction+ コマンドは、Bitcoinネットワークにトランザクションが送信されると _トランザクションハッシュ(txid)_ を返します。 +gettransaction+ コマンドでこのトランザクションID>について問い合わせることができるようになりました。

++++
<screen>
$ bitcoin-cli gettransaction ae74538baa914f3799081ba78429d5d84f36a0127438e9f7<?pdf-cr?>21dff584ac17b346
</screen>
++++

[source,json]
----
{
    "amount" : 0.00000000,
    "fee" : -0.00050000,
    "confirmations" : 0,
    "txid" : "ae74538baa914f3799081ba78429d5d84f36a0127438e9f721dff584ac17b346",
    "time" : 1392666702,
    "timereceived" : 1392666702,
    "details" : [
        {
            "account" : "",
            "address" : "1LnfTndy3qzXGN19Jwscj1T8LR3MVe3JDb",
            "category" : "send",
            "amount" : -0.02500000,
            "fee" : -0.00050000
        },
        {
            "account" : "",
            "address" : "1hvzSofGwT8cjb8JU7nBsCSfEVQX5u9CL",
            "category" : "send",
            "amount" : -0.02450000,
            "fee" : -0.00050000
        },
        {
            "account" : "",
            "address" : "1LnfTndy3qzXGN19Jwscj1T8LR3MVe3JDb",
            "category" : "receive",
            "amount" : 0.02500000
        },
        {
            "account" : "",
            "address" : "1hvzSofGwT8cjb8JU7nBsCSfEVQX5u9CL",
            "category" : "receive",
            "amount" : 0.02450000
        }
    ]
}
----

前にやったように、我々は +getrawtransaction+ コマンドと +decodetransaction+ コマンドを使ってこのトランザクションのもっと詳細も調べることができます。これらのコマンドは、トランザクシ>ョンをBitcoinネットワークに送る前に生成しデコードした16進数テキストと全く同じテキストを返します。(((range="endofrange", startref="ix_ch03-asciidoc46")))(((range="endofrange", startref="ix_ch03-asciidoc45")))(((range="endofrange", startref="ix_ch03-asciidoc44")))(((range="endofrange", startref="ix_ch03-asciidoc43")))(((range="endofrange", startref="ix_ch03-asciidoc42")))(((range="endofrange", startref="ix_ch03-asciidoc41")))(((range="endofrange", startref="ix_ch03-asciidoc40")))(((range="endofrange", startref="ix_ch03-asciidoc39")))(((range="endofrange", startref="ix_ch03-asciidoc38")))(((range="endofrange", startref="ix_ch03-asciidoc37")))(((range="endofrange", startref="ix_ch03-asciidoc36")))(((range="endofrange", startref="ix_ch03-asciidoc35")))(((range="endofrange", startref="ix_ch03-asciidoc34")))(((range="endofrange", startref="ix_ch03-asciidoc33")))(((range="endofrange", startref="ix_ch03-asciidoc32")))(((range="endofrange", startref="ix_ch03-asciidoc31")))(((range="endofrange", startref="ix_ch03-asciidoc7")))(((range="endofrange", startref="ix_ch03-asciidoc6")))(((range="endofrange", startref="ix_ch03-asciidoc5")))(((range="endofrange", startref="ix_ch03-asciidoc2")))(((range="endofrange", startref="ix_ch03-asciidoc1")))  

[[alt_libraries]]
=== 代替のBitcoinクライアント、ライブラリ、ツールキット

((("clients, alternative", id="ix_ch03-asciidoc47", range="startofrange")))((("libraries, alternative", id="ix_ch03-asciidoc48", range="startofrange")))((("toolkits, alternative", id="ix_ch03-asciidoc49", range="startofrange")))Bitcoinネットワークと通信するのに、Bitcoin参照クライアントであるbitcoind以外に他にもBitcoinクライアントやライブラリがあります。これら>は様々なプログラミング言語で実装されていて、プログラマーにそれぞれのプログラミング言語ごとのインターフェイスを提供しています。 

代替実装は以下です。

https://github.com/libbitcoin/libbitcoin[libbitcoin]:: ((("libbitcoin library")))Bitcoin Cross-Platform C++ Development Toolkit
https://github.com/libbitcoin/libbitcoin-explorer[bitcoin explorer]:: ((("Bitcoin Explorer")))Bitcoin Command Line Tool
https://github.com/libbitcoin/libbitcoin-server[bitcoin server]:: ((("Bitcoin Server")))Bitcoin Full Node and Query Server
https://code.google.com/p/bitcoinj/[bitcoinj]:: ((("BitcoinJ library")))A Java full-node client library
https://opensource.conformal.com/wiki/btcd[btcd]:: ((("btcd","client")))A Go language full-node bitcoin client
https://bitsofproof.com[Bits of Proof (BOP)]:: ((("Bits of Proof (BOP)")))A Java enterprise-class implementation of bitcoin
https://github.com/jgarzik/picocoin[picocoin]:: ((("picocoin")))A C implementation of a lightweight client library for bitcoin
https://github.com/vbuterin/pybitcointools[pybitcointools]:: ((("pybitcointools library")))A Python bitcoin library
https://github.com/richardkiss/pycoin[pycoin]:: ((("pycoin library")))Another Python bitcoin library

他にもいろいろなプログラミング言語で実装された多くのライブラリがあり、常に新しいライブラリが作り出されています。 

[[libbitcoin]]
==== LibbitcoinとBitcoin Explorer

((("libbitcoin library")))((("libraries, alternative","libbitcoin library")))((("sx tools")))libbitcoinライブラリはクロスプラットフォームなC++ツールキットで、((("Bitcoin Server")))((("libraries, alternative","Bitcoin Server")))libbitcoin-server full-nodeと((("Bitcoin Explorer")))((("libraries, alternative","Bitcoin Explorer")))Bitcoin Explorer (bx)コマンドラインツールをサポートしています。

bxコマンドはこの章で説明したbitcoindクライアントコマンドと同じ機能を多く持っています。bxコマンドはまた、bitcoindでは提供されていないいくつかの重要な管理ツールや操作ツールも持っており、ステルスアドレスやステルス支払い、ステルスクエリのサポートだけでなくtype-2決定性キーやmnemonicキーエンコーディングも提供されています。????

===== Bitcoin Explorerインストール

((("Bitcoin Explorer","installing")))Bitcoin Explorerを使うには、単に https://github.com/libbitcoin/libbitcoin-explorer/wiki/Download[あなたが使用しているOSに合った署名済み実行ファイルをダウンロードしてください]。Linux、OS X、Windowsであれば、ビルドはmainnetとtestnetともに可能です。

引数なしで +bx+ と入力すると、利用可能な全てのコマンドリストが表示されます(<<appdx_bx>>参照)。

Bitcoin Explorerはまた https://github.com/libbitcoin/libbitcoin-explorer/wiki/Build[WindowsのためのVisual Studioプロジェクトだけでなく、LinuxやOS X上でソースコードから構築するインストーラも提供されています]。Autotoolsを使って手動でソースコードから構築することもできます。これらを使うと((("libbitcoin library","installing")))libbitcoinの依存ライブラリも一緒にインストールされます。

[TIP]
====
Bitcoin Explorerは、アドレスのエンコードやデコード、異なったフォーマットや表現方法への変換のための多くの有用なコマンドを提供しています。Base16(１６進数) やBase58、Base58Check、Base64などいろいろなフォーマットをこれらのコマンドを使って調べてみてください。
====

===== libbitcoinインストール

((("libraries, alternative","pycoin library")))((("pycoin library")))((("Python","pycoin library"))) ((("Kiss, Richard"))) Richard Kiss によって元々作成され管理されているPythonライブラリ https://github.com/richardkiss/pycoin[_pycoin_] は、Bitcoinのキーやトランザクションの扱いをサポートしているPythonベースライブラリであるだけでなく、規格外のトランザクションを適切に扱うスクリプト言語をもサポートしているライブラリです。

[TIP]
====
Bitcoin Explorerインストーラはbxとlibbitcoinライブラリ両方をインストールします。もしbxをソースコードから構築した場合はこのステップをスキップすることができます。
====

==== pycoin

((("libraries, alternative","pycoin library")))((("pycoin library")))((("Python","pycoin library"))) ((("Kiss, Richard"))) Richard Kiss によって元々作成され管理されているPythonライブラリ http://github.com/richardkiss/pycoin[_pycoin_] は、Bitcoinのキーやトランザクションの扱いをサポートしているPythonベースライブラリであるだけでなく、規格外のトランザクションを適切に扱うスクリプト言語をもサポートしているライブラリです。 

pycoinライブラリはPython 2系(2.7.x)とPython 3系(3.3以降)をサポートしており、kuやtxという便利なコマンドラインツールも付属しています。pycoin 0.42を仮想環境上(venvを利用)でPython 3系を使ってインストールするには、以下に沿ってやってみてください。

====
----
$ python3 -m venv /tmp/pycoin
$ . /tmp/pycoin/bin/activate
$ pip install pycoin==0.42
Downloading/unpacking pycoin==0.42
  Downloading pycoin-0.42.tar.gz (66kB): 66kB downloaded
  Running setup.py (path:/tmp/pycoin/build/pycoin/setup.py) egg_info for package pycoin
    
Installing collected packages: pycoin
  Running setup.py install for pycoin
    
    Installing tx script to /tmp/pycoin/bin
    Installing cache_tx script to /tmp/pycoin/bin
    Installing bu script to /tmp/pycoin/bin
    Installing fetch_unspent script to /tmp/pycoin/bin
    Installing block script to /tmp/pycoin/bin
    Installing spend script to /tmp/pycoin/bin
    Installing ku script to /tmp/pycoin/bin
    Installing genwallet script to /tmp/pycoin/bin
Successfully installed pycoin
Cleaning up...
$
----
====

以下は、pycoinライブラリを使ってbitcoinを取得して使うPythonスクリプトサンプルです。

====
[source,python]
----
include::code/pycoin_example.py[]
----
====

もしkuやtxというコマンドラインユーティリティを使うには、<<appdxbitcoinimpproposals>>の例を参照してみてください。

==== btcd
((("btcd")))((("clients, alternative","btcd")))btcdは ((("Go programming language"))) Go 言語で書かれているfull-nodeのBitcoin実装です。現在btcdは、Bitcoin参照実装であるbitcoindのように、厳密なブロックの受け入れルール(バグは含まれている)を使ってブロックチェーンのダウンロード、検証、提供をしています。また、適切に新しく掘り出されたブロックをリレーしたり、トランザクションプールを管理したり、ブロックにまだ組み込まれていない個別のトランザクションをリレーしたりもします。トランザクションプールに入っている全ての個別トランザクションは、先ほどの厳密な受け入れルールに従わなければなりません。また、トランザクションをフィルターするマイナー必要条件("標準"トランザクション)に基づく厳密検証もしています。この厳密検証はとてもメジャーな検証ルールです。

btcdとbitcoindの違いはbtcdがウォレットの機能を持っていないことで、これは計画的なデザインの決定でした。これは、あなたがbtcdを通して直接支払いをしたり受け取ったりできないことを意味します。ウォレット機能はbtcwalletとbtcguiプロジェクトによって提供されており、これらプロジェクトは両方とも活発に開発されています。その他の特筆すべき違いは、btcdがHTTP POSTリクエスト(これはbitcoindもサポートしています)とWebsocketの両方をサポートしていることで、事実btcdのRPCコネクションはデフォルトでTLS-enableになっています。

===== btcdのインストール

((("btcd","installing")))btcdをWindowsにインストールするには、 https://github.com/conformal/btcd/releases[GitHub] からmsiファイルをダウンロードし実行してください。もしくは、Linux上で以下のコマンドを実行してください。ただし、Go言語がすでにインストールされていることを前提にしています。


----
$ go get github.com/conformal/btcd/...
----

btcdを最新バージョンにアップデートするには、以下を実行するだけです。


----
$ go get -u -v github.com/conformal/btcd/...
----

===== btcdのコントロール

((("btcd","controlling")))btcdは多くの設定オプションを持っています。このオプションは以下を実行することで見ることができます。 

[source,bash]
----
$ btcd --help
----

btcdは、btcctlのようにすぐに使える形で提供されており、RPC経由でbtcdをコントロールしたりbtcdに問い合わせを出したりするコマンドラインツールが同封されています。ただbtcdはデフォルトでRPCサーバが使える状態にはなっておらず、最低でも以下の設定ファイルにRPCユーザ名とパスワードの両方を設定しなければいけません。

* _btcd.conf_:
[source,ini]
----
[Application Options]
rpcuser=myuser
rpcpass=SomeDecentp4ssw0rd
----
* _btcctl.conf_:
[source,ini]
----
[Application Options]
rpcuser=myuser
rpcpass=SomeDecentp4ssw0rd
----

もしくは、もしコマンドラインで設定ファイルを上書きしたければ以下を実行してください。

[source,bash]
----
$ btcd -u myuser -P SomeDecentp4ssw0rd
$ btcctl -u myuser -P SomeDecentp4ssw0rd
----

実行可能なオプションのリストを表示するには、以下を実行してください。 (((range="endofrange", startref="ix_ch03-asciidoc49")))(((range="endofrange", startref="ix_ch03-asciidoc48")))(((range="endofrange", startref="ix_ch03-asciidoc47")))(((range="endofrange", startref="ix_ch03-asciidoc0"))) 


----
$ btcctl --help
----
