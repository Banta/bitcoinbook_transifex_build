[[bitcoin_network_ch06]]
== Bitcoinネットワーク

=== Peer-to-Peer ネットワーク設計

((("bitcoin network", id="ix_ch06-asciidoc0", range="startofrange")))((("bitcoin network","architecture of")))((("peer-to-peer networks")))Bitcoinはインターネット上のpeer-to-peerネットワークとして構築されています。peer-to-peer、またはP2Pという言葉は、ネットワークに参加しているコンピュータがそれぞれ同等の立場を持ち、"特別な"ノードがなく、全てのノードがサービス負荷を負担し合っていることを指します。ネットワークノードは"フラット"なトポロジーを持つメッシュネットワークの中で互いに繋がっています。ここにサーバ、どこかに中央を持つサービス、ネットワーク内の階層はありません。peer-to-peerネットワーク内のノードは、サービスを提供もしまた同時に消費もすることで、ネットワークへ参加することのインセンティブとしての相互利益を保っています。peer-to-peerネットワークは本質的に活発であり、非中央的でオープンです。P2Pネットワークの代表的な例は初期インターネットそのもので、IPネットワーク上のノードは全て平等でした。今日のインターネットの構造はより階層的になりましたが、インターネットプロトコルはまだフラットトポロジーのエッセンスを保っています。Bitcoinが現れる前にP2Pテクノロジーを使った最も大きく最も成功したサービスはファイル共有であり、パイオニアとしてはNapster、最近の発展の牽引としてはBitTorrentなどがあります。

Bitcoin's P2P network architecture is much more than a topology choice. Bitcoin is a peer-to-peer digital cash system by design, and the network architecture is both a reflection and a foundation of that core characteristic. Decentralization of control is a core design principle and that can only be achieved and maintained by a flat, decentralized P2P consensus network. 

((("bitcoin network","defined")))"Bitcoinネットワーク"という言葉は、Bitcoin P2Pプロトコルが動作しているBitcoinノード全体を指します。Bitcoin P2Pプロトコルに加えて、((("Stratum (STM) mining protocol"))) Stratumのような他のプロトコルもあり、Stratumはマイニング、軽量またはモバイルのウォレットに使われたりします。これらの他のプロトコルは、Bitcoin P2Pプロトコルを使っているBitcoinネットワークにアクセスするサーバをルーティングするゲートウェイで使われています。また、これにより他のプロトコルで動くノードにネットワークを拡げることができます。例えば、StratumサーバはStratumマイニングノードをStratumプロトコルを通してメインのBitcoinネットワークに接続させ、StratumプロトコルとBitcoin P2Pプロトコルの橋渡しをします。Bitcoin P2Pプロトコル、プールマイニングプロトコル、Stratumプロトコル、およびBitcoinシステムの各要素を繋げるその他の関連したプロトコルを全て含む全ネットワークを"拡張されたBitcoinネットワーク"という言葉で表します。 

=== ノードタイプと役割

((("bitcoin network","nodes")))((("nodes","roles of")))((("nodes","types of")))Bitcoin P2Pネットワーク内のノードは平等ではありますが、これらはいくつかの役割に分かれています。Bitcoinノードは、ルーティング、ブロックチェーンデータベース、マイニング、ウォレットという機能の集合体です。これらの機能４つを全て持つfull-nodeが<<full_node_reference>>図で示されています。

[[full_node_reference]]
.４種類のBitcoinネットワークノード機能: ウォレット、マイナー、フルブロックチェーンデータベース、ネットワークルーティング
image::images/msbt_0601.png["FullNodeReferenceClient_Small"]

全てのノードはBitcoinネットワークに参加するためにルーティング機能を必ず持っていて、その他の機能は持っていたり持っていなかったりします。全てのノードはトランザクションとブロックを検証して伝搬し、その他のピアを発見してコネクションを常に保っています。<<full_node_reference>>図のfull-node例では、ルーティング機能を"Network Routing Node"と書いてあるオレンジの円で示しています。 

full-nodeと呼ばれるいくつかのノードは、完全で最新のブロックチェーンの管理もしています。full-nodeは外部への参照をすることなく閉じられた形で匿名的かつ厳然にトランザクションを検証します。いくつかのノードはブロックチェーンの一部の管理のみを行っており、((("simplified payment verification (SPV) nodes","defined"))) _simplified payment verification_ または SPV と呼ばれている方法でトランザクションを検証します。これらのノードはSPVまたは軽量ノードと呼ばれています。さきほどの図にあったfull-node例では、full-nodeのブロックチェーンデータベースを"Full Blockchain"と書いてあるブルーの円で示しています。<<bitcoin_network>>図では、SPVノードがブルーの円がない形で描かれており、これはブロックチェーンの完全なコピーを持たないということを表しています。 

マイニングノードは新しいブロックを作り出す競争をしており、proof-of-workアルゴリズムを解くための特別なハードウェアを動作させて行っています。いくつかのマイニングノードはfull-nodeでもあり、ブロックチェーンの完全なコピーを管理しています。一方それ以外はマイニングプールに参加している軽量ノードであり、full-nodeを管理しているプールサーバに依存しています。

ユーザウォレットは一部がfull nodeになっており、通常デスクトップBitcoinクライアントという形でfull nodeになっています。スマートフォンなどリソースが限られているデバイスでは多くのユーザウォレットがSPVノードになっています。ウォレット機能は<<full_node_reference>>図にある"Wallet"と書かれたグリーンの円で示されています。

Bitcoin P2Pプロトコル上の主なノードタイプに加えて、その他のプロトコルで動作しているノードもあります。例えば、マイニングプール特化型プロトコルや軽量クライアントアクセスプロトコルなどです。 

<<node_type_ledgend>>は拡張されたBitcoinネットワーク上の主なノードタイプを示しています。

=== 拡張されたBitcoinネットワーク

((("bitcoin network","extended")))((("extended bitcoin network")))Bitcoin P2Pプロトコルが動作しているメインのBitcoinネットワークは7000から10000個のノードから構成されており、それぞれBitcoin参照クライアント(Bitcoin Core)のいろいろなバージョンが動作しています。また、数百個のノードはBitcoin P2Pプロトコルとは別の((("BitcoinJ library")))((("btcd")))((("libbitcoin library"))) BitcoinJ、Libbitcoin、およびbtcdなどの実装が動作しています。Bitcoin P2Pネットワーク上の少数のノードはマイニングノードも兼ねていて、マイニング、トランザクション検証、新ブロック生成の競争をしています。いろいろな大きな企業は、Bitcoin Coreクライアントをベースとするfull-nodeクライアントを使ってBitcoinネットワークと通信をしており、これらはブロックチェーンの完全なコピーやネットワークノードとしての機能を持っているもののマイニングやウォレットの機能は持ちません。これらのノードはネットワークエッジルーターとして機能しており、いろいろなその他のサービス(交換所、ウォレット、ブロックエクプローラ、決済システム)を構築できるようにしています。 

以前説明したように拡張されたBitcoinネットワークはBitcoin P2Pプロトコルが動作しているネットワークを含んでおり、また一部分に特化したプロトコルで動作しているノードもあります。メインのBitcoin P2Pネットワークに接続しているノードは、多くの((("mining pools","on the bitcoin network")))プールサーバや、その他のプロトコルで動作しているノードに接続しているプロトコルゲートウェイです。 

<<bitcoin_network>>図は拡張されたBitcoinネットワークを示しており、ノードのいろいろなタイプ、ゲートウェイサーバ、エッジルーター、およびウォレットクライアント、またそれぞれが接続し合>うために使っているいろいろなプロトコルを示しています。 

[[node_type_ledgend]]
.拡張されたBitcoinネットワーク上の様々なノードタイプ
image::images/msbt_0602.png["BitcoinNodeTypes"]

[[bitcoin_network]]
.いろいろなノードタイプやゲートウェイ、プロトコルを表した拡張されたBitcoinネットワーク全体図
image::images/msbt_0603.png["BitcoinNetwork"]

=== ネットワークをどのように発見するのか

((("bitcoin network","discovery", id="ix_ch06-asciidoc1", range="startofrange")))((("network discovery", id="ix_ch06-asciidoc2", range="startofrange")))((("nodes","network discovery and", id="ix_ch06-asciidoc3", range="startofrange")))((("peer-to-peer networks","discovery by new nodes", id="ix_ch06-asciidoc4", range="startofrange")))新しいノードが立ち上がったとき、Bitcoinネットワークに参加するには他のBitcoinノードを見つけなければいけません。このプロセスを始めるために、新しいノードは少なくとも１個のノードを見つけ接続しなければいけません。他のノードの地理的な位置は関係ありません。というのは、Bitcoinネットワークのトポロジーは地理と関連づけて決められてはいないからです。このため、ランダムにノードが選ばれ得ます。 

((("peer-to-peer networks","connections")))知られているピアに接続するために、ノードはTCPコネクションを確立し、通常8333番ポート(一般にBitcoinによって使われているポート)または提供されているなら代替のポートを使います。コネクションを確立すると、ノードは((("version message"))) +version+ messageを送信することで"ハンドシェイク"を始めます(<<network_handshake>>参照)。version messageはと、以下のような基本的な識別情報を含んでいるものです。

+PROTOCOL_VERSION+:: クライアントが"会話をする"Bitcoin P2Pプロトコルバージョンを示す定数 (例えば 70002)
+nLocalServices+:: ノードがサポートしているローカルサービスのリスト、現状 +NODE_NETWORK+ のみ
+nTime+:: 現在時刻
+addrYou+:: このノードから見えるリモートノードのIP address
+addrMe+:: ローカルノードのIP address
+subver+:: このノード上で動作しているソフトウェアの種類を示すサブバージョン (例えば "/Satoshi:0.9.2.1/")+
+BestHeight+:: このノードのブロックチェーンのブロック高

(+version+ network messageの例については http://bit.ly/1qlsC7w[GitHub] 参照)

ピアノードはコネクションを承認し確立するために+verack+を返します。場合によっては、もしコネクションのお返しにピアとして接続し直す場合は自身の +version+  messageを送ります。 ???? 

新しいノードはどのようにしてピアを見つけるのでしょうか？最初の方法はたくさんの"DNSシード"を使ってDNSにクエリを投げることです。DNSシードはBitcoinノードのIPアドレスリストを提供するDNSサーバです。DNSシードのうちいくつかは安定的にリクエストを受け付けているBitcoinノードの静的なIPアドレスを返却しています。また、いくつかのDNSシードは、クローラや長期的に稼働しているBitcoinノードによって集められたBitcoinノードのリストからランダムにいくつかを選んで返却するカスタマイズされたBIND(Berkeley Internet Name Daemon)で実装されています。Bitcoin Coreクライアントは５つのDNSシードを含んでいます。これらは所有者やDNSシードの実装が多様になるように構成され、確実に初期状態構築プロセスが実行できるようになっています。Bitcoin Coreクライアントでは、DNSシードを使うかどうかを +-dnsseed+ オプションでコントロールできるようになっています(1がデフォルトで、デフォルトでDNSシードを使用するようになっています)。

DNSシードを使わない場合、Bitcoinネットワークについて何も知らない初期状態構築中のノードには少なくとも１つのBitcoinノードのIPアドレスが与えられなければいけません。その後、このノードはさらに導入手続きを進めて他のノードとのコネクションを確立します。コマンドラインオプション +-seednode+ は一番最初のシードBitcoinノードとコネクションを確立するために使われます。導入手続きで最初のシードノードが使われた後、Bitcoinクライアントはこのシードノードとのコネクションを切り、新たに発見したピアを使うようになります。 

[[network_handshake]]
.ピア同士の最初のハンドシェイク
image::images/msbt_0604.png["NetworkHandshake"]

一度１つまたはそれ以上のコネクションを確立すると、新しいノードは((("addr message"))) +addr+ messageという自身のIP addressが含まれた情報を隣接ノードに送信します。隣接ノードは次々に +addr+ messageを彼らの近くのノードに転送し、確実に新しく接続されたノードがwell knownになるようにします。また、新しく接続されたノードは +getaddr+ を隣接ノードに送ることができ、他のピアのIP addressリストを返してもらうようにお願いすることもできます。そうすれば、ノードは接続するピアを新たに見つけることができ、その存在を他のノードに知らせることができるのです。<<address_propagation>>図はアドレスを発見する手順を示しています。 


[[address_propagation]]
.自身のIPアドレスの伝搬と他のIPアドレスの発見
image::images/msbt_0605.png["AddressPropagation"]

ノードは２、３個の異なったピアと接続し、Bitcoinネットワークへの多様なパスを確立しなければいけません。このパスは信頼できるものではありません(ノードは連絡なく通信が切れたり復活したりする)。このため、他のノードの初期状態構築時にアシストするという目的だけでなく、古いコネクションを失ったときのためにもノードは常に新しいノードを見つけ続けなければいけません。最初に接続するノードはそのピアノードに導入手順を提供するため、初期状態構築をするためには少なくとも１個のコネクションがなければなりません。初期状態構築を終えた後ノードは最も最近うまくコネクションを張れたピアを覚えておき、リブートしたときにすばやく覚えておいたピアとコネクションを張ります。以前繋がっていたどのピアもコネクションリクエストに答えなければ、そのノードは再度シードノードを使って初期状態構築を行うことができます。 

Bitcoin Coreクライアントが動作しているノードでは、((("getpeerinfo command"))) +getpeerinfo+ のコマンドを使ってピアコネクションを表示することができます。

[source,bash]
----
$ bitcoin-cli getpeerinfo
----
[source,json]
----
[
    {
        "addr" : "85.213.199.39:8333",
        "services" : "00000001",
        "lastsend" : 1405634126,
        "lastrecv" : 1405634127,
        "bytessent" : 23487651,
        "bytesrecv" : 138679099,
        "conntime" : 1405021768,
        "pingtime" : 0.00000000,
        "version" : 70002,
        "subver" : "/Satoshi:0.9.2.1/",
        "inbound" : false,
        "startingheight" : 310131,
        "banscore" : 0,
        "syncnode" : true
    },
    {
        "addr" : "58.23.244.20:8333",
        "services" : "00000001",
        "lastsend" : 1405634127,
        "lastrecv" : 1405634124,
        "bytessent" : 4460918,
        "bytesrecv" : 8903575,
        "conntime" : 1405559628,
        "pingtime" : 0.00000000,
        "version" : 70001,
        "subver" : "/Satoshi:0.8.6/",
        "inbound" : false,
        "startingheight" : 311074,
        "banscore" : 0,
        "syncnode" : false
    }
]
----

((("peer-to-peer networks","automatic management, overriding")))自動的に行われるピア管理ではなく特定のピアのIP addressを指定するために +-connect=<IPAddress>+ オプションが用意されていて、１つまたは複数のIP addressを指定できます。このオプションが使われると、自動的にピアを見つけたりすることはせずにノードは選択されたIP addressにしか接続しないようになります。 

コネクション上に何もトラフィックがない場合、ノードは定期的にコネクション維持のためメッセージを送ります。90分以上何の通信もしなかったコネクションがあった場合、ノードはコネクションが切れたとみなし新しいピアを探し始めます。このように、Bitcoinネットワークは常に一時的なノードやネットワークの問題を調整しながら、中央のコントロールなしに必要に応じて有機的に成長または縮小を繰り返します。

=== Full Nodes

((("blockchains","full nodes and")))((("full nodes")))((("nodes","full")))full nodeは全てのトランザクションを持っている完全なブロックチェーンを管理しているノードです。もっと正確に言うと、full nodeはおそらく"フルブロックチェーンノード"と呼ばれるべきです。Bitcoinの初期の頃全てのノードはfull nodeでしたが、現在はBitcoin Coreがフルブロックチェーンノードです。これは２年前からBitcoinクライアントの新しい形が導入されてきたためです。新しい形というのは完全なブロックチェーンを管理する形ではなく軽量クライアントとして動かすという形です。次の節でこの詳細を説明します。 

((("blockchains","on full nodes")))フルブロックチェーンノードは完全で最新のブロックチェーンコピーを管理しており、これらノードは独立に最初のブロック(起源ブロック)から最新のブロックまでを構築し検証します。また、フルブロックチェーンノードは他のノードや情報源に頼ることなく独立的かつ厳然にどんなトランザクションでも検証します。フルブロックチェーンノードはBitcoinネットワークに頼ることで新しいトランザクションのブロックをBitcoinネットワークから受け取り、それらを検証した後ブロックチェーンのローカルコピーに追加していきます。 

フルブロックチェーンノードを動作させてみると分かるように、他のノードを全く信頼することも頼ることもなく全てのトランザクションの検証が独立に進められていきます。フルブロックチェーンを保持するために20GB強のストレージが必要であるため、フルブロックチェーンノードを走らせるには多くのディスク容量とBitcoinネットワークからブロックチェーンをダウンロードするための２、３日の時間が必要です。 

いくつかのフルブロックチェーンBitcoinクライアントの代替実装があり、別のプログラミング言語やソフトウェア設計で構築されています。しかし、主な実装はBitcoin参照クライアント((("Bitcoin Core client","and full nodes"))) Bitcoin Coreであり、Satoshiクライアントと呼ばれています。Bitcoinネットワーク上の90%以上のノードがBitcoin Coreのいろいろなバージョンで動作しています。このバージョンは+/Satoshi:0.8.6/+のように表示され、"Satoshi"のあとに、前に見た+getpeerinfo+コマンドの結果に出てくるsubversionが付加された形になっています。

=== "Inventory"の交換

((("blockchains","creating on nodes")))((("blockchains","on new nodes")))((("blocks","on new nodes")))((("full nodes","creating full blockchains on")))full nodeがピアと接続して最初にやることは、完全なブロックチェーンを構築することです。もしノードが新しくできたもので全くブロックチェーンを持っていなければ、Bitcoin Coreに埋め込まれている１個のブロック、起源ブロック、しか知りません。このため、新しいノードは数十万ブロックものブロックをBitcoinネットワークからダウンロード＆同期して、フルブロックチェーンを再構築しなければいけません。 

((("syncing the blockchain")))ブロックチェーンの同期プロセスは、+version+ messageから始まります。というのは、+version+ messageにノードの現在のブロックチェーン高(ブロック数)を示す+BestHeight+が含まれているからです。ノードは+version+ messagesを見て相手のピアが何ブロック保持しているかを知ることで、自身のブロックチェーンと比較できるようになります。次にピアノードは互いにローカルブロックチェーンのトップブロックハッシュ(フィンガープリント)を含む +getblocks+ messageを交換します。ピアのうちの一つは、トップブロックのハッシュと受け取ったハッシュは違っても、古いブロックのハッシュと受け取ったハッシュが一致することが分かったとすると、このことから自身の持っているブロックチェーンが相手のピアよりも長いということを知ることができます。 

より長いブロックチェーンを持っているピアは他のノードよりも多くのブロックを持っており、どのブロックを他のノードが欲しているかを特定することができます。他のノードと共有するべき最初の500ブロックを特定すると、これらブロックそれぞれのハッシュを((("inv messages"))) +inv+ (inventory) messageを使って他のノードに送ります。これらのブロックを持っていないノードは、+inv+ messageにあるハッシュから自身のブロックチェーンに足りないブロックのハッシュを選んだのち +getdata+ messagesを使ってフルブロックデータを送ってもらうようにリクエストを出します。

例えば、あるノードが起源ブロックしか持っていないとしましょう。起源ブロックの次の500ブロックのハッシュを含む +inv+ messageを他のピアから受け取ります。このノードは接続しているピア全てに次の500ブロックに関するブロックデータ送信リクエストを送りますが、このリクエストを送りすぎることによってBitcoinネットワークが破綻しないようになっています。このノードはピアごとに何ブロックがまだ送られてきていない"未達"状態にあるかをトラッキングし続けており、１ピアに対する未達状態最大ブロック数((("MAX_BLOCKS_IN_TRANSIT_PER_PEER constant"))) ( +MAX_BLOCKS_IN_TRANSIT_PER_PEER+ )を越えないようにチェックし続けています。この方法により、もし多くのブロックが必要だったとしても、前のデータ送信リクエストが完了してから次のリクエストを送るようになっています。それぞれのブロックを受け取ると、<<blockchain>>図で見るように、ブロックチェーンに追加されていきます。ローカルブロックチェーンが徐々に構築されていくにつれて、より多くのブロックのリクエスト＆受信がされていき、このノードのブロックチェーンがBitcoinネットワークのブロックチェーンに追いつくまでこのプロセスは続きます。 

ローカルブロックチェーンと他のピアのブロックチェーンとの比較および不足ブロックの取得プロセスは、ノードがどれくらいの時間オフラインになっていても継続されます。ノードが数分オフラインであったために数ブロックが不足してしまったりしても、または数ヶ月オフラインであったために数千ブロックが不足してしまったりしても、このノードはまず +getblocks+ を送り、 +inv+ レスポンスを受け取り足りないブロックのダウンロードを開始します。 


[[spv_nodes]]
=== Simplified Payment Verification (SPV) Nodes

((("nodes","SPV", id="ix_ch06-asciidoc5", range="startofrange")))((("nodes","lightweight", id="ix_ch06-asciidoc5a", range="startofrange")))((("simplified payment verification (SPV) nodes", id="ix_ch06-asciidoc6", range="startofrange")))全てのノードがフルブロックチェーンを保持する能力を備えているわけではありません。多くのBitcoinクライアントはディスク容量や計算スピードが限られているスマートフォンやタブレット、組み込みシステムなどのデバイス上で動作するように設計されています。このようなデバイスに対しては、フルブロックチェーンを保持することなしに前節で説明したプロセスを実行できるように _simplified payment verification_ (SPV)が使われます。この方法を用いるクライアントをSPVクライアントまたは軽量クライアントと呼びます。このクライアントが多く採用されるにつれて、SPVノードがBitcoinノードの主要な形、Bitcoinウォレット、になっています。

((("blockchains","on SPV nodes")))SPVノードはブロックヘッダだけをダウンロードしトランザクション自体はダウンロードしません。トランザクションがないヘッダだけのブロックチェーンはフルブロックチェーンの1/1000くらいの大きさになります。SPVノードはBitcoinネットワーク上の全てのトランザクションについて知っているわけではないため、使用可能な全てのUTXOを構築できません。SPVノードは、必要に応じてブロックチェーンの関連した部分のみを提供するピアに頼るという方法を用いてトランザクションを検証します。

[[inventory_synchronization]]
.ピアからブロックを取得することによってブロックチェーンと同期するノード
image::images/msbt_0606.png["InventorySynchronization"]

アナロジーとして、full nodeは行ったことのない町の全てのストリート、住所についての詳細な地図を持っている観光客に似ています。これに対して、SPVノードはメイン通りしか知らず行き当たりばったりで進む観光客のようなものです。両方の観光客ともメインストリートが確認できる点は同じですが、地図を持っていない観光客はメインストリートにどんな横道があるか、他にどんなストリートがあるかは分かりません。単に23 Church Streetというストリートにいるだけでは、地図を持っていない観光客は同じ名前のストリートが同じに町に他にも多くあるかどうか、目の前のストリートが行きたいストリートなのかどうかを知ることはできないのです。地図を持たない観光客が取れる最も良い方法は、十分な数の人々に尋ねることです。そのうちの何人かが彼をだまそうとしないことを祈りましょう。

simplified payment verificationはブロックチェーンの _高さ_ の代わりにブロックチェーンの _深さ_ を参照することでトランザクションを検証します。フルブロックチェーンノードが完全に検証された数千ブロックのブロックチェーンや全てのトランザクションを構築する一方、SPVノードは全てのブロックチェーン(しかし全てのトランザクションではない)とこのSPVノードと関連のあるトランザクションだけを検証します。 

例えばブロック300,000にあるトランザクションを調べる場合、full nodeは300,000個のブロックを起源ブロックまで結びつけUTXOのフルデータベースを構築しUTXOが使用されていないことを確認することでトランザクションを検証していきます。SPVノードはUTXOが使用されていないかどうかは検証できません。その代わり、SPVノードは((("merkle trees","SPV and"))) _merkle path_(<<merkle_trees>>参照)を使うことでトランザクションとこのトランザクションを含んでいるブロックとの間を結びつけていきます。ブロック300,000のトランザクションを使用する場合、SPVノードは６個のブロック、300,001番目から300,006番目まで、を確認するまで待ちます。これは他のノードが、300,000番目のブロックにあるトランザクションが二重に使用されたものではないことを６回検証するまで待つためです。

実際にトランザクションがブロックになかったときに、トランザクションがあるとSPVノードを説得することはできません。SPVノードはブロックの中のトランザクションの存在をmerkle path証明をリクエストすることで確認でき、ブロックチェーンにあるproof of workを検証できます。しかし、トランザクションの存在はSPVノードには"隠されて"います。SPVノードは確実にトランザクションは存在することを証明できますが、同じUTXOの二重使用のようなトランザクションが存在しているかどうかは検証できません。なぜなら、全てのトランザクションの記録を持っている訳ではないからです。これらの弱点は、DOS攻撃または二重使用攻撃に利用されてしまいます。これに対抗するために、SPVノードはランダムにいくつかのノードと接続するようにしておく必要があります。これは、できるだけ信頼できるノードと接続するようにしておくためです。ランダムに接続することで、ネットワーク分割攻撃またはSybil攻撃を回避することができます。というのは、SPVノードが攻撃者のノードまたは攻撃者のネットワークにのみに接続してしまうと、信頼できる正しいBitcoinネットワークに接続できなくなってしまうためです。

実用上、バランスよくコネクションを持っているSPVノードは十分に安全で、必要なリソース量、実用性、安全性のよいバランスがとられています。しかし、絶対に確実なセキュリティという点では、フルブロックチェーンノードが最も良いです。 

[TIP]
====
((("simplified payment verification (SPV) nodes","verification")))フルブロックチェーンノードは、あるトランザクションより下の全てのブロックのチェーンをチェックすることでこのトランザクションを検証します。これは、このUTXOが未使用であることを保証するためです。一方、SPVノードはこのブロックよりも上の一握りだけのブロックを確認することで、このブロックがどれだけ深く埋められているかを確認しています。 
====

((("block headers","getting on SPV nodes")))ブロックヘッダを得るために、SPVノードは +getblocks+ messageの代わりに ((("getheaders message"))) +getheaders+ message を使います。+getheaders+ message を受け取ったピアは2,000個までのブロックヘッダを１個の +headers+ message で返送します。このプロセスはfull nodeがブロックを集めるプロセスと同じです。また、SPVノードはピアが送信したブロックやトランザクションをフィルタリングしています。関連あるトランザクションを取得する際には +getdata+ request を使います。ピアはトランザクションが含まれている((("tx messages"))) +tx+ message を生成し返却します。<<spv_synchronization>>図はブロックヘッダの同期を示しています。

[[spv_synchronization]]
.SPVノードのブロックヘッダ同期
image::images/msbt_0607.png["SPVSynchronization"]

SPVノードは関連あるトランザクションのみを取得するので、プライバシーリスクが生じてしまいます。フルブロックチェーンノードと違って、全てのトランザクションを取得するわけではなく関連あるデータだけを取得するためウォレットのBitcoinアドレスがもれてしまうのです。例えば、第三者のモニタリングツールはSPVノード上のウォレットからリクエストされたトランザクションを全て追跡することができ複数のBitcoinアドレスをウォレットのユーザと結びつけることができてしまいます。 

SPV/軽量ノードが導入された後少しして、Bitcoinの開発者たちは _bloom filters_ と呼ばれるプライバシーを漏らさない機能を追加しました。bloom filtersは、SPVノードと関連あるBitcoinアドレスがどれかを漏らすことなくトランザクションの部分集合を取得する方法です。ただし、このフィルタリングメカニズムは正確なものではなく確率を利用したものです。(((range="endofrange", startref="ix_ch06-asciidoc6")))(((range="endofrange", startref="ix_ch06-asciidoc5a")))(((range="endofrange", startref="ix_ch06-asciidoc5"))) 

=== Bloom Filters

((("bitcoin network","bloom filters and", id="ix_ch06-asciidoc7", range="startofrange")))((("bloom filters", id="ix_ch06-asciidoc8", range="startofrange")))((("Simplified Payment Verification (SPV) nodes","bloom filters and", id="ix_ch06-asciidoc9", range="startofrange")))bloom filterは確率的探索フィルタで、欲しいパターンを正確に特定しなくてもよい方法です。bloom filterはプライバシーを漏らさないような探索パターンを作り、SPVノードに特定のパターンに合ったトランザクションが含まれているかを他のピアに確認することができるのです。 

前の節でのアナロジーとして、地図を持っていない観光客は人にある住所 "23 Church St." への方向を尋ねます。もし彼女がこのストリートへの方向を知らない人に尋ねたら、情報を得ることなくうっかり彼女が行こうとしているところを明かしてしまうことになるのです。bloom filterは「この近くにRCHで終わるストリートはありますか？」と尋ねるようなものです。このような質問をすることで、わずかだけ行きたいストリートの場所を知ることができます。このテクニックを使って、観光客は行きたい場所を特定していくことができるかもしれません。質問の仕方を変えることで正確な返答ではありませんが、観光客は住所を特定できる可能性のある多くの結果とプライバシーを守ることができるのです。もっと直接的に質問すれば、もっと少ない質問で行きたい場所に行けますが、プライバシーを失ってしまいます。 

bloom filtersは、この例と同じことをSPVノードがトランザクションを探すときに使えるようにし、正確性とプライバシーのバランスを取ることができるようにします。より正確なbloom filterは正確な結果を返しますが、どのBitcoinアドレスをウォレットが使っているかを明かすことでプライバシーを犠牲にします。代わりに、より粗いbloom filterはこのBitcoinノードに関係しないより多くのトランザクションに関する多くのデータを返しますが、プライバシーを保てるようにします。 

SPVノードは、bloom filterを"空"の状態で初期化しますが、この状態ではどんなパターンもマッチしません。次に、SPVノードはウォレットが持っている全てのBitcoinアドレスのリストを作成し、それぞれのBitcoinアドレスごとに探索パターンを作成します。通常、探索パターンは ((("pay-to-public-key-hash (P2PKH)","bloom filters and"))) pay-to-public-key-hash script です。これは、public-key-hash(Bitcoinアドレス)への支払いをするトランザクションに提供されるlocking scriptです。もしSPVノードが((("pay-to-script-hash (P2SH)","bloom filters and"))) P2SH アドレスの残高をトラッキングしているのであれば、探索パターンはpay-to-public-key-hash script の代わりに pay-to-script-hash script になります。次に、SPVノードは、bloom filterが探索パターンを認識できるようにそれぞれのこれらの探索パターンをbloom filterに追加します。最後に、SPVノードはbloom filterをピアに送り、ピアは送られてきたbloom filterを使ってどのトランザクションが探索パターンにマッチするかを調べます。 

bloom filterはN個のビット列とM個のハッシュ関数で構成されています。ハッシュ関数はいつも1からNの間の値を生成するようになっており、この数はビット列の場所に対応しています。どのノードでも同じハッシュ関数を使い特定の入力に対して同じ結果を得られるように、ハッシュ関数は決定性的なものになっています。bloom filterの長さ(N)とハッシュ関数の数(M)として違ったものを選ぶことでbloom filterをチューニングすることができ、正確さのレベルおよびプライバシーの確保度合いを調整できます。 

<<bloom1>>図では、bloom filterがどのように動くかのデモンストレーションとしてとても小さい16個のビット列と3個のハッシュ関数を使っています。 

[[bloom1]]
.16bitのフィールドと３つのハッシュ関数を持った極端にシンプルにしたbloom filterの例
image::images/msbt_0608.png["Bloom1"]

bloom filterはまず全てのビット列が0のなるように初期化されます。bloom filterにパターンを追加するために、パターンをそれぞれのハッシュ関数で次々にハッシュ化しbloom filterに追加していきます。インプットパターンを最初のハッシュ関数に通して1からNまでの間の数を得ます。この数に対応したビット列(1からNまでのindexが振ってある)のビットを見つけ +1+ を立てます。次のハッシュ関数に対しても同様に行いM個のハッシュ関数全てに対して行うと、ビットが +0+ から +1+ に変わった模様としてトランザクションに対する探索パターンがbloom filterに "記録" されます。 

<<bloom2>>図はパターン"A"を<<bloom1>>図のbloom filterに記録した例です。


２つ目のパターンを追加するプロセスは、１つ目のプロセスを繰り返すだけです。２つ目に対してもそれぞれのハッシュ関数を使ってハッシュ化し、ビット列の特定の場所のビットに +1+ を立てることでパターンを記録します。多くのパターンを記録していくにつれて、すでに +1+ のビットが立っている場所をもう一度 +1+ に立てようとするかもしれませんが、この場合このビットは変化しません。本質的に、bloom filterに多くのパターンを記録すればするほど +1+ が立っている場所が増え飽和していき、bloom filterの正確さは衰えていきます。これが、bloom filterが確率的なデータ構造、パターンを追加すればするほど正確性が失われる、になっている理由です。正確さはパターンの数が多くなればなるほど減り、逆に、ビット列の大きさ(N)とハッシュ関数の数(M)が大きくなればなるほどこの減り度合いを抑制できます。より大きなビット列と多くのハッシュ関数を使うことで多くのパターンをより正確に記録できるのです。 

[[bloom2]]
.前に示したシンプルなbloom filterにパターン"A"を与えた場合
image::images/msbt_0609.png["Bloom2"]

<<bloom3>>図はパターン"B"をbloom filterに記録する例です。

[[bloom3]]
.前に示したシンプルなbloom filterに２番目のパターン"B"を与えた場合
image::images/msbt_0610.png["Bloom3"]

あるパターンがbloom filterの一部にあるかどうかチェックするために、このパターンをそれぞれのハッシュ関数でハッシュ化し得られたビットパターンとbloom filterのビット列を比較します。あるパターンのビットパターンの中で +1+ になっている場所がbloom filterのビット列でも +1+ になっていれば、あるパターンが _おそらく_ bloom filterに含まれているだろうと推察できます。bloom filterのビット列のあるビットは複数のパターンによる重複で +1+ になっているかもしれないので、答えとしては確実ではないですが、むしろ確率的な答えになります。簡単に言うと、bloom filterは"たぶん、含まれる"と答えるだけです。 

<<bloom4>>図はパターン"X"がbloom filterに含まれているかチェックする例です。対応したビットは +1+ になっており、よっておそらくパターン"X"を含むということになります。

[[bloom4]]
.bloom filterを使ってパターン"X"が存在するかチェック。その結果は確率的な陽性、つまり"たぶんある"。
image::images/msbt_0611.png["Bloom4"]

逆に、あるパターンがbloom filterに含まれていないということをチェックする場合は、対応したbloom filterのビット列のどれか１つが +0+ であることを確認すればよく、このことであるパターンがbloom filterには含まれていないということを証明することができます。含まれていないというチェックに対しては確率的ではなく、確実なものです。簡単に言うと、bloom filterは"絶対に含まれない！"と答えることができます。 

<<bloom5>>図はパターン"Y"がbloom filterに含まれているかチェックする例です。対応したビットの１つが +0+ になっており、よってパターン"Y"は全体に含まれないということになります。

[[bloom5]]
.bloom filterを使ってパターン"Y"が存在するか確認。その結果は正確な陰性、つまり"確実にない！"。
image::images/msbt_0612.png[]

bloom filterのBitcoinでの実装は Bitcoin Improvement Proposal 37 (BIP0037) に記述されています。<<appdxbitcoinimpproposals>>を参照するか、または http://bit.ly/1x6qCiO[GitHub] に行ってみてください。

=== Bloom FiltersとInventory更新

((("inventory updates, bloom filters and")))bloom filterはSPVノードが受け取るトランザクション(およびそれらを含んでいるブロック)をフィルタリングするために使われます。SPVノードはSPVノードのウォレットにあるBitcoinアドレスのみにマッチするフィルタを作成します。SPVノードはbloom filterを含んでいる((("filterload message"))) +filterload+ messageをピアに送ります。bloom filterが送られると、ピアはそれぞれのトランザクションのアウトプットを送られてきたbloom filterでチェックします。bloom filterにマッチしたトランザクションだけがSPVノードに送られます。 

+getdata+ messageに対するレスポンスとして、ピアはbloom filterにマッチしたブロックのヘッダとマッチしたトランザクションそれぞれに対するmerkle  path(<<merkle_trees>>参照)を含む +merkleblock+ message をSPVノードに送ります。ピアはまたbloom filterにマッチしたトランザクションを含む +tx+ messages も送ります。

SPVノードが新たにパターンを増やす場合は ((("filteradd message"))) +filteradd+ message をピアに送ることでパターンをbloom filterに追加できます。またbloom filterを削除するためには、((("filterclear message"))) +filterclear+ message をピアに送ります。bloom filterからあるパターンだけを削除することはできないので、この場合SPVノードは一度bloom filterを削除してから新しいbloom filterを送り直します。(((range="endofrange", startref="ix_ch06-asciidoc9")))(((range="endofrange", startref="ix_ch06-asciidoc8")))(((range="endofrange", startref="ix_ch06-asciidoc7"))) 

[[transaction_pools]]
=== トランザクションプール

((("bitcoin network","transaction pools")))((("transaction pools")))((("transactions","unconfirmed, pools of")))((("unconfirmed transactions")))Bitcoinネットワーク上のほとんどのノードは _メモリプール_ または _トランザクションプール_ と呼ばれる未検証トランザクションの一時リストを持っています。ノードはこのプールを使ってBitcoinネットワークに伝わっていてもまだブロックチェーンに含まれていないトランザクションをトラッキングしています。例えば、ウォレットを持っているノードは、Bitcoinネットワークに伝わっていてもまだ検証されていないウォレットへの入金トランザクションを一時的にこのトランザクションプールに保持しています。 

トランザクションが到着したり検証されたりすると、これらはトランザクションプールに追加されたり隣接ノードに中継されBitcoinネットワーク上を伝搬していったりします。

((("orphan transaction pool")))いくつかのノードはまた孤児になっているトランザクションを入れておく別のプールも持っています。もしトランザクションインプットがまだノードが知らないトランザクションを参照していた場合、親トランザクション(トランザクションインプットにあるトランザクション)が到着するまでorphanトランザクションは一時的にorphanプールに保存されます。 

トランザクションがトランザクションプールに追加されるとき、ノードはorphanプールにあるトランザクションが、トランザクションプールに追加されるトランザクションアウトプットを参照していないかチェックします。もし参照していれば、orphanプールから削除してトランザクションプールに追加されます。このプロセスはorphanプールにあるトランザクション全てに対して行われ、トランザクションが到着することを起点にして全トランザクションのチェーンが再構築されていきます。 

((("orphan transaction pool","storage")))((("transaction pools","storage")))トランザクションプールもorphanプール(もし実装されていれば)もローカルメモリに保持され、永続的なストレージには保存されません。むしろこれらは常にBitcoinネットワークからmessageが届くごとに書き変わっていくためローカルメモリのほうがよいのです。ノードが起動するときどちらのプールも空になっていて、Bitcoinネットワークからトランザクションが届くと次第に混み合ってきます。

いくつかのBitcoinクライアントの実装ではUTXOデータベースまたはUTXOプールも管理されています。このプールはブロックチェーン上の全ての未使用アウトプットを集めたものです。"UTXOプール"という名前の響きがトランザクションプールと似ていますが、別のデータの集まりです。トランザクションプールやorphanプールと違って、UTXOプールの初期状態は空ではなく最初から数百万個の未使用トランザクションアウトプット(2009年からのトランザクションアウトプット)を持っています。UTXOプールはローカルメモリまたは永続ストレージのデータベースに保持されています。 

トランザクションプールとorphanプールはそれぞれのノードでの状態が異なりノードがいつ起動したか再起動したかによって変わってきますが、UTXOプールはBitcoinネットワーク内で合意されたものであり、ノードごとの違いはわずかです。さらに、トランザクションプールとorphanプールは未検証トランザクションのみを含み、UTXOプールは検証済アウトプットのみを含みます。

=== アラートメッセージ

((("alert messages")))((("bitcoin network","alert messages")))アラートメッセージは稀にしか使われない機能ですが、それにも関わらずほとんどのノードに実装されています。アラートメッセージはBitcoinの"緊急放送システム"で、コアのBitcoin開発者たちが緊急メッセージを全てのBitcoinノードに送れます。この機能を使うことで、コアのBitcoin開発者たちがBitcoinネットワーク内の重大な問題を全てのBitcoinユーザに通知できるようになっています。例えばユーザが何らかのアクションをとらなければならないクリティカルなバグのようなものを通知するためです。このアラートシステムはほんの数回だけしか使われておらず、最も大きなものとしては2013年初期にあったクリティカルなデータベースバグのときで、ブロックチェーンの分岐が起きてしまったときに使用されています。 

アラートメッセージは +alert+ messageによって伝搬されます。アラートメッセージは以下にあるフィールドを含んでいます。

ID::
アラートを一意に指定するID

Expiration::
アラートが失効するまでの時間

RelayUntil::
アラートが中継されなくなるまでの時間

MinVer, MaxVer::
アラートが適用されるBitcoinプロトコルバージョンの範囲

subVer::
アラートが適用されるクライアントバージョン

Priority::
アラートの優先レベル、現在使用されていない

アラートは公開鍵で暗号学的に署名されています。公開鍵に対応した秘密鍵は何人かの選ばれたコア開発メンバーによって保持されています。このデジタル署名によってBitcoinネットワークを嘘のアラートが伝搬しないようになっています。

アラートメッセージを受け取ったノードはそれを検証し、有効期間をチェックし、全てのピアにアラートメッセージを伝搬します。このため、Bitcoinネットワーク上をすばやく伝搬することができるようになっています。 

((("Bitcoin Core client","alerts, configuring")))Bitcoin Coreクライアント内に、このアラートを表示することができるコマンドラインオプション +-alertnotify+ があり、アラートを受け取ったときに実行するコマンドを指定できます。アラートメッセージは +alertnotify+ コマンドにパラメーターとして渡されます。よくある設定は、 +alertnotify+ コマンドにノードの管理者にアラートメッセージを含むEメールを送る設定です。このアラートはまたグラフィカルなユーザインターフェイス(bitcoin-Qt)が動いていればポップアップダイアログとしても表示されます。 

Bitcoinプロトコルの他の実装では、アラートを別の形で受け取られているかもしれません。((("mining","hardware, alerts and")))多くのハードウェアに埋め込まれたBitcoinマイニングシステムではアラートメッセージ機能は実装されていません。というのは、ユーザインターフェイスがないためです。このようなマイニングシステムを動作させているマイナーは、マイニングプールオペレーターを通してアラートを受け取るか、アラートのためだけに軽量ノードを動作させておくことを強く推奨します。(((range="endofrange", startref="ix_ch06-asciidoc0"))) 


