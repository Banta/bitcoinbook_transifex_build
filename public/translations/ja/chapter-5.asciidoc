[[ch5]]
[[transactions]]
== トランザクション

[[ch5_intro]]
=== はじめに

((("transactions", id="ix_ch05-asciidoc0", range="startofrange")))トランザクションはBitcoinシステムの中で最も重要な部分です。Bitcoinのそれ以外のものは、トランザクションが作成され、Bitcoinネットワークを伝搬し、検証そして最後にグローバルなトランザクション元帳(ブロックチェーン)に追加されるという流れを支えるように作られています。トランザクションはBitcoinシステム参加者間での価値の転送をデジタル化したデータの集合体です。それぞれのトランザクションはBitcoinのブロックチェーン(グローバルな複式簿記元帳)の中にある誰でも見ることができる取引です。 

この章では、いろいろな形式のトランザクションや、トランザクションは何を含んでいるのか、トランザクションはどのように作られるのか、またどのように検証されるのか、どのように永続的な記録の一部になるのか、ということを説明していきます。 

[[tx_lifecycle]]
=== トランザクションのライフサイクル

((("transactions","lifecycle of", id="ix_ch05-asciidoc1", range="startofrange")))トランザクションのライフサイクルはまず s((("origination of transactions"))) _origination_ と呼ばれるトランザクションの生成から始まります。このときトランザクションは１つまたは複数の署名で署名されます。これら署名はトランザクションによって参照されている資金を使う許可を意味します。署名後にトランザクションはBitcoinネットワークにブロードキャストされます。それぞれのネットワークノード(Bitcoinネットワークへの参加者)はトランザクションを確認し、(ほぼ)全てのノードに行き渡るまでトランザクションがどんどんBitcoinネットワーク内を伝搬していきます。最後に、トランザクションはマイニングノードによって検証され、ブロックチェーンの中のブロックに記録されます。 

一度ブロックチェーンに記録され十分なブロックによって確認される(confirmation)と、トランザクションはBitcoin元帳の永続的な一部となり、全ての参加者によって有効なものとして受け入れられます。トランザクションによって新しい所有者に割り当てられた資金は新しいトランザクションの中で使用することができ、所有者の連鎖を拡げて再びトランザクションのライフサイクルが始まることになります。 

[[tx_origination]]
==== トランザクションの生成

((("transactions","creating")))小切手と同じやり方を使ってトランザクションを考えてみると考えやすいです。小切手と同じように、トランザクションはお金を転送するという意思を表す道具で、実際に使われるまで目に見える形にはなりません。また小切手と同じように、トランザクションの発行人はトランザクションに署名している人である必要はありません。 

仮にトランザクションを作った人が口座の正規署名者でなかったとしてもトランザクションは誰かによってオンラインまたはオフラインで作ることができます。例えば、口座へのアクセス権を持った事務員はCEOによる署名が入った小切手を作ることができ、同様に口座へのアクセス権を持った事務員はBitcoinトランザクションを作ることができ、トランザクションを有効にするデジタル署名をトランザクションに適用することができます。小切手は資金がある特定の口座を参照している一方、Bitcoinトランザクションは口座ではなく１つ前のトランザクションを参照することになります。 

トランザクションが一度作られると、資金の所有者(または所有者たち)によって署名されます。もし正規の形式を保持しつつ署名されていれば、署名されたトランザクションは有効になり資金の転送を実行するために必要な全ての情報を含んでいることになります。最終的に、有効なトランザクションはBitcoinネットワークを伝搬していき、マイナーによって公的な元帳(ブロックチェーン)に格納されます。

[[tx_bcast]]
==== Bitcoinネットワークへのトランザクションのブロードキャスト

((("bitcoin network","broadcasting transactions to")))((("transactions","broadcasting to network")))最初に、トランザクションはブロックチェーンに記録されるためにBitcoinネットワークに放出される必要があります。Bitcoinトランザクションは300から400バイトのデータを持ち、数万ものBitcoinノードのいずれか１つに辿り着かなければいけません。２つ以上のBitcoinノードにブロードキャストするため、送信者はBitcoinノードを信用する必要はありません。ノードは送信者を信用する必要はなく、また送信者が誰なのかを特定する必要もありません。トランザクションは署名されており、また一切の機密情報(秘密鍵や証明書)も含まれていないため、公にブロードキャストするためにいかなる転送手段を使っても構いません。例えば、センシティブな情報が含まれているため暗号化されたネットワークでしかデータの転送ができないクレジットカードのトランザクションと違って、Bitcoinのトランザクションはいかなるネットワークを通してでも送ることができます。トランザクションがBitcoinノードにたどり着くことができるのであれば、最初の転送方法はどうでもよいのです。 

((("insecure networks, transmitting bitcoin over")))このため、BitcoinトランザクションはWiFiやBlutooth、NFC、Chirp、バーコード、Bitcoinアドレスのウェブフォームへのコピペのような安全でないネットワークを通してでも転送することができます。安全でない極端な場合として、パケット通信や衛星中継、バースト転送を用いた短波通信、周波数ホッピングなどのスペクトラム拡散などがあります。Bitcoinトランザクションは、絵文字としてでさえ表現でき、公的なフォーラムへの投稿、またテキストメッセージ、Skypeチャットメッセージとして送ることもできます。Bitcoinはお金をデータの形に変え、これにより誰もトランザクションを作成や実行を阻止できないようにしたのです。 

[[tx_propagation]]
==== Bitcoinネットワーク上でのトランザクションの伝搬

((("bitcoin network","propagating transactions on")))((("transactions","propagating")))一度BitcoinトランザクションがBitcoinネットワークに接続されたノードに送られると、このトランザクションは送られたノードで有効なものか検証されます。有効なものだと確認されると、そのノードは接続している他のノードにこのトランザクションを伝搬します。同時に、成功メッセージが発行ノードに返却されます。もしこのトランザクションが無効なものであればノードはこのトランザクションを棄却し、同時に棄却メッセージを発行ノードに返却します。 

Bitcoinネットワークはpeer-to-peerネットワークであり、それぞれのBitcoinノードは数個のノードに接続されています。この数個のノードはpeer-to-peerプロトコルに従ってノードを起動したときに発見したノードです。全Bitcoinネットワークは緩やかに接続されたメッシュであり、固定されたトポロジーや構造を持つことなく全てのノードは平等に扱われます。トランザクションやブロックを含んだメッセージはそれぞれのノードから接続されている他のピアに伝搬します。このプロセスは"flooding"と呼ばれています。有効だと確認された新しいトランザクションは接続された全てのノード(隣接ノード)に送られ、それぞれの隣接ノードはまた全ての隣接ノードにこのトランザクションを送ります。このような方法で、全ての接続されたノードがこのトランザクションを受け取るまで波紋のようにBitcoinネットワーク内を伝わっていき数秒以内に全体に広がっていきます。 

Bitcoinネットワークは、攻撃に強く、また効率的なルールに従って全てのノードにトランザクションとブロックを伝搬できるように設計されています。Bitcoinシステムにとって厄介なDOS攻撃のような強制的なデータの送りつけを防ぐために、全てのノードはトランザクションを次のノードに送る前に全てのトランザクションが有効なものか確認しています。このため、おかしなトランザクションが次のノードに送られることはありません。この方法について<<tx_verification>>で詳細に説明します。(((range="endofrange", startref="ix_ch05-asciidoc1"))) 

[[tx_structure]]
=== トランザクションの構造

((("transactions","structure of")))トランザクションは、資金源( _インプット_ と呼ばれる)から送り先( _アウトプット_ と呼ばれる)への価値の転送を記号化した ((("data structure"))) _デー>タ構造_ です。トランザクションのインプットやアウトプットは、アカウントやIDなど、個人を特定できる情報と結びついているわけではありません。代わりに、これらを所有者だけがもっている秘密>鍵でロックされているbitcoinの固まりとして考えるべきです。トランザクションは<<tx_data_structure>>に示すようないくつかのフィールドを含んでいます。

[[tx_data_structure]]
.トランザクションの構造
[options="header"]
|=======
|サイズ| フィールド名 | 説明
| 4 bytes | Version | このトランザクションがどのルールに従っているかを指定
| 1–9 bytes (VarInt) | Input Counter | いくつのインプットが含まれているか
| Variable | Inputs | １つまたは複数のトランザクションインプット
| 1–9 bytes (VarInt) | Output Counter | いくつのアウトプットが含まれているか
| Variable | Outputs | １つまたは複数のトランザクションアウトプット
| 4 bytes | Locktime | Unixタイムスタンプ、またはブロック高
|=======

.トランザクションLocktime
****
((("locktime")))((("transactions","locktime")))locktimeはトランザクションが検証されたり、Bitcoinネットワーク内でリレーされたり、またブロックチェーンに追加されたりした最も早い時刻です。これは、参照実装であるBitcoin Coreの中でnLockTimeとしても知られていたものです。ほとんどのトランザクションではすぐに伝搬されたことを表すためにlocktimeが0に設定されます。もしlocktimeが0でないかまたは５億より下になっているときはlocktimeをブロック高として解釈し、このブロック高より前のブロックではこのトランザクションがブロックチェーンに取り込まれていないということを意味します。もし５億よりも大きいときはlocktimeをUNIX Epochタイムスタンプ(1970/1/1からの秒数)として解釈し、この時刻よりも前にこのトランザクションが有効ではなかったということを意味します。locktimeが将来のブロックまたは時刻になっている場合は発行システムによってトランザクションが保持されていなければならず、トランザクションが有効になってからのみBitcoinネットワークに送信されなければいけません。locktimeは先日付小切手の日付のようなものです。
****

[[tx_inputs_outputs]]
=== トランザクションアウトプットとインプット

((("transactions","unspent transaction output (UTXO)")))((("unspent transaction output (UTXO)")))Bitcoinトランザクションの基本的な構成要素は、 _未使用トランザクションアウトプット_ または UTXO(unspent transaction output)です。UTXOは、特定の所有者にロックされた分割不可能なbitcoinの固まりで、ブロックチェーンに記録されており、Bitcoinネットワーク全体によって通貨の単位として捉えられているものです。Bitcoinネットワークは全ての利用可能(未使用)なUTXOを追跡しており、現在数百万に達するほどの量があります。ユーザがbitcoinを受け取るときはいつでも、UTXOとしてブロックチェーンに記録されます。このため、ユーザのbitcoinは数百個のトランザクションまたは数百個のブロックの中にUTXOとして散り散りな状態になってしまっているかもしれません。事実上、Bitcoinアドレスまたは口座の残高として記録されている訳ではないのです。あるのはただ散り散りになり特定の所有者に利用が制限されたUTXOだけです。ユーザのbitcoin残高という概念は、ウォレットによって作り上げられたものにすぎません。ウォレットはブロックチェーンをスキャンしてユーザに属している全てのUTXOを掻き集め残高を計算しているのです。

[TIP]
====
((("accounts")))((("balances")))Bitcoinに口座も残高もありません。あるのは単にブロックチェーンの中に散らばった _未使用トランザクションアウトプット_ (UTXO)だけです。 
====

UTXOは ((("satoshis"))) satoshi を単位とした任意の値を持つことができます。ドルがセントというさらに下の２桁の十進数を持つように、bitcoinはsatoshiという８桁の十進数を持ちます。UTXOは任意の値ですが、一度作られるとコインのように２つに切ることができません。((("change, making"))) 別の言い方をすると、もし20bitcoinのUTXOを持っていて1bitcoinだけ使いたいとすると、トランザクションは20bitcoinのUTXOを消費しなければならないため２つのアウトプットを作らなければいけません。１つは支払った1bitcoin、もう１つはあなたのウォレットに戻ってくるおつりの19bitcoinです。結果として、ほぼ多くのBitcoinトランザクションはおつりを生成します。 

$1.50の飲み物を買う人を想像してみましょう。彼女の財布から$1.50になるコインと紙幣の組み合わせを探しだします。もし財布にあるならおつりのいらないちょうどの金額(1ドル札と2つの25セントコイン、または6つの25セントコイン)、無理であれば５ドル札のような大きな単位の紙幣を選びます。もし多くのお金を持っているとすると、$5をショップオーナーに支払い$3.50のおつりを期待します。彼女はこの$3.50を財布に戻し、将来の買い物のときに使うことができます。

同様に、Bitcoinトランザクションはユーザが使用可能なUTXOから作られます。ユーザはUTXOを半分に割ることはできません。ウォレットは通常ユーザの利用可能なUTXOを選び、トランザクションに必要な金額以上になるように組み合わせます。 

実用上は、Bitcoinアプリケーションは購入額を満たすためにいくつかのやり方を使うことができます。いくつかのより小さい単位の額を組み合わせる、おつりがないようなきっちりした金額を選ぶ、またはトランザクションに必要な金額より大きい額を使っておつりを作るなどです。このやり方はウォレットのほうで自動的に実行され、ユーザには見えないようになっています。関係してくるとしたら、生トランザクションをUTXOからプログラムを通して手で構成する場合だけです。 

トランザクションによって消費されたUTXOはトランザクションインプットと呼ばれ、トランザクションによって作られたUTXOをトランザクションアウトプットと呼びます。UTXOを消費したまたは作成したトランザクションの中で、bitcoinの固まりはある所有者からある所有者に移っていきます。トランザクションは現在の所有者の署名を使って解錠されることでUTXOを消費します。 

インプットとアウトプットの連鎖の例外は、 _coinbase_ トランザクションと呼ばれる特殊なトランザクションです。これは、それぞれのブロックの一番最初のトランザクションです。このトランザクションは採掘に"勝った"マイナーによってブロックの一番最初に置かれ、マイニングに対する報酬としてマイナーにbitcoinが支払われるトランザクションとなります。<<ch8>>で説明するように、このようにしてマイニングプロセスを通してBitcoinのお金が供給されていきます。

[TIP]
====
最初に何が来るでしょうか？インプットそれともアウトプット、鶏それとも卵？厳密に言って、アウトプットが最初に来ます。なぜなら、新しいbitcoinを生成するcoinbaseトランザクションはインプットを持っておらず、何もないところからアウトプットを作るからです。 
====

[[tx_outs]]
==== トランザクションアウトプット

((("bitcoin ledger, outputs in", id="ix_ch05-asciidoc2", range="startofrange")))((("transactions","outputs", id="ix_ch05-asciidoc3", range="startofrange")))((("unspent transaction output (UTXO)", id="ix_ch05-asciidoc4", range="startofrange")))全てのBitcoinトランザクションはアウトプットを作ります。このアウトプットはBitcoin元帳上に記録され、ほとんど全てのアウトプット(１つの例外を除いて。<<op_return>>参照)は、 _未使用トランザクションアウトプット_ またはUTXOと呼ばれる使用可能なbitcoinの固まりを作ります。UTXOはBitcoinネットワーク全体によって認識されており、所有者が将来の取引でこれを使うことができます。誰かにbitcoinを送ることは、送り先のBitcoinアドレスと紐づけられた未使用トランザクションアウトプット(UTXO)を作り出すことです。このUTXOは受信者が使うことが可能なトランザクションアウトプットです。

UTXOは全てのfull-node Bitcoinクライアントによって追跡され、((("UTXO pool")))((("UTXO set"))) _UTXOセット_ または _UTXOプール_ と呼ばれるメモリに持っているデータベースで管理されています。そして、新しいトランザクションはUTXOセットにある１つまたは複数のアウトプットを消費(使用)することになります。 

トランザクションアウトプットは以下２つの部分で成り立っています。 

* bitcoinの最小単位である _satoshi_ 単位で表されたbitcoin金額
* アウトプットと使用するにあたって満たさなければいけない条件である"解除条件"として知られている ((("encumbrance")))((("locking scripts"))) _locking script_

locing scriptの中で使われているトランザクションスクリプト言語の詳細については<<tx_script>>で説明します。<<tx_out_structure>>はトランザクションアウトプットの構造を示しています。

[[tx_out_structure]]
.トランザクションアウトプットの構造
[options="header"]
|=======
|サイズ| フィールド名 | 説明
| 8 bytes | Amount | satoshi単位(10^-8^ bitcoin)のbitcoin額
| 1-9 bytes (VarInt) | Locking-Script Size | 次に続くlocking scriptのバイト長
| Variable | Locking-Script | アウトプットを使用するために必要な条件を定義したscript
|=======

<<get_utxo>>でblockchain.info APIを使って特定のBitcoinアドレスの未使用アウトプット(UTXO)を調べています。

[[get_utxo]]
.あるBitcoinアドレスに関連したUTXOを見つけ出す blockchain.info APIを呼び出すスクリプト
====
[source, python]
----
include::code/get-utxo.py[]
----
====

このスクリプトを実行すると、"トランザクションID":"特定の未使用トランザクションアウトプット(UTXO)のインデックス" - "UTXOの satoshi 単位での金額" という形のリストが表示されます。<<get_utxo_run>>のアウトプットにlocking scriptは表示されていません。

[[get_utxo_run]]
.get-utxo.py スクリプトの実行
====
[source,bash]
----
$ python get-utxo.py 
ebadfaa92f1fd29e2fe296eda702c48bd11ffd52313e986e99ddad9084062167:1 - 8000000 Satoshis
6596fd070679de96e405d52b51b8e1d644029108ec4cbfe451454486796a1ecf:0 - 16050000 Satoshis
74d788804e2aae10891d72753d1520da1206e6f4f20481cc1555b7f2cb44aca0:0 - 5000000 Satoshis
b2affea89ff82557c60d635a2a3137b8f88f12ecec85082f7d0a1f82ee203ac4:0 - 10000000 Satoshis
...
----
====

===== 使用条件(解除条件)

((("encumbrance")))((("locking scripts")))トランザクションアウトプットはbitcoin(satoshi単位で表された)を、特定の _解除条件_ またはbitcoinを使うにあたって満たさなければいけない条件を定義したlocking scriptと関連づけています。多くの場合、locking scriptは特定のBitcoinアドレスにアウトプットをロックし、これにより所有権が新しい所有者に移ります。アリスがボブのカフェにコーヒー代を支払ったとき、彼女のトランザクションにはカフェのBitcoinアドレスにロックされた0.015bitcoinアウトプットが含まれていました。この0.015bitcoinアウトプットはブロックチェーンに記録され、カフェのBitcoinアドレスに紐づいた未使用トランザクションアウトプットセットの一部になったのです。ボブがこの0.015bitcoinアウトプットを支払いに使うことにしたときに、彼のトランザクションはボブの秘密鍵による署名を含むunlocking scriptを提示することでこの0.015bitcoinアウトプットのロックを外すのです。(((range="endofrange", startref="ix_ch05-asciidoc4")))(((range="endofrange", startref="ix_ch05-asciidoc3")))(((range="endofrange", startref="ix_ch05-asciidoc2"))) 

[[tx_inputs]]
==== トランザクションインプット

((("transactions","inputs", id="ix_ch05-asciidoc5", range="startofrange")))簡単に言って、トランザクションインプットはUTXOへのポインタです。トランザクションインプットは、トランザクションハッシュとUTXOが記録されているブロックチェーン内の場所を示すシーケンス番号を使って特定のUTXOを指定します。UTXOを使うために、トランザクションインプットはunlocking scriptというUTXOのロックを解除するscriptも持っています。unlocking scriptは通常locking scriptの中にあるBitcoinアドレスの所有権を証明している署名です。 

ユーザが支払いをするとき、ウォレットは使用可能なUTXOを選びトランザクションを構成します。例えば、0.015bitcoinの支払いをするのであれば、ウォレットは0.01bitcoinのUTXOと0.005bitcoinのUTXOを選び支払いに必要な金額になるようにするかもしれません。 

<<select_utxo>>では"貪欲(greedy)"アルゴリズムを使うことである金額を満たすように使用可能なUTXOを選ぶ例を示しています。この例では、使用可能なUTXOをあらかじめ決められた配列で与えています。しかし、現実では、使用可能なUTXOはBitcoin CoreのRPC APIを使って集めてくるか、または<<get_utxo>>にあるようなサードパーティAPIを使って集めてきます。 

[[select_utxo]]
.支払いに総額いくらのbitcoinが必要となるかを計算するためのスクリプト
====
[source, python]
----
include::code/select-utxo.py[]
----
====

もし _select-utxo.py_ スクリプトをパラメータなしで実行すると、55,000,000satoshi(0.55bitcoin)の支払いに対してUTXOの組み合わせ(とおつりも)を構成しようとします。パラメータとして支払額を指定すると、スクリプトは指定した支払額を満たすようにUTXOを選びます。<<select_utxo_run>>では、0.5bitcoinまたは50,000,000satoshiの支払い額を指定してスクリプトを実行しています。

[[select_utxo_run]]
.select-utxo.py スクリプトの実行
====
----
$ python select-utxo.py 50000000
For transaction amount 50000000 Satoshis (0.500000 bitcoin) use: 
([<7dbc497969c7475e45d952c4a872e213fb15d45e5cd3473c386a71a1b0c136a1:0 with 25000000 Satoshis>, <7f42eda67921ee92eae5f79bd37c68c9cb859b899ce70dba68c48338857b7818:0 with 16100000 Satoshis>, <6596fd070679de96e405d52b51b8e1d644029108ec4cbfe451454486796a1ecf:0 with 16050000 Satoshis>], 'Change: 7150000 Satoshis')
----
====

一度UTXOが選ばれると、ウォレットはそれぞれのUTXOに対して署名を含んでいるunlocking scriptを作ります。このunlocking scriptによってlocking scriptの条件を満たすためUTXOが使用可能になります。ウォレットはこれらのUTXOへの参照とunlocking scriptをインプットとしてトランザクションに追加します。<<tx_in_structure>>はトランザクションインプットの構造を示しています。 

[[tx_in_structure]]
.トランザクションインプットの構造
[options="header"]
|=======
|サイズ| フィールド名 | 説明
| 32 bytes | Transaction Hash | 使われるUTXOを含むトランザクションハッシュ
| 4 bytes | Output Index | 使われるUTXOのトランザクション内インデックス、一番最初のアウトプットの場合は0
| 1-9 bytes (VarInt) | Unlocking-Script Size | unlocking-scriptのバイト長
| Variable | Unlocking-Script | UTXOのlocking scriptを満たすscript
| 4 bytes | Sequence Number | Currently disabled Tx-replacement feature, set to 0xFFFFFFFF
|=======

[NOTE]
====
The sequence number is used to override a transaction prior to the expiration of the transaction locktime, which is a feature that is currently disabled in bitcoin. Most transactions set this value to the maximum integer value (0xFFFFFFFF) and it is ignored by the bitcoin network. If the transaction has a nonzero locktime, at least one of its inputs must have a sequence number below 0xFFFFFFFF in order to enable locktime.(((range="endofrange", startref="ix_ch05-asciidoc5")))
====

[[tx_fees]]
==== トランザクション手数料

((("fees, transaction", id="ix_ch05-asciidoc6", range="startofrange")))ほとんどのトランザクションはトランザクション手数料を含んでいて、この手数料はBitcoinマイナーに与えられます。マイニングと手数料、マイナーによって集められた報酬についての詳細は<<ch8>>で説明することにします。この節では、どのようにしてトランザクション手数料がトランザクションに含められるかを説明します。ほとんどのウォレットはトランザクション手数料を自動的に計算しトランザクションに含めます。しかし、もしトランザクションをプログラムを通して構築する、またはコマンドラインを使って構築する場合は、手動でこれらの手数料をトランザクションに含めなければいけません。 
    
トランザクション手数料はトランザクションを次にブロックに含める(採掘する)ことのインセンティブとして働き、また少額でも手数料をトランザクションに入れなければいけないため"スパム"トランザクションやBitcoinシステムを悪用することに対する逆のインセンティブとして働きます。トランザクション手数料はブロックチェーン上にトランザクションを記録しているブロックを採掘したマイナーによって集められます。 

((("fees, transaction","calculating")))トランザクション手数料はトランザクションのデータサイズ(KB)に基づいて計算され、いくらの支払いをしたかによって手数料は決まりません。トランザクション手数料はBitcoinネットワーク内での市場原理に基づいて決められます。マイナーごとにどのトランザクションを優先的に選ぶかの判断条件は違っており、この判断条件には手数料の大きさも含まれます。手数料が含まれていないトランザクションも状況によってはマイナーに選ばれるかもしれません。しかし、トランザクション手数料はマイナーによって処理される優先順位に影響し、十分な手数料をもっているトランザクションが次の頻繁にマイニングされているブロックに含まれる可能性が高くなり、一方十分な手数料を持っていないかまたは手数料がないトランザクションはブロックに取り込まれることが遅れてしまうか、もしく数ブロック後に取り込まれる、またはそもそも処理されないということになるかもしれません。トランザクション手数料は必須ではなく、ときどき手数料がないトランザクションもマイナーに処理されますが、トランザクション手数料を含めることは処理の優先順位をあげることに繋がるのです。 

時間とともに、トランザクション手数料の計算方法やトランザクションの優先順位付け方法が発展してきました。最初、トランザクション手数料は固定されており、Bitcoinネットワーク全体で一定でした。次第に手数料は緩和され、Bitcoinネットワークのキャパシティやトランザクション量に基づく市場の力関係にトランザクション手数料が影響されるようになってきました。現在の最小トランザクション手数料はトランザクションのデータサイズ1KBあたり0.0001bitcoin、10ミリbitcoinに固定されており、最近1ミリbitcoinに減らされました。多くのトランザクションは1KBより小さいですが、いくつかのインプットまたはアウトプットを持っているとより大きな手数料になります。Bitocinプロトコルの将来の改定で、ウォレットが最近のトランザクションの手数料平均値に基づき統計的に最適な手数料を決定できるようになると予想されています。 

マイナーがトランザクションの優先順位付けをする際に使っている現在のアルゴリズムについては<<ch8>>で詳細に説明します。(((range="endofrange", startref="ix_ch05-asciidoc6")))
    
==== 手数料のトランザクションへの追加

((("fees, transaction","adding", id="ix_ch05-asciidoc7", range="startofrange")))((("transactions","fees", id="ix_ch05-asciidoc8", range="startofrange")))トランザクションのデータ構造には手数料に対するフィールドはありません。代わりに、手数料はインプットの総和とアウトプットの総和との差として暗に含められる形になっています。全てのインプットの総和から全てのアウトプットの総和を引いて残った余分な額がマイナーによって集められる手数料です。 


[[tx_fee_equation]]
.トランザクション手数料はインプットとアウトプットの差として暗に含められています。
----
Fees = Sum(Inputs) – Sum(Outputs)
----

これは、幾分トランザクションを理解する上で混乱してしまうところですが重要なポイントです。というのは、もし自身でトランザクションを構築するとしたときに、うっかり大きな額の手数料を含めないようにしないといけないためです。もし必要ならおつりを作成することによって全てのインプットを把握しておかなければいけません。さもなければ、マイナーにとても大きなチップをあげることになってしまうのです！

例えば、20bitcoinのUTXOを消費して1bitcoinの支払いをしようとするなら、19bitcoinのおつりがアウトプットに含まれていなければいけません。そうしないと、19bitcoinの"残り物"はトランザクション手数料としてカウントされてしまい、あなたのトランザクションを含むブロックを採掘したマイナーによって19bitcoinが集められてしまうのです。 

[WARNING]
====
手動でトランザクションを構築したときにもしおつりのアウトプットを追加し忘れてしまうと、おつり分をトランザクション手数料として払ってしまうことになります。"おつりを守りなさい！"というのは、通常の支払いの感覚からすると不思議に感じるかもしれません。
====

再度アリスのコーヒー代支払いの例を使って実用上どのように動作するかを見ていきましょう。アリスは0.015bitcoinをコーヒー代として支払おうとしています。分かりやすくするために彼女は0.001bitcoinをトランザクション手数料として含めようとしているとしてみましょう。これはトランザクションの総コストが0.016bitcoinになることを意味しています。よって、彼女のウォレットは0.016bitcoinかまたはそれより多い額になるようにUTXOを集め、必要ならおつりを作らなければいけません。彼女のウォレットが0.2bitcoinのUTXOが使用可能だとしてみると、このUTXOを消費することになります。アウトプットとしては、ボブのカフェ店への支払いとして0.015bitcoinのアウトプットを作り、そして２つ目のアウトプットとして自分自身のウォレットに返ってくる0.184bitcoinのおつりのアウトプットを作ります。0.001bitcoinが残っていますが、これが暗にトランザクションに含められているトランザクション手数料になります。 

違ったシナリオを考えてみましょう。フィリピンの子供チャリティーディレクターのEugeniaは子供のために学校の教科書を購入するための支援金集めが完了し、全世界の人々からいただいた数千個の小さな寄付を受け取りました。総額にして50bitcoinです。このため、彼女のウォレットは小さな支払い(UTXO)でいっぱいになってしまいました。彼女は数百冊の学校の教科書を地元の出版社から購入したいと考えていて、支払いをbitcoinでするつもりでいます。 

Eugeniaのウォレットは１個の大きなトランザクションを作ろうとしたため、多くの小さな額のUTXOで占められている使用可能なUTXOセットからUTXOを集めてこなければいけません。結果として作られるトランザクションはインプットとして数百個の小さな額のUTXOと出版社に支払われるたった１個のアウトプットで構成されることになります。多くのインプットを伴ったトランザクションのデータサイズは1KBよりも大きく、おそらく2、3KBです。結果的に、最小手数料0.0001bitcoinよりも高いトランザクション手数料が必要になります。 

Eugeniaのウォレットはトランザクションのデータサイズと1KBあたりの手数料を掛け合わせて適切な手数料を計算することになります。多くのウォレットは大きなトランザクションに対して手数料を多めに払っています。これは、トランザクションを迅速に処理してもらうためです。高い手数料を払うのはEugeniaが多くのお金を使っているからではなく、トランザクションがより複雑でよりデータサイズが大きいからです。トランザクション手数料の額はトランザクションのbitcoin額とは無関係なのです。(((range="endofrange", startref="ix_ch05-asciidoc8")))(((range="endofrange", startref="ix_ch05-asciidoc7"))) 

[[tx_chains]]
=== トランザクション連鎖とOrphanトランザクション

((("chaining transactions")))((("orphan transactions")))((("transactions","chaining")))((("transactions","orphan")))今まで見てきたように、トランザクションは連鎖を形成します。この連鎖というのは、１つのトランザクションは前のトランザクションアウトプット(親と呼ばれる)を使い、また次のトランザクションのためにアウトプット(子と呼ばれる)を作る、という連鎖です。ときどきトランザクションの連鎖全体(親トランザクション、子トランザクション、孫トランザクション)が一度に作られることがあります。これは、親トランザクションが署名される前に署名された子トランザクションが必要な場合です。例えば、これは ((("CoinJoin"))) CoinJoin トランザクションの場合のテクニックに使われます。CoinJoinトランザクションは、複数の人のトランザクションを別のトランザクションに加えて混ぜることでプライバシーを守るために使われます。 

トランザクションの連鎖はBitcoinネットワークを通して放出されたとき、順番通りにノードに届くわけではなく、もしかすると親よりも先に子が届いてしまうかもしれません。この場合、子を最初に見つけたノードは、この子が参照している親トランザクションのことはまだ知りません。子供を拒否するよりもむしろ、一時的なプールに子を置いておき、親が届くことを待ちます。親がいないトランザクションのプールを ((("orphan transaction pool"))) _orphanトランザクションプール_ と呼びます。一度親が届くと、親のUTXOを参照しているorphanは全てプールから取り出され、再帰的に再確認されます。このとき、トランザクションの連鎖全体がorphanトランザクションプールからトランザクションプールに取り込まれ、ブロックに取り込まれる準備が整います。トランザクションの連鎖は多くの世代が伴なったとしてもどれだけでも長くでき、同時に送信できます。orphanプールにorphanトランザクションを保持しておく方法を使うことで、親の到着が遅れたとしても子を放棄することなく、かつ正しい順番でトランザクションの連鎖を構築できるのです。 

メモリに保持できるorphanトランザクションの数には制限があります。これは、BitcoinノードからのDOS攻撃を防ぐためです。制限数は、 ((("MAX_ORPHAN_TRANSACTIONS constant"))) +MAX_ORPHAN_TRANSACTIONS+ というBitcoin参照クライアントのソースコード内にあるパラメータで定義されています。もしプールにあるorphanトランザクションの数が +MAX_ORPHAN_TRANSACTIONS+ を越えると、ランダムに選ばれたいくつかのorphanトランザクションがプールから追い出され、プールにあるorphanトランザクション数が制限以内になるように調整されます。 

[[tx_script]]
=== トランザクションスクリプトとスクリプト言語

((("scripts", id="ix_ch05-asciidoc9", range="startofrange")))((("transactions","script language for", id="ix_ch05-asciidoc10", range="startofrange")))((("transactions","validation", id="ix_ch05-asciidoc11", range="startofrange")))((("validation (transaction)", id="ix_ch05-asciidoc12", range="startofrange")))Bitcoinクライアントはscriptを実行することでトランザクションの有効性をチェックします。UTXOにあるlocking script(解除条件)と通常署名を含んでいるunlocking scriptはこのscript言語で書かれています。トランザクションが有効かチェックされるときは、資金の使用条件を満たしているかどうかをみるためにそれぞれのインプットにあるunlocking scriptが対応したlocking scriptとともに実行されます。 

今日、Bitcoinネットワークを通して処理される多くのトランザクションは"アリスがボブに支払う"というような形式になっており、Pay-to-Public-Key-Hash scriptと呼ばれるscriptに基づいています。しかし、アウトプットをロックしインプットを解錠するscriptを使うことは、プログラミング言語を通してトランザクションに無限個の条件を含められることを意味します。"アリスがボブに支払う"という形式に対してBitcoinトランザクションは何の制約も受けていないのです。  

これは単にこのスクリプト言語によって表現できる可能性の氷山の一角を見せているに過ぎません。この節では、Bitcoinトランザクションのスクリプト言語の要素を説明し、どのように資金の使用に対する完全な条件を表現するのか、どのようにunlocking scriptは条件を満たすことができるのかを説明していきます。 

[TIP]
====
Bitcoinトランザクションの有効性チェックは静的なパターンに基づいているわけではなく、script言語の実行を通して行われています。この言語はほとんど無限個の条件を表現することができます。このようにしてBitcoinは"プログラム可能な通貨"を実現しているのです。
====

==== スクリプトの構築(Lock + Unlock)

((("scripts","construction of")))((("validation (transaction)","script construction for")))Bitcoinのトランザクション有効性チェックエンジンは二種類のスクリプトによって成り立っていま>す。１つはlocking script、もう１つはunlocking scriptです。 

((("locking scripts","transaction validation and")))((("validation (transaction)","locking scripts")))locking scriptはアウトプットに置かれている解除条件で、将来アウトプットを使用する際に満たさなければいけない条件を指定しています。歴史的に、locking scriptは _scriptPubKey_ と呼ばれていました。というのは、locking scriptに通常公開鍵またはBitcoinアドレスが含まれているからです。この本では、スクリプトテクノロジーの可能性をより多く得るためにそれを"locking script"と呼ぶことにします。多くのBitcoinアプリケーションでは、locking scriptと呼んだものが +scriptPubKey+ としてソースコードに出てきます。 

((("unlocking scripts","transaction validation and")))unlocking scriptは、locking scriptによってアウトプットに置かれた条件を"解く"または満たすスクリプトで、アウトプットを使用できるようにします。unlocking scriptは全てのトランザクションインプットの一部であり、ほとんどの場合秘密鍵からウォレットが作り出したデジタル署名を含んでいます。歴史的に、unlocking scriptが通常デジタル署名を含んでいるためunlocking scriptは _scriptSig_ と呼ばれています。多くのBitcoinアプリケーションのソースコードの中では、unlocking scriptを +scriptSig+ と呼んでいます。この本では、これを"unlocking script"と呼ぶことにしています。というのは、全てのunlocking scriptが署名を含んでいなければいけないわけではなく、locking scriptの解除をするために必要なものは署名以外にもあるということに気づいてもらうためです。

全てのBitcoinクライアントはlocking scriptとunlocking scriptを一緒に実行することでトランザクションが有効であることをチェックします。トランザクションにあるそれぞれのインプットに対して、有効性チェックソフトウェアは最初にインプットによって参照されているUTXOを取得しようとします。このUTXOは、UTXOを使うときに必要な条件が定義してあるlocking scriptを含んでいます。有効性チェックソフトウェアはこのときこのUTXOの資金を使おうとしているインプットに含まれているunlocking scriptを取り出し、locking scriptとunlocking scriptを実行します。 

オリジナルのBitcoinクライアントでは、unlocking scriptとlocking scriptは結合されており順番に実行されていました。セキュリティの観点からこれは2010年に変更されました。悪意あるunlocking scriptがスタックにデータをプッシュし、locking scriptを意味がないものにしてしまうという弱点が生じてしまうためです。現在の実装では、次に説明するようにスクリプトはunlocking scriptとlocking scriptの間で転送されるスタックと別々に実行されるようになっています。

最初に、スタック実行エンジンを使ってunlocking scriptが実行されます。もしunlocking scriptがエラーなく(例えば、"まだ実行されていない"オペレータが何も残っていないなど)実行されると、メインスタック(代替スタックではなく)がコピーされlocking scriptが実行されます。もしunlocking scriptからコピーされたスタックデータとともに実行されたlocking scriptの結果が"真"なら、unlocking scriptはlocking scriptによって課されていた条件を解くことに成功したということです。よって、インプットはUTXOを使用する有効な権限を持っているということになります。もし"真"以外が実行結果に残ってしまっているのであれば、インプットは有効ではありません。UTXOに置いてある使用条件を満たすことができなかったからです。重要なこととして、UTXOはブロックチェーンに永遠に記録され続けるため成功しなかった場合UTXOであるという状態は変化せず、何度新しいトランザクションがUTXOを不正に使用しようとしてもUTXOは全く影響を受けません。UTXOの条件を正しく満たす有効なトランザクションだけがUTXOに"使用済み"という印をつけ、使用可能な(未使用)UTXOのセットから削除させることができるのです。

<<scriptSig_and_scriptPubKey>>はunlocking scriptとlocking scriptのよくある例(公開鍵ハッシュへの支払い)です。これは、スクリプトの有効性チェックの前のunlocking scriptとlocking scriptが連結されたスクリプトを示しています。 

[[scriptSig_and_scriptPubKey]]
.トランザクションscriptを評価するためのscriptSigとscriptPubKeyの結合
image::images/msbt_0501.png["scriptSig_and_scriptPubKey"]


[[tx_script_language]]
==== スクリプト言語

((("Script language", id="ix_ch05-asciidoc13", range="startofrange")))((("scripts","language for", id="ix_ch05-asciidoc14", range="startofrange"))) _Script_ と呼ばれているBitcoinトランザクションスクリプト言語は、Forth言語のような逆ポーランド記法の言語です。もしちんぷんかんぷんに聞こえるとしたら、あなたはおそらく1960年代のプログラミング言語を勉強したことがないのでしょう。スクリプトはとてもシンプルな言語で、限られたハードウェアで動くように設計された言語です。おそらく電卓のような組み込みデバイスくらい簡単なハードウェアです。これは最小の処理のみを必要とし、最近のプログラミング言語でできるようなことの多くはできません。 

Bitcoinのスクリプト言語はスタックベース言語と呼ばれています。というのは、 _スタック_ と呼ばれるデータ構造を使っているからです。スタックとはとても簡単なデータ構造で、イメージ的にはカードを重ねたもののようなものです。スタックは２つの操作を許しています。pushとpopです。pushはアイテムをスタックの一番上に加えます。popは一番上にあるアイテムをスタックから除きます。 

スクリプト言語はそれぞれのアイテムを左から右に処理することでスクリプトを実行していきます。数値(定数)がスタックにpushされます。オペレーターは１つまたは複数の値をスタックに対してpush>、popし、またはそれらに対して何らかの操作をします。場合によっては操作した結果をスタックにpushするかもしれません。例えば、 +OP_ADD+ はスタックから２つのアイテムをpopして、２つのアイ>テムを加え合わせ結果をスタックにpushします。 

条件オペレーターは条件を評価して、TRUEかFALSEというブール型の結果を作り出します。例えば、 +OP_EQUAL+ はスタックから２つのアイテムをpopして、もしそれらが等しいならTRUE(TRUEは数値の1によって表現されます)をpushし、等しくなければFALSE(数値の0で表します)をpushします。Bitcoinトランザクションスクリプトは通常有効なトランザクションを示すTRUEの結果を生成するために条件オペレーターを含んでいます。 

<<simplemath_script>>図では +2 3 OP_ADD 5 OP_EQUAL+ というスクリプトで、加法オペレーター +OP_ADD+ を実行し２つの数値を加え結果をスタックに置き、次に +OP_ADD+ の結果と +5+ が等しいかをチェックする条件オペレーター +OP_EQUAL+ を実行しています。簡潔に言えば、 +OP_+ という接頭詞は <<simplemath_script>> で省略されています。 


以下はちょっとだけ複雑なスクリプトで、 ++2 + 7 – 3 + 1++ を計算しています。スクリプトがいくつかのオペレーターを含んでいるとき、スタックの性質上１つのオペレーターの結果を次のオペレーターだけが使うことができます。

----
2 7 OP_ADD 3 OP_SUB 1 OP_ADD 7 OP_EQUAL
----
鉛筆と紙を使ってこのスクリプトが有効かあなた自身でやってみましょう。スクリプトの実行が終わった段階で、スタックにTRUEが残っているはずです。

ほとんどのlocking scriptは資金の使用にあたっての所有権の証明のためBitcoinアドレスや公開鍵を参照していますが、locking scriptは複雑である必要はありません。結果としてTRUEが出力されるlocking scriptとunlocking scriptのどんな組み合わせも有効とみなされます。スクリプト言語の例として使った簡単な算数も、トランザクションアウトプットをロックするために使うことができるきちんとしたlocking scriptです。

locking scriptとしてさきほどの算数のスクリプト例の一部を使ってみましょう。

----
3 OP_ADD 5 OP_EQUAL
----

これは以下のunlocking scriptを持つインプットがトランザクションにあれば満たすことができます。
----
2
----

有効性を確認するソフトウェアはlocking scriptとunlocking scriptをくっつけて以下のスクリプトを作ります。
----
2 3 OP_ADD 5 OP_EQUAL
----

<<simplemath_script>>図で見たように、このスクリプトが実行されるとこの結果は +OP_TRUE+ になりトランザクションは有効であると分かります。この場合、有効なトランザクションアウトプットのlocking scriptだけでなく、算数の計算ができる人であれば誰でも2がこのスクリプトを満たすことがわかるので誰でもUTXOを使うことができることになります。

[[simplemath_script]]
.Bitcoinのscript検証を使って簡単な算数をやってみる。
image::images/msbt_0502.png["TxScriptSimpleMathExample"]


[TIP]
====
もしスタックの一番上に真( ++&#x7b;0x01&#x7d;++ のように表現されます)、または真ではないが０以外の値があればトランザクションは有効と検証されたことになります。または、script実行後にスタックに空値ではなく何も残っていなかった場合もトランザクションは有効と検証されたことになります。トランザクションが無効になってしまう場合は、スタックの一番上に偽(a zero-length empty value,  ++&#x7b;&#x7d;++ のように表現される長さ０の空値)がある場合や、OP_VERIFYやOP_RETURNまたはOP_ENDIFのような条件付き終了オペレータなどによって明示的にscript実行が終了させられる場合です。詳細については <<tx_script_ops>> を参照してください。
====


==== チューリング不完全

((("Script language","flow-control/loops in")))((("Script language","statelessness of")))((("Turing Complete")))Bitcoinトランザクションスクリプト言語は多くのオペレーターを持っています。しかし、意図的にループやif文などの分岐処理がないように制限されています。これは言語が _チューリング完全_ ではないということを言っており、このようになっているのはスクリプトの簡潔さや実行時間を予測できるようにすることがあります。スクリプト言語は汎用言語ではないのです。これらの制限によって、無限ループを作ることやBitcoinネットワークを使ったDOS攻撃を起こすようなトランザクションに内在する"論理爆弾(logic bomb)"などを作ることができなくなっています。思い出してみてください、全てのトランザクションはBitcoinネットワーク上の全てのfull nodeによって有効性を確認されているので、トランザクションの有効性確認処理に問題があれば簡単に脆弱性が作れてしまいます。言語が制限されているためにトランザクションの有効性確認メカニズムが脆弱性を生むことを防いでいるのです。 

==== ステートレスな検証

((("stateless verification of transactions")))((("transactions","statelessness of")))Bitcoinトランザクションスクリプト言語はステートレスです。これは、スクリプトの実行前の状態を何も保持しない、またはスクリプトの実行後の状態を一切保存しないということです。このため、スクリプトを実行するために必要な全ての情報はスクリプトの中に含まれていることになり、スクリプトはどんなシステム上でも同じプロセスで実行できることが予測できるということになります。もしあなたのシステムがスクリプトを検証できるなら、確実にBitcoinネットワーク内の他全てのシステムもまたスクリプトを検証でき、有効なトランザクションは全ての人に対して有効なのです。この結果の予測可能性はBitcoinシステムの本質的な利点です。(((range="endofrange", startref="ix_ch05-asciidoc12")))(((range="endofrange", startref="ix_ch05-asciidoc11")))(((range="endofrange", startref="ix_ch05-asciidoc10")))(((range="endofrange", startref="ix_ch05-asciidoc9")))

[[std_tx]]
=== 標準的なトランザクション

Bitcoinの発展の最初の数年は、開発者たちがBitcoin参照クライアントによって処理されるスクリプトの種類にいくつかの制限を加えていました。これらの制限は +isStandard()+ と呼ばれる関数の中にあり、５つの"標準的なトランザクション"の種類が定義されています。これらの制限は一時的なもので、あなたがこれを読むときまでに解除されているかもしれません。これらの制限が解除されるまでは、５つの標準的なトランザクションスクリプトだけがBitcoin Coreクライアントやこれを動作させている多くのマイナーに受け入れられています。非標準的なトランザクションを作ることは可能ですが、このトランザクションをブロックに入れてくれるマイナーを見つけなければいけません。 

どんなスクリプトが有効なトランザクションスクリプトとして現在許可されているかを見るためにBitcoin Coreクライアント(参照実装)のソースコードをチェックしてみましょう。 

トランザクションスクリプトの５つの標準的な種類は、pay-to-public-key-hash (P2PKH), public-key, multi-signature (最大15個のキーまで), pay-to-script-hash (P2SH), data output (OP_RETURN) です。これらの詳細な説明は次の節で行います。

[[p2pkh]]
==== Pay-to-Public-Key-Hash (P2PKH)

((("pay-to-public-key-hash (P2PKH)", id="ix_ch05-asciidoc15", range="startofrange")))((("transactions","pay-to-public-key-hash", id="ix_ch05-asciidoc16", range="startofrange")))Bitcoinネットワーク上で処理されているトランザクションの多くはP2PKHトランザクションです。これはBitcoinアドレスとして知られている公開鍵ハッシュを伴ったトランザクションアウトプットを拘束しているlocking scriptを含んでいます。Bitcoinアドレスへの支払いをするトランザクションはP2PKHスクリプトを含んでおり、このP2PKHスクリプトでロックされているアウトプットは公開鍵とこの公開鍵に対応したデジタル署名を提示することで解除(資金の使用)ができます。 

例えば、アリスがボブのカフェに支払う場面を再度見てみましょう。アリスはこのカフェのBitcoinアドレスに0.015bitcoinの支払いをします。このトランザクションアウトプットは以下のようなlocking scriptが含まれています。

----
OP_DUP OP_HASH160 <Cafe Public Key Hash> OP_EQUAL OP_CHECKSIG
----

+Cafe Public Key Hash+ はこのカフェのBitcoinアドレス(Base58Checkエンコーディングが施されていないもの)と同じものです。多くのアプリケーションでは _公開鍵ハッシュ_ を１６進数で表したものを使っており、なじみのある"1"から始まるBase58Check形式のBitcoinアドレスではありません。 

このlocking scriptは以下のunlocking scriptで条件を満たすことができます。

----
<Cafe Signature> <Cafe Public Key>
----

この２つのスクリプトを合わせることで、以下の検証スクリプトの形になります。

----
<Cafe Signature> <Cafe Public Key> OP_DUP OP_HASH160 
<Cafe Public Key Hash> OP_EQUAL OP_CHECKSIG
----

これを実行するとき、unlocking scriptがlocking scriptの条件を満たしかつその場合に限り、この結合されたスクリプトはTRUEと評価されます。他の言い方をすると、もしunlocking scriptがボブのカフェの秘密鍵から作られた有効な署名を持っていれば結果はTRUEになります。 

図 pass:[<xref linkend="P2PubKHash1" xrefstyle="select: labelnumber"/>] と図 pass:[<xref linkend="P2PubKHash2" xrefstyle="select: labelnumber"/>] は結合されたスクリプトの逐次実行を(２つの部分で)表しており、この結合されたスクリプトが有効なトランザクションであることを証明することになります。

[[P2PubKHash1]]
.P2PKHトランザクションにおけるscriptの評価(1/2)
image::images/msbt_0503.png["Tx_Script_P2PubKeyHash_1"]


[[p2pk]]    
==== Pay-to-Public-Key

((("pay-to-public-key")))pay-to-public-keyはpay-to-public-key-hashよりもよりシンプルなBitcoin支払いの形式です。このスクリプト形式は、前に出てきたP2PKHでのとても短い公開鍵ハッシュではなく、公開鍵そのものをlocking scriptに配置しています。pay-to-public-key-hashはBitcoinアドレスをより短くし使いやすくするためにSatoshi Nakamotoによって発明されたものです。現在pay-to-public-keyはcoinbaseトランザクションでよく見られるもので、P2PKHが使用できるように更新されていない古いマイニングソフトウェアで使われています。 

pay-to-public-key locing scriptは以下のようなものです。

----
<Public Key A> OP_CHECKSIG
----

アウトプットを解除するために提示されなければならないunlocking scriptは以下のようなシンプルな署名です。

----
<Signature from Private Key A>
----

トランザクションの有効性検証に使われる結合されたスクリプトは以下です。

----
<Signature from Private Key A> <Public Key A> OP_CHECKSIG
----

このスクリプトは +CHECKSIG+ オペレーターを使ったシンプルなスクリプトで、正しい秘密鍵に紐づく署名を検証しています。

[[P2PubKHash2]]
.P2PKHトランザクションにおけるscriptの評価(2/2)
image::images/msbt_0504.png["Tx_Script_P2PubKeyHash_2"]

[[multisig]]
==== マルチシグネチャー

((("multi-signature scripts")))((("transactions","multi-signature scripts")))マルチシグネチャースクリプトはN個の公開鍵と、解除条件を解放する少なくともM個の署名が入っている条件を設定しています。これはM-of-Nスキーマとしても知られており、Nはキーの総数、Mは検証に必要な署名数です。例えば2-of-3マルチシグネチャーでは、あらかじめ登録しておいた署名者の３つの公開鍵があり、これらのうち２つを使って有効なトランザクションに対する署名を作らなければいけません。((("multi-signature scripts","limits on")))このとき、標準的なマルチシグネチャースクリプトは多くても１５個の公開鍵だけが使用できるように制限されており、これは1-of-1から15-of-15までのマルチシグネチャー、またはそれぞれの組み合わせを使用できるということを示しています。この制限はこの本が出版されるまでに引き上げられるかもしれません。Bitcoinネットワークによって現在何が許可されているかを見るために ((("isStandard() function"))) +isStandard()+ 関数をチェックしてみてください。 

M-of-Nマルチシグネチャー条件を設定しているlocking scriptの一般形式は以下です。

----
M <Public Key 1> <Public Key 2> ... <Public Key N> N OP_CHECKMULTISIG
----

ただし、Nは登録されている公開鍵の総数、Mはアウトプットを使うにあたって必要な署名数です。
 
2-of-3マルチシグネチャー条件を設定しているlocking scriptは以下のようなものです。

----
2 <Public Key A> <Public Key B> <Public Key C> 3 OP_CHECKMULTISIG
----

このlocking scriptは署名と公開鍵のペアを含む以下のunlocking scriptで条件を満たすことができます。

----
OP_0 <Signature B> <Signature C>
----
または、署名A・署名Cなどの登録されている３つの公開鍵に対応する秘密鍵から作られる２つの署名のどんな組み合わせも使うことができます。 

[NOTE]
==== 
((("CHECKMULTISIG implementation")))最初に置かれている +OP_0+ は +CHECKMULTISIG+ のオリジナルの実装にバグがありそれを補完するために必要となっています。このバグというのは、 +CHECKMULTISIG+ を実行した時に処理に関係のないスタック上のアイテムを余分に１つpopしてしまうというバグです。 +CHECKMULTISIG+ 処理は事実 +OP_0+ を無視して実行され、 +OP_0+ は単なる空箱のようなものになっています。
====

この２つのスクリプトは以下の結合された検証スクリプトを形作ります。

----
OP_0 <Signature B> <Signature C> 2 <Public Key A> <Public Key B> <Public Key C> 3 OP_CHECKMULTISIG
----

これを実行するとき、unlocking scriptがlocking scriptの条件を満たしかつその場合に限り、この結合されたスクリプトはTRUEと評価されます。この場合、unlocking scriptが解除条件に設定してある３つの公開鍵のうち２つに対応した秘密鍵から作られる有効な署名を持っているかどうかが条件になります。 

[[op_return]]
==== データアウトプット(OP_RETURN)

((("ledger, storing unrelated information in")))((("OP_RETURN operator")))((("transactions","storing unrelated information in")))Bitcoinの時刻が刻印された分散化元帳であるブロックチェーンは支払い以上のポテンシャルを持っています。多くの開発者たちは ((("digital notary services")))((("smart contracts")))((("stock certificates"))) デジタル公証人サービス、株券、スマートコントラクトのようなアプリケーションのためにトランザクションスクリプト言語を使うことでより進んだシステムの安全性や可用性を確保しようとしてきました。当初Bitcoinのスクリプト言語をこれらの目的に使っていく場合、ブロックチェーン上に記録されたデータであるトランザクションアウトプットを利用することが考えられました。これで行う例としては、ファイルの存在証明があります。このトランザクションが参照している特定の日付を利用して、あるファイルの存在証明(proof-of-existence)を誰でもできるようにすることでファイルのデジタルフィンガープリントを記録します。

((("blockchains","storing unrelated information in")))bitcoinの支払いと無関係なデータをブロックチェーン上に記録することは物議を引き起こしました。多くの開発者たちはこのようなブロックチェーンの使い方を汚いものと考え、思いとどまらせようと考えました。またある人たちはこれがブロックチェーンテクノロジーの強力な拡張性を示すものと感じ、このような実験を押し進めようとしました。支払いと関係のないデータを含めることに反対な人たちはこれにより"ブロックチェーンの肥大化"を引き起こすと考えており、ブロックチェーンが本来運ぶ必要のなかったデータのためにディスクストレージのコストが増大しfull nodeを動作させているサーバのコストが増えてしまうと考えました。さらに、このようなトランザクションは使用されないUTXOを作り出し、送り先Bitcoinアドレスの領域20byteを自由に使える領域として使ってしまいます。このBitcoinアドレスはデータのために使われるので、これは秘密鍵に対応しておらず _決して使われない_ UTXOを結果として生み出してしまうのです。これはあたかも偽物の支払いのようになってしまいます。決して使われないこれらのトランザクションはUTXOセットから決して削除されず、永遠にUTXOデータベースのサイズを大きくし続け、"肥大化"させてしまいます。

Bitcoin Coreクライアントのバージョン0.9では、妥協策として +OP_RETURN+ オペレーターが導入されました。 +OP_RETURN+ は開発者たちが支払いに関係のない80byteのデータをトランザクションアウトプットに追加できるようにしています。"偽物の"UTXOと違って、 +OP_RETURN+ オペレーターはUTXOセットに保持される必要がない _明示的使用不可_ アウトプットを作り出します。 +OP_RETURN+ アウトプットはブロックチェーン上に記録されるためディスク容量を消費しブロックチェーンのデータサイズ増大を促してしまいますが、UTXOセットに保存されないためUTXOメモリプールと高価なRAMのコストの肥大化にはならないようになっています。 

+OP_RETURN+ スクリプトは以下のようなものです。

----
OP_RETURN <data>
----

このdataは80byteに制限され、多くの場合SHA256アルゴリズム(32バイト)の出力結果のようなハッシュになっています。多くのアプリケーションはアプリケーションを示すidをdataの前にprefixとして置いています。例えば、 http://proofofexistence.com[Proof of Existence] というデジタル公証人サービスは8byteのprefix "DOCPROOF" を使っていて、ASCIIコードで表すと１６進数で +44f4350524f4f46+ になります。

+OP_RETURN+ アウトプットを"使用する"ための"unlocking script"がないことを覚えておいてください。つまり、+OP_RETURN+ ではこのアウトプットでロックされている資金を使うことはできないのです。そして、使用可能なものとしてUTXOセットに保持しておく必要はありません。このアウトプットに割り当てられているどんなbitcoinも永遠に失われてしまうため、 +OP_RETURN+ アウトプットは通常0bitcoinを持ちます。もしスクリプト検証ソフトウェアが +OP_RETURN+ を見つけた場合には、検証スクリプトの実行を直ちに停止しトランザクションを無効にします。このため、もし偶然 +OP_RETURN+ アウトプットをトランザクションインプットが参照した場合は、このトランザクションは無効になります。 

標準的なトランザクション( +isStandard()+ を確認してみてください)はたった１つだけしか +OP_RETURN+ アウトプットを持つことができませんが、 +OP_RETURN+ アウトプットは他の種類のアウトプットを持つトランザクションと結合することができます。 

現在のBitcoin Coreバージョン0.10では２つの新しいコマンドラインオプションが追加されました。 +datacarrier+ オプションはOP_RETURNトランザクションのリレーとマイニングを行うかどうかをコントロールしており、デフォルトは"1"でリレーとマイニングの実行を許可するものになっています。 +datacarriersize+ オプションは数値を引数として取りOP_RETURNデータの最大バイトサイズを指定します。この最大バイトサイズのデフォルトは40バイトです。

[NOTE]
====
OP_RETURNは最初80バイトの制限を付けた形で提案されていましたが、この機能が実際にリリースされた時に制限が40バイトに削減されました。2015年2月にリリースされたBitcoin Coreバージョン0.10の中で、この制限は80バイトに引き上げられました。ノードはOP_RETURNトランザクションをリレー、マイニングしないか、または単にリレーだけして80バイトより小さいデータを持つOP_RETURNトランザクションだけをマイニングするか、を選べるようになっています。
====

[[p2sh]]
==== Pay-to-Script-Hash (P2SH)

((("multi-signature scripts","P2SH and", id="ix_ch05-asciidoc17", range="startofrange")))((("Pay-to-script-hash (P2SH)", id="ix_ch05-asciidoc18", range="startofrange")))((("transactions","Pay-to-script-hash", id="ix_ch05-asciidoc19", range="startofrange")))pay-to-script-hash (P2SH)は2012年に導入されたもので、複雑なトランザクションスクリプトをはるかに簡単化した新しい種類のトランザクションです。P2SHを説明するために、実用的な例を見てみましょう。

<<ch01_intro_what_is_bitcoin>>で、ドバイで電子機器の輸入業をやっているムハンマドを紹介しました。ムハンマドの会社は会社の口座のためにBitcoinのマルチシグネチャー機能を利用しています。マルチシグネチャースクリプトはBitcoinの先進的なスクリプト言語の主要な使い方の１つで、とても強力な機能です。ムハンマドの会社は全ての顧客からの支払い(会計用語で"売掛金")にマルチシグネチャーを使っています。マルチシグネチャースキームを使い、顧客による全ての支払いは次のような方法で安全性を担保しています。支払いを実行するには少なくとも２つの署名が必要であり、登録されている人はムハンマド、彼のパートナーのうちの１人、バックアップキーを持っている彼の代理人です。このようなマルチシグネチャースキームはコーポレートガバナンスを提供し、盗難、横領、または紛失を防ぐ役割があります。 

このためのスクリプトはとても長く、以下のようなものです。

----
2 <Mohammed's Public Key> <Partner1 Public Key> <Partner2 Public Key> <Partner3 Public Key> <Attorney Public Key> 5 OP_CHECKMULTISIG
----

    
マルチシグネチャースクリプトはとても強力な機能ですが、これは扱いにくいものなのです。というのは、ムハンマドは支払いをする前にこのスクリプトについて全ての顧客に説明する必要があるためです。それぞれの顧客は特別なトランザクションスクリプトを作ることができる特別なウォレットを使う必要があり、また特別なスクリプトを使ってどのようにトランザクションを作ればよいか理解する必要があります。さらに、このスクリプトがとても長い公開鍵を含んでいるため、作られたトランザクションは単純な支払いトランザクションと比べて約５倍も大きいのです。余分に大きいトランザクションの負担が顧客ごとのトランザクション手数料として乗っかってきます。最終的に、このような大きなトランザクションスクリプトは使用されるまで全てのfull nodeのRAM内のUTXOセットに保持されます。このような問題点によって実用上、複雑なアウトプットスクリプトの使用が難しくなってしまうのです。 

pay-to-script-hash (P2SH) はこれらの実用的な難点を解決するために開発され、Bitcoinアドレスでの支払いと同じくらい簡単に複雑なスクリプトが使えるようにしたのです。P2SHでの支払いで、複雑なlocking scriptは暗号学的なハッシュであるデジタルフィンガープリントに置き換えられます。UTXOを使おうとするトランザクションがのちに作られたとき、このトランザクションはunlocking scriptだけでなくこのハッシュとマッチするスクリプトを含んでいなければいけません。簡単に言って、P2SHは"このハッシュとマッチするスクリプトに対して支払い、スクリプトはこのアウトプットが使用されるときにのちに与えられます"という意味です。 

P2SHトランザクションでは、ハッシュによって置き換えられたlocking scriptは((("redeem script"))) _redeem script_ と呼ばれます。なぜなら、これがlocking scriptとしてよりはむしろ回収時にシステムに提供されるからです。<<without_p2sh>>はP2SHではないスクリプトを示し、<<with_p2sh>>はP2SHでエンコードされた同じスクリプトを示しています。

[[without_p2sh]]
.P2SHを使用しない複雑なscript
|=======
| Locking Script | 2 PubKey1 PubKey2 PubKey3 PubKey4 PubKey5 5 OP_CHECKMULTISIG
| Unlocking Script | Sig1 Sig2   
|=======

[[with_p2sh]]
.P2SHを使用した複雑なscript
|=======
| Redeem Script | 2 PubKey1 PubKey2 PubKey3 PubKey4 PubKey5 5 OP_CHECKMULTISIG
| Locking Script | OP_HASH160 <20-byte hash of redeem script> OP_EQUAL
| Unlocking Script | Sig1 Sig2 redeem script 
|=======

テーブルにある通りP2SHのほうは、アウトプットを使用するための詳細条件が書かれた複雑なスクリプトがlocking scriptにはありません。その代わり、redeem scriptのハッシュだけがlocking scriptにはあり、redeem script自身はアウトプットが使用されるときのunlocking scriptの一部としてあとで提供されます。 

ムハンマドの会社の場合の複雑なマルチシグネチャースクリプトとP2SHスクリプトを見てみましょう。 

まず、ムハンマドの会社が顧客からの支払いに使っているマルチシグネチャースクリプトは以下です。

----
2 <Mohammed's Public Key> <Partner1 Public Key> <Partner2 Public Key> <Partner3 Public Key> <Attorney Public Key> 5 OP_CHECKMULTISIG
----

上記の大なり小なり括弧を実際の公開鍵(04から始まる520bitの数値)に置き換えてみると、以下のようにとても長くなってしまうことが分かるはずです。

----
2 
04C16B8698A9ABF84250A7C3EA7EEDEF9897D1C8C6ADF47F06CF73370D74DCCA01CDCA79DCC5C395D7EEC6984D83F1F50C900A24DD47F569FD4193AF5DE762C58704A2192968D8655D6A935BEAF2CA23E3FB87A3495E7AF308EDF08DAC3C1FCBFC2C75B4B0F4D0B1B70CD2423657738C0C2B1D5CE65C97D78D0E34224858008E8B49047E63248B75DB7379BE9CDA8CE5751D16485F431E46117B9D0C1837C9D5737812F393DA7D4420D7E1A9162F0279CFC10F1E8E8F3020DECDBC3C0DD389D99779650421D65CBD7149B255382ED7F78E946580657EE6FDA162A187543A9D85BAAA93A4AB3A8F044DADA618D087227440645ABE8A35DA8C5B73997AD343BE5C2AFD94A5043752580AFA1ECED3C68D446BCAB69AC0BA7DF50D56231BE0AABF1FDEEC78A6A45E394BA29A1EDF518C022DD618DA774D207D137AAB59E0B000EB7ED238F4D800 5 OP_CHECKMULTISIG
----

このスクリプト全体は20byteの暗号学的ハッシュで表現でき、このハッシュは最初にSHA256ハッシュ化アルゴリズムを適用しその後この結果にRIPEMD160アルゴリズムを適用することで作成されます。前のスクリプトに対してのこのハッシュ化して得た20byteのハッシュは以下になります。

----
54c557e07dde5bb6cb791c7a540e0a4796f5e97e
----

P2SHトランザクションは、以下のような長いスクリプトの代わりにこのハッシュを含めたlocking scriptでアウトプットをロックしています。

----
OP_HASH160 54c557e07dde5bb6cb791c7a540e0a4796f5e97e OP_EQUAL
----
見て分かるように前のlocking scriptよりもずいぶん短いことが分かります。"5つのキーのマルチシグネチャースクリプトに対する支払い"ではなく、P2SHでは"このハッシュを持ったスクリプトへの支払い(pay to a script with this hash)"になります。ムハンマドの会社への支払いをする顧客は彼の支払いの中にあるもっと短いlocking scriptを含めるだけで支払いができるのです。ムハンマドがこのUTXOを使いたいときは、オリジナルのredeem scriptと解除するための署名を以下のように提供しなければいけません。

----
<Sig1> <Sig2> <2 PK1 PK2 PK3 PK4 PK5 5 OP_CHECKMULTISIG>
----

２つのスクリプトは２つの段階で結合されます。まず、このハッシュが合っているかを確認するためにlocking scriptに対してredeem scriptがチェックされます。

----
<2 PK1 PK2 PK3 PK4 PK5 5 OP_CHECKMULTISIG> OP_HASH160 <redeem scriptHash> OP_EQUAL
----
もしredeem scriptハッシュが合っていれば、unlocking scriptはredeem scriptwp解除するために実行されます。

----
<Sig1> <Sig2> 2 PK1 PK2 PK3 PK4 PK5 5 OP_CHECKMULTISIG
----

===== Pay-to-script-hashアドレス

((("addresses, bitcoin","Pay-to-Script-Hash (P2SH)")))((("Pay-to-script-hash (P2SH)","addresses")))P2SHに関してもう１つの重要な点は、BIP0013で定義されているようにスクリプトハッシュをエンコードしてアドレスとして使えるようにする点です。P2SHアドレスはスクリプトの20バイトハッシュをBase58Checkエンコードしたものです。これはちょうど公開鍵の20バイトハッシュのBase58CheckエンコードをしたBitcoinアドレスのようなものです。P2SHアドレスはversion prefixとして"5"が使われており、Base58Checkエンコードしたアドレスは"3"から始まるものになっています。例えば、ムハンマドの複雑なスクリプトでは、P2SHとして20バイトにハッシュ化されてBase58Checkエンコードを施されたP2SHアドレスは +39RF6JqABiHdYHkfChV6USGMe6Nsr66Gzw+ になります。ムハンマドはこの"アドレス"を彼の顧客に送ることで、彼の顧客はBitcoinアドレスに対する支払いとあたかも同じようにウォレットを使うことができます。3というprefixはこのアドレスが特別な種類のアドレスであることを示します。 

P2SHアドレスは全ての複雑な点を隠蔽し、支払う人がスクリプトを見ることなく支払いができるようにしています。 

===== pay-to-script-hashの利点 

((("Pay-to-script-hash (P2SH)","benefits of")))pay-to-script-hashはlocking scriptを複雑なまま直接扱うことに比べて以下の利点があります。

* より短いフィンガープリントで複雑なスクリプトを置き換えることで、トランザクションのデータサイズを小さくする
* スクリプトがアドレスとして実装されることで、送り主と送り主のウォレットはP2SHに関する複雑な実装をする必要がない
* P2SHは、スクリプトを構成する負担を送り手ではなく受け手側に移している
* P2SHは、アウトプットが持つ長いスクリプト(これはUTXOセットに含まれるためメモリを圧迫する)をインプット側(ブロックチェーン上にのみ保存される)に移すことでデータストレージの負担をインプット側に移している
* P2SHは、支払い時点に生じる長いスクリプトを資金が使われる時点で生じるようにすることで、データストレージの負担が生じる時刻を移している
* P2SHは、送り手が長いスクリプトを伴って資金を送るときに負担するトランザクション手数料を、受け手がredeem scriptを使って資金を使うときに負担するように変更している

===== redeem scriptとisStandard検証

((("pay-to-script-hash (P2SH)","isStandard validation")))((("pay-to-script-hash (P2SH)","redeem script for")))Bitcoin Coreクライアントのバージョン0.9.2より前では、pay-to-script-hashは +isStandard()+ 関数によって標準的なBitcoinトランザクションスクリプトに含められていませんでした。これは、トランザクションを使用するときに提供されるredeem scriptが、 +OP_RETURN+ とP2SH自身を除くP2PK、P2PKH、マルチシグネチャーのうちのどれか１つに統合されるしかないということを意味しています。

現在のBitcoin Coreクライアントのバージョン0.9.2では、P2SHトランザクションは有効なスクリプトはなんでも含むことができ、P2SHはもっとフレキシブルになり、多くの斬新であり、またトランザクションが複合された実験が許可されています。  

P2SH redeem scriptの中にP2SHを置くことはできないという点に注意してください。というのは、P2SHの設計で再帰ができないようになっているためです。また、まだredeem scriptの中で +OP_RETURN+ を使用することはできません。 +OP_RETURN+ は定義によってあとでこれを含むアウトプットを使用するということができないためです。

注意点として、redeem scriptはP2SHアウトプットを使用しようとするまでBitcoinネットワークに提供されません。このため、もし無効なトランザクションのハッシュを伴ったアウトプットをロックした場合も、お構いなしにBitcoinノードの検証をパスします。しかし、このアウトプットを使うことはできません。なぜなら、このアウトプットを使用しようとするトランザクションはredeem scriptを含んでいますが、このscriptが無効であるためトランザクションが受理されないのです。これはリスクを生み出してしまいます。というのは、あとで使用することができないP2SHにbitcoinがロックされてしまうためです。このredeem scriptハッシュだけではredeem scriptが無効であるか分からないため、たとえ無効なredeem scriptだとしてもBitcoinネットワークはP2SH解除条件をパスしてしまうでしょう。 

[WARNING]
====
((("Pay-to-Script-Hash (P2SH)","locking scripts")))P2SH locking scriptはredeem scriptのハッシュを含んでいます。このハッシュは、redeem scriptそのものの推測に関して一切ヒントを与えません。もしこのredeem scriptが無効だったとしてもP2SHトランザクションは有効だと考えられ受け入れられてしまいます。間違ってあとで使えないような方法でbitcoinをロックしてしまうかもしれません。(((range="endofrange", startref="ix_ch05-asciidoc19")))(((range="endofrange", startref="ix_ch05-asciidoc18")))(((range="endofrange", startref="ix_ch05-asciidoc17")))(((range="endofrange", startref="ix_ch05-asciidoc0"))) 
====
