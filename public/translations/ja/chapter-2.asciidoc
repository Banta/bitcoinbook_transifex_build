[[ch02_bitcoin_overview]]
== Bitcoinはどのように動作するのか

=== トランザクション、ブロック、マイニング、ブロックチェーン

((("bitcoin","implementation of", id="ix_ch02-asciidoc0", range="startofrange")))今まであるような銀行サービスや支払いの方法と違って、Bitcoinは特定の機関に管理されないdecentrized-trustを基礎にしています。特定の機関による管理の代わりに、Bitcoinでは信用管理をBitcoinの仕組みに参加している個々の参加者同士の相互協力から生まれる創発特性によって作っています。この章では、Bitcoinの１つのトランザクションを追ってみることで、詳細にBitcoinの仕組みを説明したいと思います。また、分散された合意によるBitcoinの仕組みによってトランザクションが"信用"され受け入れられ、最後に全てのトランザクションの分散元帳であるブロックチェーンにトランザクションが記録されます。

以下に出てくる例を使って、実際に行われているトランザクションをシミュレートしてみましょう。この例の登場人物はジョー、アリス、ボブで、それぞれの間であるウォレットからあるウォレットへ資産を送ることというものです。Bitcoinネットワークのトランザクションやブロックチェーンを追うとき、個々の詳細なステップを可視化するために((("blockchain explorer websites"))) _blockchain explorer_ sitesを使います。blockchain explorerはウェブアプリケーションで、Bitcoinアドレスやトランザクション、ブロックの変化を追うことができる検索エンジンのように使えます。

ポピュラーなblockchain explorerは以下です。((("blockchain.info website")))((("blockexplorer.com")))((("blockr.io website")))((("insight.bitpay.com")))

* http://blockchain.info[Blockchain info]
* http://blockexplorer.com[Bitcoin Block Explorer]
* http://insight.bitpay.com[insight]
* http://blockr.io[blockr Block Reader]

それぞれのblockchain explorerではBitcoinアドレスやトランザクションハッシュ、ブロック番号を元に検索でき、Bitcoinネットワークやブロックチェーン上にあるデータと同じデータを探せます。また、それぞれの例には直接データが見れるようにURLを書いておきましたので、詳細はURLの先で確認してみてください。


==== Bitcoin概観

<<bitcoin-overview>>図にあるように、bitcoinの仕組みは秘密鍵を含むウォレットを持っているユーザやBitcoinネットワークを伝わるトランザクション、全てのトランザクションを保持している元帳であるブロックチェーンを作り出すマイナーで構成されていることが分かります。この章では、Bitcoinネットワークに沿って１つのトランザクションを追い、各ステップを説明します。では、ウォレット、マイニング、決済システムの背後にあるテクノロジーに入っていきましょう。 

[[bitcoin-overview]]
.Bitcoin概観
image::images/msbt_0201.png["Bitcoin Overview"]

[[cup_of_coffee]]
==== コーヒー代金の支払い

((("transactions", id="ix_ch02-asciidoc1", range="startofrange")))((("transactions","simple example of", id="ix_ch02-asciidoc2", range="startofrange")))前の章に出てきたアリスは初めてbitcoinを手にしたところです。<<getting_first_bitcoin>>でお分かりの通り、アリスは友達のジョーと会って、キャッシュをbitcoinと交換したのです。ジョーからアリス0.10BTCを受け取りました。アリスは今ちょうど最初のトランザクションを作成して、最近bitcoinでの支払いを始めたPalo Altoのボブのコーヒーショップでbitcoinでの支払いをするところです。ボブのコーヒーショップではアメリカドルの値段表示しかありませんが、支払いをするときにアメリカドルで払うのかbitcoinで払うのかを決められるのです。アリスはコーヒーを注文しボブはレジにこの注文を入力します。すると、POSシステムは直近のレートでアメリカドルでの代金をbitcoinでの代金に変換して、両方の金額を表示してくれます。このとき、図にあるようなQRコードも一緒に出してくれます。(<<payment-request-QR>>参照)

----
総額:
$1.50 USD
0.015 BTC
----

[[payment-request-QR]]
.支払い要求QRコード(ヒント: スキャンしてみてください！)
image::images/msbt_0202.png["payment-request"]

[[payment-request-URL]]
.この支払い要求QRコードはBIP0021にあるプロトコルに沿って次のようなURLに変換されます。
----
bitcoin:1GdK9UzpHBzqzX2A9JFP3Di4weBwqgmoQA?
amount=0.015&
label=Bob%27s%20Cafe&
message=Purchase%20at%20Bob%27s%20Cafe

URLの構成要素 

Bitcoinアドレス: "1GdK9UzpHBzqzX2A9JFP3Di4weBwqgmoQA"
支払い総額: "0.015"
支払い先アドレスのラベル: "Bob's Cafe"
支払い説明文: "Purchase at Bob's Cafe"
----


[TIP]
====
((("QR codes","payment requests as")))送り先Bitcoinアドレスを単に含んでいるQRコードと違って、支払い要求は送り先Bitcoinアドレス、支払い総額、"Bob's Cafe"のような一般的な説明文を含んでいるQRコードでエンコードされたURLです。これは、人間が読める説明をユーザに示している間に、Bitcoinウォレットが支払いを行うために使う情報をあらかじめ埋めておくようにするためです。あのQRコードをBitcoinウォレットでスキャンすると、アリスが見ているものを見ることができます。 
====

ボブは言いました。"15ドルです。bitcoinでの支払いであれば15mBTCです。"

アリスがスマートフォンを使って表示されているQRコードをスキャンすると、スマートフォンに +0.0150BTC+ と表示され +ボブのコーヒーショップ+ への支払いをするのに彼女は"送る"ボタンを押しました。数秒後レジにトランザクションが表示されボブはトランザクションの完了を確認しました(処理時間はクレジットカードでの承認に必要な時間と同じくらいです)。

この後の節では、もっと詳細にトランザクションの内容を説明し、アリスのウォレットがどのようにしてトランザクションを実行したのか、トランザクション情報はどのようにしてBitcoinネットワークに流れ、どのように検証されたのか、送られたbitcoinをボブは次回どのように使うことができるのか、を見ていきます。

[NOTE]
====
Bitcoinネットワークは断片化した様々な額で取引ができます。例えば、ミリbitcoin (1/1000 bitcoin)から((("satoshis","defined")))satoshiとして知られている1/100,000,000 bitcoinまでです。この本を通して、最も小さい単位(1satoshi)から今後採掘される全てのbitcoinの総額(21,000,000)まで、Bitcoin通貨の量を表現するために“bitcoin”という用語を使っていきます。(((range="endofrange", startref="ix_ch02-asciidoc2"))) 
====


=== Bitcoinトランザクション

((("transactions","defined")))シンプルに言って、トランザクションとはbitcoinの所有者が他の人にbitcoinを送ったことを認めたことをBitcoinネットワークに示すことです。このためそのbitcoinを受け取った新しい所有者が受け取ったbitcoinを使うには、新しい所有者が他の人にbitcoinを送ったことを認めたことを示す別のトランザクションを作らなければいけません。 

トランザクションは複式簿記の個々の取引行のようなものです。((("inputs, defined")))簡単に言えば、それぞれのトランザクションは１個または複数の"インプット"を持っているため、トランザクションにはBitcoinアドレスの借り方にこの"インプット"が記載されています。((("outputs, defined")))また、それぞれのトランザクションは１個または複数の"アウトプット"を持っているため、トランザクションにはBitcoinアドレスの貸し方に"アウトプット"が記載されています。インプットとアウトプット(それぞれ借り方と貸し方)は同じ額になるようにならず、わずかにインプットのほうが大きいようになります。この差が取引手数料であり、元帳の中にあるトランザクションからマイナーがかき集めたものです。<<transaction-double-entry>>図には、bitcoinトランザクションを簿記的に書いてあります。 

トランザクションはそれぞれのトランザクションの所有権証明としての面も含んでいます。この所有権証明はデジタル署名の形になっており、このデジタル署名は所有者とは独立に誰か他の人によって検証されるようになっています。ビットコイン用語で、"bitcoinを使う"とはトランザクションに署名することです。 


[TIP]
====
_トランザクション_ は _トランザクションインプット_ から _トランザクションアウトプット_ に価値を移動します。インプットはどこからbitcoinが来たかを示し、通常前のトランザクションのアウトプットになります。トランザクションアウトプットは、このbitcoinを鍵と紐付けることで新しい所有者にこのbitcoinを割り当てます。この鍵は _解除条件_ と呼ばれるものです。解除条件は、資金を将来のトランザクションで使用するときに必要とされる署名に対する必要条件になります。1つのトランザクションからのアウトプットは新しいトランザクションの中でインプットとして使用され、これにより価値があるアドレスから別のアドレスに移動するときに所有者の連鎖を作り出していくのです(<<blockchain-mnemonic>>参照)。 
====

[[transaction-double-entry]]
.複式簿記としてのトランザクション 
image::images/msbt_0203.png["Transaction Double-Entry"]

[[blockchain-mnemonic]]
.トランザクションの連鎖。１つのトランザクションのアウトプットは次のトランザクションのインプットになる。
image::images/msbt_0204.png["Transaction chain"]

アリスがボブのコーヒーショップで支払いをするときは、ジョーからアリスへの前のトランザクションをこのトランザクションのインプットに使います。前の章で、アリスは現金と引き換えにジョーからbitcoinを受け取りました。このトランザクションはアリスの秘密鍵でロックされています。アリスからボブへの新しいトランザクションは、ジョーからアリスへの前のトランザクションの内容を参照することで新しいトランザクションのインプットを作り、コーヒー代の支払いとおつりの受け取りのトランザクションアウトプットを作成します。トランザクションはチェーンの形を取っていて、最新のトランザクションのインプットは前のトランザクションのアウトプットに対応しています。アリスの秘密鍵は前のトランザクションのアウトプットを解錠し、それによってこのアウトプットにある資金がアリスのものであるとBitcoinネットワークに示すのです。アリスはコーヒー代をボブのBitcoinアドレスへの新しいトランザクションアウトプットに付けます。ボブのBitcoinアドレスにひも付けることによって、このアウトプットを使うためにボブは署名を生成しなければならなくなり、このアウトプットが他者の使用から "守られる" ことになるのです。これによりこの価値の転送がアリスとボブの間のものであるということを証明しています。<<blockchain-mnemonic>>図がこのトランザクションのチェーンを説明しています。

==== よくあるトランザクション形式

((("transactions","common forms of", id="ix_ch02-asciidoc3", range="startofrange")))よくあるトランザクションの形式は１つのBitcoinアドレスからもう１つのBitcoinアドレスへという形式をしており、通常送り元に戻されるおつりも含まれます。このタイプのトランザクションは１つのインプットと２つのアウトプットを持っていて、<<transaction-common>>図のようなものになっています。

[[transaction-common]]
.よくあるトランザクション
image::images/msbt_0205.png["Common Transaction"]

別のトランザクション形式は、いくつかのインプットを集めて１つのアウトプットにまとめる形です(<<transaction-aggregating>>参照)。これは現実にあるコインや紙幣をまとめて大きな紙幣にするトランザクションと同じです。これらのトランザクションはおつりとして受け取った小さな額をまとめるためにときどきウォレットで作られます。

[[transaction-aggregating]]
.集約型トランザクション
image::images/msbt_0206.png["Aggregating Transaction"]

もう１つの別のトランザクションの形式は１つのインプットを複数のアウトプットに分けて複数の受取人に使う場合です(<<transaction-distributing>>参照)。このタイプのトランザクションは、企業内での給与の支払いでときどき使われます。(((range="endofrange", startref="ix_ch02-asciidoc3")))

[[transaction-distributing]]
.分散型トランザクション
image::images/msbt_0207.png["Distributing Transaction"]

=== トランザクションの構築

((("transactions","constructing", id="ix_ch02-asciidoc4", range="startofrange")))アリスのウォレットで、適切なインプットとアウトプットを選ぶ処理はすでに実装されています。アリスが決めなければいけないのは、どこに送るかということと、いくら送るかということだけで、残りはウォレットが自動的に実行してくれます。((("offline transactions")))重要なこととして、ウォレットはネットワークに繋がっていなくてもトランザクションを組むことができます。ちょうど小切手だけ家で書いておいてあとで銀行に送るように、Bitcoinネットワークに繋がっているときに作られたり署名されたりするわけではないのです。最終的に送られればいいだけです。

==== 正しいインプットをどのように得るか

((("transactions","inputs, getting", id="ix_ch02-asciidoc5", range="startofrange")))アリスのウォレットはインプットを最初に探します。というのは、ボブに送ることができる額がウォレットにあるかを確認しなければいけないためです。ほとんどのウォレットは未使用トランザクションアウトプットを保持するデータベースを持っていて、ウォレットの秘密鍵でロックされています。アリスのウォレットはジョーから送金された時のアウトプットのコピーを持っています(<<getting_first_bitcoin>>参照)。full-indexを持っているBitcoinウォレットは、ブロックチェーンにある全てのトランザクションのアウトプットのコピーを実際持っています。これはウォレットがトランザクションインプットを作成するとともにすばやく支払える額の未使用アウトプットがあるかどうかを確認するためです。しかし、full-indexウォレットは多くのデータ容量を持っている必要があるため、ほとんどのウォレットは軽量ウォレットというウォレットの所有者の未使用アウトプットのみを保持しているものになっています。 
	
((("wallets","blockchain storage in")))もしウォレットが未使用アウトプットのコピーを保持していない場合、この情報を取得するためにBitcoinネットワークに聞きに行くことができます。この場合いろいろな種類のAPIを通して聞きに行ったり、full-indexを持っているノードにJSON RPC APIを通して聞きに行ったりということができます。<<example_2-1>>はRESTfull APIを使って聞きに行ったものです。RESTful APIというのは特定のURLに対してHTTP GETコマンドを発行して情報を得るための仕組みです。このURLは、あるBitcoinアドレスが持っている未使用トランザクションアウトプットを全て返します。そして、この情報を元にウォレットはトランザクションインプットを作成します。以下では、((("cURL HTTP client"))) _cURL_ というRESTful APIを使うためのシンプルなコマンドを使っています。

[[example_2-1]]
.アリスのBitcoinアドレスに対する全未使用アウトプットの参照
====
[source,bash]
----
$ curl https://blockchain.info/unspent?active=1Cdid9KFAaatwczBwBttQcwXYCpvK8h7FK
----
====

[[example_2-2]]
.参照URLからの返却
====
[source,json]
----
{
 
	"unspent_outputs":[

		{
			"tx_hash":"186f9f998a5...2836dd734d2804fe65fa35779",
			"tx_index":104810202,
			"tx_output_n": 0,	
			"script":"76a9147f9b1a7fb68d60c536c2fd8aeaa53a8f3cc025a888ac",
			"value": 10000000,
			"value_hex": "00989680",
			"confirmations":0
		}
  
	]
}
----
====

<<example_2-2>>にある通りRESTful APIから返ってきたresponseには１つの未使用アウトプットがあります。これは、アリスのBitcoinアドレス 1Cdid9KFAaatwczBwBttQcwXYCpvK8h7FK が所有しているものです。このresponseにはトランザクションの詳細が載っていて、未使用アウトプットがsatoshiという単位(1000万satoshiが0.10bitcoinと同価値)で書かれています。この情報を元に、アリスのウォレットは他のBitcoinアドレスに送るためのトランザクションを作ることができるのです。

[TIP]
====
http://bit.ly/1tAeeGr[ジョーからアリスへのトランザクション]を見てみましょう。
====

今まで見てきたように、アリスのウォレットはコーヒーの代金を払うのに十分な１つの未使用アウトプットを持っていることが分かります。この場合は１つの未使用アウトプットでしたがそうでなければ、アリスのウォレットはもっと小さい未使用アウトプットをかき集めないといけないかもしれません。ちょうど財布の中からコインを１つずつ取り出してコーヒーの支払いができる額になるまでごそごそ探すように。いずれの場合でも、ウォレットがトランザクションアウトプットを作成するときにおつりをアリスに戻す必要があるかもしれません。(((range="endofrange", startref="ix_ch02-asciidoc5")))


==== アウトプットの作成

((("transactions","outputs, creating")))トランザクションアウトプットはscriptの形で作成されます。このscriptは資金を使用する際の制約条件であり、このscriptに対する解を導入することでの>み解除されます。より簡単に言うと、このscriptは「このアウトプットはボブのpublicアドレスに対応した秘密鍵から作成された署名を送れる方ならどなたにでも支払いができます」というようなこと >を言っています。ボブだけがボブのpublicアドレスに対応した秘密鍵を保持しているウォレットを持っているので、ボブのウォレットだけがこのアウトプットを復号するさきほどの署名を送れるのです>。よって、アリスはアウトプットを復号しようとしてもボブの署名を要求されてしまい邪魔されてしまいます。 

このトランザクションはまたおつりという２つ目のアウトプットも含んでいます。というのは、アリスの資産は0.10BTCになっていて、この金額はコーヒー一杯の金額0.015BTCよりも大きい金額だからです。このためアリスは、0.085BTCのおつりを受け取ることになります。アリスへのおつりの支払い処理は、アリスのウォレットによってボブへの支払い処理と一緒に作られます。アリスのウォレットは彼女の資産を２つの支払い処理に分けて行います。１つは、ボブへのもの、もう１つは彼女自身へのものです。彼女は次のトランザクションのときにおつりのアウトプットを使うことができます。のちほどこのアウトプットを使用することになります。 

最終的に、Bitcoinネットワークでトランザクションが処理される直前に、アリスのウォレットは少ない手数料を加えます。これは支払いのときに明示的に表示されるのではなく、トランザクションでのインプットとアウトプットとの差額として暗に表示されます。おつりとして0.085BTCを得る代わりにアリスは0.0845BTCだけをおつりとしてアウトプットを得るとすると、0.0005BTC(1mBTCの半分)が残ることになります。インプットとしての0.10BTCは完全に２つのアウトプットに分けられるのではないのです。アウトプットを全て足したとき0.10BTCよりも小さいからです。この差額は、マイナーがブロックにトランザクションを含めて、ブロックチェーンにトランザクションを組み込むときに集められトランザクション手数料となります。

結果的に作られたトランザクションは、<<transaction-alice>>にある通り、blockchain explorerを使って見ることができます。

[[transaction-alice]]
.ボブのコーヒーショップへのアリスのトランザクション
image::images/msbt_0208.png["Alice Coffee Transaction"]

[[transaction-alice-url]]
[TIP]
====
http://bit.ly/1u0FIGs[アリスからからボブのコーヒーショップへのトランザクション]を見てみましょう。
====

==== トランザクションを元帳にどうやって取り込むか

((("transactions","adding to ledger")))アリスのウォレットで作られるトランザクションは258バイトで、資産の所有者を確認し新しい所有者を割り当てるのに必要な全てがここに含まれています。今、トランザクションは分散元帳であるブロックチェーンの一部になるためにBitcoinネットワークに送信されなければいけません。この節では、どのようにトランザクションが新しいブロックの一部になるのか、どのようにブロックが "マイニング" されるのか、を確認していきます。そして、ブロックチェーンに加えられた新しいブロックの信用が、さらに多くのブロックがブロックチェーンに加えられることでどのようにますます大きくなっていくのかを見ていきます。



===== トランザクションのBitcoinネットワークへの送信

((("transactions","transmitting")))((("transmitting transactions")))トランザクションはブロックチェーンに取り込まれるために必要な情報を全て持っているため、どのように、またどこでそれがBitcoinネットワークに送信されるかは問題ではありません。Bitcoinネットワークはpeer-to-peerネットワークであり、個々のBitcoinクライアントがいくつかの他のBitcoinクライアントとつながってBitcoinネットワークに参加しています。Bitcoinネットワークの目的は、トランザクションとブロックを全てのBitcoinクライアントに伝えて行くことなのです。 

===== どのようにBitcoinネットワークを伝わって行くのか

((("transactions","propagating")))アリスのウォレットは新しいトランザクションを、有線LANまたはWiFi、モバイルでインターネットに繋がっている任意の他のBitcoinクライアントに送信します。アリスのウォレットはボブのウォレットと直接繋がっている必要はなく、カフェが提供しているインターネットアクセスポイントを使う必要もないのです。有効なトランザクションを受け取ったBitcoinクライアントはすぐに繋がっている他のBitcoinクライアントにトランザクションを転送します。よって、このトランザクションは迅速にpeer-to-peerネットワークを伝わって行き、数秒以内にほとんどのBitcoinクライアントに到達します。 

===== ボブの視点でみたときは

ボブのウォレットが直接アリスのウォレットと繋がっている場合は、ボブのウォレットはトランザクションを一番最初に伝えられるBitcoinクライアントとなるかもしれません。しかし、たとえアリスのウォレットが他のBitcoinクライアントを通してトランザクションを送ったとしても、トランザクションは数秒以内にボブのウォレットに到達するでしょう。ボブのウォレットはすぐにアリスのトランザクションをボブへの支払いであると認識します。というのは、このトランザクションはボブの秘密鍵で復号できるアウトプットになっているからです。ボブのウォレットは他のBitcoinクライアントとは独立に、このトランザクションが正規の形式であるどうか、未使用インプットを使っているかどうか、次のブロックに入る十分なトランザクション手数料を含んでいるかどうか、を確認します。この時点では、ボブは小さなリスクとしてこのトランザクションがブロックに含められ検証された状態であると仮定しています。 

[TIP]
====
((("transactions","accepting without confirmations")))Bitcoinトランザクションに関するよくある勘違いは、"検証"のために新しいブロックが生成されるまで10分間または完全な６回の検証のために60分間待たなければならないということです。検証はトランザクションがBitcoinネットワーク全体から受理されたことを保証しますが、このような遅延はコーヒー代のような少額の場合必要ではありません。確認がなくても、個人IDや署名がないクレジットカードよりリスクが小さいなら、店舗側は有効な少額トランザクションを受け入れるかもしれません。(((range="endofrange", startref="ix_ch02-asciidoc4")))(((range="endofrange", startref="ix_ch02-asciidoc1")))
====

=== Bitcoinマイニング

((("mining","blockchains")))今、トランザクションはBitcoinネットワークに伝えられました。しかし、マイニングと呼ばれるプロセスを通して検証されブロックに取り込まれるまで、共有されている元帳であるブロックチェーンの一部になることはできません。詳細については<<ch8>>を参照してください。 

信用というBitcoinの仕組みは、計算によって成り立っています。トランザクションは _ブロック_ の中に取り込まれますが、取り込まれるためには膨大な計算をしなければいけません。しかし、取り込まれていることを確認するするのにはわずかな計算しか必要ありません。このマイニングは、以下の２つのプロセスによって行われます。

* マイニングはそれぞれのブロックの中に新しいbitcoinを作り出します。これはあたかも中央銀行が新しいお金を印刷するようなものです。作り出されるbitcoinの量はブロックごとに決められており、時間とともに減少していきます。
* マイニングは、十分な計算量がブロックにつぎ込まれた場合のみトランザクションが検証されたことを保証し信用を作り出します。多くのブロックの信用のためには多くの計算が必要であり、この多くの計算が信用を意味します。 

マイニングを表すいい方法として、巨大な数独を考えると分かりやすいです。この数独は、誰かが解法を見つけるごとにリセットされて、約10分間で解けるように難しさが自動的に調整されるようなものです。巨大な数独パズルを創造してみてください。数千の行と列を持つような巨大なものです。もし私があなたに完成したパズルを見せたら、完成しているかどうかを確認するのは短時間でできます。しかし、もしパズルがある部分だけ完成していて他が全て空欄であれば、解くためにとても多くの時間がかかってしまいます。数独の難しさは、行や列の数を増やしたり減らしたりすることで調整することができます。しかし、確認に関してはたとえ巨大な行と列を持った数独だったとしてもまだ短時間で完成しているかどうかを確認できます。Bitcoinで使っているこのようなパズルは、暗号化ハッシュをベースにしており、上記の数独と同じような特徴を持っています。同じような特徴とは、解法を見つけるのはとても大変なのに確認するのは簡単という非対称性と、難しさを調整できるという特徴です。

<<user-stories>>で、上海にいるコンピュータエンジニアリングをやっている学生であるジンを紹介しました。ジンはマイナーとしてBitcoinネットワークに参加しています。ジンは解法を見つけようとしている全世界にいる数千人のマイナーとともに10分毎くらいに解法を見つけています。"proof of work"とよく呼ばれるこのような解法を見つけることは、秒間数千兆回のハッシュの生成処理を必要とします。"proof of work"とは、前もって決められたパターンに合う解法が現れるまで反復的にブロックのヘッダとランダム値をSHA256暗号化アルゴリズムでハッシュ化することです。そのような解法を最初に見つけたマイナーがそのブロックの勝者となり、解法を見つけたブロックをブロックチェーンに組み込みます。 

((("mining","profitability of")))ジンが2010年にとても速いデスクトップコンピュータを使ってマイニングを始めました。さらに多くのマイナーがBitcoinネットワークに参加し始めるにつれて、解法を得る難しさはすごい速度で増していきました。すぐに、ジンとその他のマイナーはさらに特殊なハードウェア(ゲーム用デスクトップコンピュータで使われるハイエンドの専用グラフィック処理装置(GPU)など)にアップグレードしていきました。この記事を書いている時点で、ASICという数百のマイニングアルゴリズムをハードウェアで組んだものを複数使い、それらを平行に処理させなければ解けないほど難しさは大きくなってしまっています。ジンは"マイニングプール"もやっていました。このマイニングプールは、何人かの参加者で解法を見つける作業を分担することで、解法を見つけたときに得られる報酬を参加者みんなで分けて受け取るという宝くじの共同購入のようなものです。今ジンは24時間マイニングを行うために２つのUSBに接続できるASICマシンを使っています。彼は電気代をマイニングで得たbitcoinを売ることで支払いながら、収益をあげています。彼のコンピュータ上ではBitcoinクライアントの参照実装であるbitcoindのコピーを走らせており、特殊なマイニングソフトウェアのバックエンドとして使っています。

=== ブロック内のトランザクションのマイニング

((("mining","transactions in blocks")))((("transactions","mining in blocks")))Bitcoinネットワークを通して送信されたトランザクションは、グローバルに分散した元帳であるブロックチェーンの一部となるまで検証された状態にはなりません。平均10分毎にマイナーはまだブロックチェーンに取り込まれていないトランザクションを含むブロックを生成します。新しいトランザクションは一定の速度でウォレットやその他のソフトウェアからBitcoinネットワークに流れ込んでいき、各Bitcoinノードの中にあるまだ検証されていない一時的なトランザクションプールにどんどん加えられていきます。マイナーが新しいブロックを作り上げるとき、マイナーは新しいトランザクションをこのプールから引き出して新しいブロックに追加します。そして、新しいブロックの有効性を証明するのにとても難しいproof of workをやってみているのです。このマイニングプロセスの詳細は<<mining>>で説明されています。

トランザクションは新しいブロックに追加されますが、この新しいブロックには処理される優先順位があり、トランザクション手数料が最も高いものであったり、他の２、３個の判断材料からこの優先順位は決定されます。それぞれのマイナーはBitcoinネットワークから前のブロックを受け取り、やっていた解法探索の競争に負けたことがわかるやいなや、新しいブロックのマイニングに取りかかります。マイナーはすぐに新しいブロックの箱を作り、それにトランザクションと前のブロックのフィンガープリントを入れて、新しいブロックに対してproof of workをし始めます。それぞれのマイナーは彼のブロックに特別なトランザクションを含めます。これは、彼のBitcoinアドレスに新たに作られたbitcoinの報酬を支払うトランザクションです(現在は１ブロックあたり25BTCです)。もし彼がブロックが有効であることを示す解法を見つけると、彼は報酬を勝ち取ります。彼が解法を見つけたブロックがグローバルなブロックチェーンに追加され、彼が報酬を得るために含めたトランザクションが利用可能になるからです。マイニングプールに参加しているジンは、ジンのソフトウェアに報酬としてのbitcoinを貯めておくBitcoinアドレスを登録しておき、そこから提供した計算量に比例して分けられた報酬がジンやその他のマイナーに配られます。 

アリスのトランザクションはBitcoinネットワークによって取り上げられ、そして、まだ検証されていないトランザクションのプールに放り込まれました。そのトランザクションは十分な手数料を含んでいたため、ジンのマイニングプールによって作り出された新しいブロックに入ることになりました。アリスのウォレットがトランザクションを最初に送信してから約５分後に、ジンのASICマイナーがブロックの解法を見つけ、他の419個のトランザクションとともにブロック #277316に組み込まれました。ジンのASICマイナーはBitcoinネットワーク上に新しいブロックを放出し、そのBitcoinネットワークでは他のマイナーがそれを検証し次のブロックを作り出し始めるレースがスタートしました。 

https://blockchain.info/block-height/277316[Alice's transaction]にこのブロックの情報を見に行くことができます。

数分後に、新しいブロック #277317 はもう１人のマイナーによって掘り出されました。この新しいブロックはアリスのトランザクションを含んだ前のブロック #277316 を元にしているため、新しいブロックはもっとたくさんの計算量をブロックの先頭に追加しました。これによって、トランザクションの信用が強化されるのです。アリスのトランザクションを含んでいるこの新しいブロックは、 "検証" １回とカウントされ、アリスのトランザクションが含まれるブロックの上に乗っかったそれぞれのブロックはさらに検証を積み増します。このブロックが積み重なるにつれて、指数関数的にトランザクションをやり直す反対取引が難しくなり、よってBitcoinネットワークによってさらに信用されることになるのです。 

<<block-alice1>>図にある通り、ブロック #277316 はアリスのトランザクションを含んでいることが分かります。ブロック #277316 の下には(#0を含めて)277316ブロックあり、起源ブロックとして知られる#0まで全てがブロックのチェーンとして互いに繋がっているのです。時間が経つにつれ、ブロックの"高さ"が増えるとそれぞれのブロックとチェーン全体に含まれる計算量は大きくなっていきます。アリスのトランザクションが含まれたブロックのあとに掘り出されたブロックはさらなる保証としてなり、チェーンが長くなればなるほどもっと計算量が積み重なることになります。慣習により、６回より多くの検証がされた任意のブロックは取り返しがつかないと考えられています。というのは、６個のブロックを無効化し再計算し直すためには膨大な計算量がかかるためです。マイニングのプロセスや信用を構築する方法を第８章でさらに詳しく説明します。

[[block-alice1]]
.ブロック #277316 に含まれているアリスのトランザクション
image::images/msbt_0209.png["Alice's transaction included in a block"]

=== トランザクションの使用

((("transactions","spending")))今やアリスのトランザクションがブロックチェーンに埋め込まれたため、分散されたBitcoin元帳の一部になり全てのBitcoinアプリケーションから参照ができるようになりました。それぞれのBitcoinクライアントは独立にトランザクションが有効で使用可能かを確認できます。full-indexクライアントはアリスが支払ったbitcoinが最初にブロック内に生成された瞬間からアリスの資産の軌跡を追うことができ、トランザクションを１個ずつ追っていくことで最終的にボブのアドレスまでたどり着きます。軽量クライアントは"simplified payment verification"(<<spv_nodes>>参照)と呼ばれるものを行うことができ、トランザクションがブロックチェーンの中にあり、ブロックチェーンに含まれたあとに掘り出されたいくつかのブロックがあることを確認しています。このようにして、Bitcoinネットワーク全体がトランザクションの有効性を把握していることを保証しているのです。 
	
ボブは、得たトランザクションアウトプットをインプットとして取り出し、それらを新しい所有者に割り振ることで今アリスからの得たアウトプットやその他のアウトプットを使うことができます。例えば、ボブはアリスから支払われたコーヒーの代金を新しい所有者に送ることによって契約者や供給者に対して支払いができるのです。よくあることとして、ボブのBitcoinソフトウェアは多くの小さな額の支払いをより大きい額の支払いにまとめあげます。もしかしたら、一日ごとのbitcoin収入全てをまとめて１つのトランザクションに集約するかもしれません。これを使っていろいろな支払いを店舗の"会計"口座として使われている１つのBitcoinアドレスに移します。集約トランザクションの図は<<transaction-aggregating>>を参照してみてください。 
	
ボブがアリスや他のお客さんから受け取った支払いを使うにつれて、ボブはトランザクションのチェーンを拡げ、このトランザクションがブロックチェーンに順々に追加されていくのです。ボブは新しいウェブページを作るためにバンガロールにいるウェブデザイナー Gopeshに支払いをすると考えてみましょう。トランザクションのチェーンは<<block-alice2>>図のようになっています。(((range="endofrange", startref="ix_ch02-asciidoc0")))

[[block-alice2]]
.ジョーからGopeshへのトランザクション連鎖の一部になっているアリスのトランザクション
image::images/msbt_0210.png["Alice's transaction as part of a transaction chain"]