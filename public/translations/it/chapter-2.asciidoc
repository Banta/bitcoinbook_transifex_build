[[ch02_bitcoin_overview]]
== Come Funziona Bitcoin

=== Transazioni, Blocchi, Mining, e la Blockchain

((("bitcoin","implementazione di", id="ix_ch02-asciidoc0", range="startofrange"))) Il sistema di bitcoin, al contrario dei tradizionali sistemi bancari e dei sistemi di pagamento, è basato sulla decentralizzazione della fiducia. Invece di un'autorità centrale fiduciaria, in bitcoin, la fiducia si ottiene come proprietà emergente dall'interazione di diversi partecipanti nel sistema bitcoin. In questo capitolo, esamineremo bitcoin da "lontano" seguendo una singola transazione attraverso il sistema bitcoin e osservando come ottiene la "ficucia" e viene accettada dal meccanismo di bitcoin del consenso distrubito e finalmente registrata sulla blockchain, il libro mastro di tutte le transazioni.

Ogni esempio è basato sulle transazioni effettive fatte sul network bitcoin, simulando le interazioni tra gli utenti (Joe, Alice e Bob) inviando i fondi da un portafoglio all'altro. Per tracciare una transazione attraverso il network bitcoin e la blockchain, useremo un ((("siti di blockchain explorer"))) sito_blockchain explorer_ per visualizzare ogni passaggio. Un sito blockchain explorer è un'applicazione web che opera come un motore di ricerca bitcoin, in esso permette di cercare per indirizzo, transazione e blocco per vedere i relativi rapporti e flussi di essi.

Blockchain explorers conosciuti includono: ((("blockchain.info website")))((("blockexplorer.com")))((("blockr.io website")))((("insight.bitpay.com")))

* http://blockchain.info[Blockchain info]
* http://blockexplorer.com[Bitcoin Block Explorer]
* http://insight.bitpay.com[insight]
* http://blockr.io[blockr Block Reader]

Ogniuno di questi ha una funzione di ricerca che accetta un indirizzo, un hash di una transazione o il numero di un blocco e trovare i dati equivalenti sul network bitcoin e sulla blockchain. Con ogni esempio, forniremo un indirizzo web (URL) che porterà direttamente all'elemento corrispondente, così che potrete studiarli in dettaglio.


==== Panoramica su Bitcoin

Nel diagramma panoramico mostrato su <<bitcoin-overview>>. noteremo che il sistema bitcoin consiste di utenti con portafogli (wallet) contenenti chiavi (key), le transazioni sono propagate attraverso il network, i miner che producono (tramite una gara di computazione) la blockchain (catena di blocchi) del consenso, che è il libro mastro autoritativo di tutte le transazioni. In questo capitolo, seguiremo una singola transazione che viaggia attraverso il network e esamineremo l'interazione tra ogni parte del sistema bitcoin, ad alto livello. I capitoli successivi investigheranno nelle tecnologie che stanno dietro i wallet, il mining e sui sistemi commerciali.  

[[bitcoin-overview]]
.Panoramica su Bitcoin
image::images/msbt_0201.png["Bitcoin Overview"]

[[cup_of_coffee]]
==== Pagare un Caffè

((("transazioni", id="ix_ch02-asciidoc1", range="startofrange")))((("transazioni","semplice esempio di", id="ix_ch02-asciidoc2", range="startofrange")))Alice, introdotta nel capitolo precedente, è un nuovo utente che ha appena ottenuto il suo primo bitcoin. In <<getting_first_bitcoin>>, Alice si è incontrata con il suo amico Joe per scambiare un po di denaro contante per bitcoin. La transazione creata da Joe ha riempito il wallet di Alice con 0.10 BTC. Ora Alice potrà fare la sua prima transazione in un negozio, comprando un caffè al bar di Bob a Palo Alto, Califorinia. Il bar di Bob ha recentemente iniziato ad accettare pagamenti in bitcoin, aggiungendo una opzione bitcoin al suo sistema POS (point-of-sale). I prezzi al Bar di Bob sono elencati nella valuta locale (dollari), ma alla cassa, i clienti hanno la possibilità di pagare sia in dollari che in bitcoin. Il POS, convertirà il prezzo totale da dollari americani a bitcoin al miglior prezzo di mercato e mostrerà i prezzi in entrambe le valute, inoltre mostrerà un QR code contenente una _richiesta di pagamento_ per la transazione (vedi <<payment-request-QR>>):

----
Totale:
$1.50 USD
0.015 BTC
----

[[payment-request-QR]]
.Il QR code della richiesta di pagamento (Indizio: Prova a scansionarlo!)
image::images/msbt_0202.png["payment-request"]

[[payment-request-URL]]
.Il QR code con la richiesta di pagamento contiene il seguente URL, definito in BIP0021:
----
bitcoin:1GdK9UzpHBzqzX2A9JFP3Di4weBwqgmoQA?
amount=0.015&
label=Bob%27s%20Cafe&
message=Purchase%20at%20Bob%27s%20Cafe

Parti dell'URL 

Un indirizzo bitcoin: "1GdK9UzpHBzqzX2A9JFP3Di4weBwqgmoQA"
L'importo del pagamento: "0.015"
Un'etichetta per l'indirizzo del destinatario: "Bob's Cafe"
Una descrizione del pagamento: "Acquisto al Bar di Bob"
----


[TIP]
====
((("QR code","richieste di pagamento come")))Invece di un QR code che contiene semplicemente un indirizzo bitcoin di destinazione, una richiesta di pagamento (payment request) è un URL sotto forma di QR code che contiene un indirizzo bitcoin di destinazione, il valore del pagamento, e una descrizione generica come "Bar di Bob". Questo consente ad un'applicazione wallet bitcoin di precompilare le informazioni usate per inviare il pagamento e al tempo stesso mostrare all'utente una descrizione leggibile dell'operazione. Puoi scansionare il QR code qui presente con un'applicazione wallet bitcoin per vedere cosa vedrebbe Alice. 
====

Bob dice, "Costa un dollaro e cinquanta, o cinque millibit."

Alice usa il suo smartphone per scansionare il codice a barre mostrato sullo schermo. Il suo smartphone mostra un pagamento di +0.0150 BTC+ al +Bar di Bob+ e dopo lei seleziona +Invia+ (Send) per autorizzare la transazione. Nel giro di pochi secondi (circa lo stesso tempo di un'autorizzazione di una carta di credito), Bob sarà in grado di visualizzare la transazione sulla cassa del bar, e la transazione sarà in questo modo completa. 

Nelle sezioni seguenti esamineremo  dettagliatamente la precedente transazione, vedremo come il wallet di Alice l'ha costruita....TODO

[NOTA]
====
Il network bitcoin può effettuare transazioni in valori frazionari, es. da millibitcoin (un millesimo di bitcoin) fino a 1/100.000.00mo di bitcoin, che è anche conosciuto come un satoshi((("satoshi","definito da"))). Per tutto il libro useremo il termine "bitcoin" per riferirci a qualsiasi quantità di valuta bitcoin, dalla sua unità più piccola (1 satoshi) al numero totale (21.000.000) di tutti i bitcoin che saranno mai minati.(((range="endofrange", startref="ix_ch02-asciidoc2"))) 
====


=== Transazioni Bitcoin

((("transazioni","definiamo le")))In parole povere, una transazione comunica al  network che il proprietario di un certo numero di bitcoin ha autorizzato il trasferimento di una parte di essi ad un altro proprietario. Il nuovo proprietario può ora spendere questi bitcoin creando un'altra transazione che autorizza il trasferimento a un nuovo proprietario, e così via, formando una catena di passaggi di proprietà. 

Le transazioni sono come righe in un registro di contabilità in partita doppia. ((("input, definiti")))In parole povere, ogni transazione contiene uno o più "input", che sono debiti verso un account bitcoin. ((("output", "definiti")))Dall'altro lato della transazione, ci sono uno o più "output", che sono crediti aggiunti ad un account bitcoin. Gli input e gli output (debiti e crediti) se sommati, non totalizzano necessariamente lo stesso risultato. Al contrario, gli output totalizzano un risultato poco inferiore a quello degli input e la differenza rappresenta una "commissione di transazione" (transaction fee) sottintesa, che è un piccolo pagamento che il miner che include la transazione nel registro ottiene. Una transazione bitcoin è mostrata come una riga in un registro di contabilità in <<transaction-double-entry>>. 

La transazione contiene anche una prova di propietà (proof of ownership) per ogni quantità di bitcoins (inputs) che viene trasferita, attraverso una firma digitale del possessore, che può essere validata indipendentemente da chiunque. In termini di bitcoin, "spendere" vuol dire firmare una transazione che trasferisce valore da una precedente transazione ad un nuovo proprietario identificato da un indirizzo bitcoin. 


[TIP]
====
Le _transazioni_ muovono valuta dagli _input di transazione_ agli _output di transazione_. Un input è laddove proviene il valore dei bitcoin, generalmente da un output di una transazione precedente. Un output di transazione assegna un nuovo utente al valore associandolo tramite una chiave. La chiave di destinazione è chiamata _encumberance_ (impedimento). Essa impone il requisito di una firma per poter riscattare i fondi in transazioni future. Gli output provenienti da una transazione possono essere usati come input di una nuova transazione, creando in questo modo una catena di proprietà nella quale la valuta è spostata da indirizzo a indirizzo (vedi <<blockchain-mnemonic>>) 
====

[[transaction-double-entry]]
.Transazioni come libro di contabilità in partita doppia 
image::images/msbt_0203.png["Transaction Double-Entry"]

[[blockchain-mnemonic]]
.Una catena di transazioni, dove l'output di una transazione è l'input della transazione successiva
image::images/msbt_0204.png["Transaction chain"]

Il pagamento di Alice al Bar di Bob utilizza una transazione precedente come input. Nel capitolo precedente Alice ha ricevuto bitcoin dal suo amico Joe in cambio di contanti. La transazione ha un numero di bitcoin bloccati attraverso la chiave di Alice. La sua nuova transazione al Bar di Bob fa riferimento alla transazione precedente come un input e crea nuovi output per pagare il caffè e per ricevere il resto. La transazioni formano una catena, nella quale gli input dell'ultima transazione corrispondono agli output di transazioni precedenti. La chiave di Alice fornisce la firma che sblocca questi output delle transazioni precedenti, e quindi provando al network bitcoin che lei è la proprietaria dei fondi. Alice combina il pagamento per il caffè all'indirizzo di Bob, in questo modo "blocca" l'output con il requisito che Bob produca una firma per spendere quel valore. Questo rappresenta un trasferimento di valore da Alice a Bob. Questa catena di transazioni, da Joe a Alice a Bob, è illustrata in <<blockchain-mnemonic>>.

==== Forme di Transazioni Comuni

((("transactions","common forms of", id="ix_ch02-asciidoc3", range="startofrange")))La forma più comune di transazione è un semplice pagamento da un portafoglio ad un altro, che spesso include del "resto" che ritorna al proprietario originario. Questo tipo di transazione ha un imput e due outputs ed è illustrato in <<transaction-common>>.

[[transaction-common]]
.Transazioni più comuni
image::images/msbt_0205.png["Transazioni Comuni"]

Un'altra forma comune di transazione è quella che aggrega multipli input in un singolo output (vedi <<transaction-aggregating>>). Questo rappresenta l'equivalente nel mondo'reale dello scambiare una pila di monete e banconote per una banconota singola di valore maggiore. Transazioni come queste sono talvolta generate da applicazioni wallet per "far pulizia" di transazioni di valore piccolo che sono state ricevute come resto dei precedenti pagamenti.

[[transaction-aggregating]]
.Transazioni aggregatrici
image::images/msbt_0206.png["Aggregating Transaction"]

Infine, un'altra forma di transazione molto comune sul registro bitcoin è una transazione che distribuisce un input a piú di un output che rappresentano multipli destinatari (vedi <<distribuzione delle transazioni>>). Questo tipo di transazioni è talvolta usato da esercizi commerciali per distribuire i  guadagni, ad esempio quando si fanno i pagamenti degli stipendi a vari dipendenti.(((range="endofrange", startref="ix_ch02-asciidoc3")))

[[transaction-distributing]]
.Transazioni che distribuiscono fondi
image::images/msbt_0207.png["Transazioni distribuenti"]

=== Costruire una Transaction

((("transactions","constructing", id="ix_ch02-asciidoc4", range="startofrange")))Alice's wallet application contains all the logic for selecting appropriate inputs and outputs to build a transaction to Alice's specification. Alice only needs to specify a destination and an amount and the rest happens in the wallet application without her seeing the details. ((("offline transactions")))Importantly, a wallet application can construct transactions even if it is completely offline. Like writing a check at home and later sending it to the bank in an envelope, the transaction does not need to be constructed and signed while connected to the bitcoin network. It only has to be sent to the network eventually for it to be executed.

==== Ottenere gli Input Giusti

((("transactions","inputs, getting", id="ix_ch02-asciidoc5", range="startofrange")))Alice's wallet application will first have to find inputs that can pay for the amount she wants to send to Bob. Most wallet applications keep a small database of "unspent transaction outputs" that are locked (encumbered) with the wallet's own keys. Therefore, Alice's wallet would contain a copy of the transaction output from Joe's transaction, which was created in exchange for cash (see <<getting_first_bitcoin>>). A bitcoin wallet application that runs as a full-index client actually contains a copy of every unspent output from every transaction in the blockchain. This allows a wallet to construct transaction inputs as well as quickly verify incoming transactions as having correct inputs. However, because a full-index client takes up a lot of disk space, most user wallets run "lightweight" clients that track only the user's own unspent outputs. 
	
((("wallets","blockchain storage in")))If the wallet application does not maintain a copy of unspent transaction outputs, it can query the bitcoin network to retrieve this information, using a variety of APIs available by different providers or by asking a full-index node using the bitcoin JSON RPC API. <<example_2-1>> shows a RESTful API request, constructed as an HTTP GET command to a specific URL. This URL will return all the unspent transaction outputs for an address, giving any application the information it needs to construct transaction inputs for spending. We use the simple command-line HTTP client((("cURL HTTP client"))) _cURL_ to retrieve the response.

[[example_2-1]]
.Ricerca tutti gli unspent output (output non spesi) per l'indirizzo bitcoin di Alice
====
[source,bash]
----
$ curl https://blockchain.info/unspent?active=1Cdid9KFAaatwczBwBttQcwXYCpvK8h7FK
----
====

[[example_2-2]]
.Risposta della ricerca
====
[source,json]
----
{
 
	"unspent_outputs":[

		{
			"tx_hash":"186f9f998a5...2836dd734d2804fe65fa35779",
			"tx_index":104810202,
			"tx_output_n": 0,	
			"script":"76a9147f9b1a7fb68d60c536c2fd8aeaa53a8f3cc025a888ac",
			"value": 10000000,
			"value_hex": "00989680",
			"confirmations":0
		}
  
	]
}
----
====

La risposta nell'<<example_2-2>> mostra un unspent output (un output che non è stato ancora speso) di proprietà dell'indirizzo di Alice  +1Cdid9KFAaatwczBwBttQcwXYCpvK8h7FK+. La risposta include una referenza alla transazione nella quale questo unspent output è contenuto (il pagamento fatto da Joe) e il suo valore in satoshi, 10 milioni, equivalente a 0.10 bitcoin. Con questa informazione, l'applicazione wallet di Alice può costruire la transazione per trasferire quel valore all'indirizzo della nuova proprietaria.

[TIP]
====
Visualizza la http://bit.ly/1tAeeGr[transazione da Joe a Alice].
====

As you can see, Alice's wallet contains enough bitcoins in a single unspent output to pay for the cup of coffee. Had this not been the case, Alice's wallet application might have to "rummage" through a pile of smaller unspent outputs, like picking coins from a purse until it could find enough to pay for coffee. In both cases, there might be a need to get some change back, which we will see in the next section, as the wallet application creates the transaction outputs (payments).(((range="endofrange", startref="ix_ch02-asciidoc5")))


==== Creare gli Output

((("transactions","outputs, creating")))A transaction output is created in the form of a script that creates an encumbrance on the value and can only be redeemed by the introduction of a solution to the script. In simpler terms, Alice's transaction output will contain a script that says something like, "This output is payable to whoever can present a signature from the key corresponding to Bob's public address." Because only Bob has the wallet with the keys corresponding to that address, only Bob's wallet can present such a signature to redeem this output. Alice will therefore "encumber" the output value with a demand for a signature from Bob. 

Questa transazione inoltre includerà un secondo output, visto che i fondi di Alice sono nella forma di un output di 0.10 BTC, troppi soldi per la tazza di caffè da 0.015 BTC. Ad Alice spetteranno 0.085 BTC di resto. Il pagamento per il resto di Alice è creato _dal wallet di Alice_ proprio nella stessa transazione usata per il pagamento a Bob. Essenzialmente, il wallet di Alice divide i fondi in due pagamenti: uno a Bob, e uno indietro a se stessa. Alice può infine usare l'output del resto in una transazione successiva, spendendolo in un secondo momento. 

Finally, for the transaction to be processed by the network in a timely fashion, Alice's wallet application will add a small fee. This is not explicit in the transaction; it is implied by the difference between inputs and outputs. If instead of taking 0.085 in change, Alice creates only 0.0845 as the second output, there will be 0.0005 BTC (half a millibitcoin) left over. The input's 0.10 BTC is not fully spent with the two outputs, because they will add up to less than 0.10. The resulting difference is the _transaction fee_ that is collected by the miner as a fee for including the transaction in a block and putting it on the blockchain ledger.

La transazione risultante può essere vista utilizzando un'applicazione web blockchain explorer, come mostrato in <<transaction-alice>>.

[[transaction-alice]]
.La transazione di Alice al Bar di Bob
image::images/msbt_0208.png["Alice Coffee Transaction"]

[[transaction-alice-url]]
[TIP]
====
Visualizza la http://bit.ly/1u0FIGs[transazione da Alice al Bar di Bob].
====

==== Aggiungere la Transazione al Ledger (libro mastro)

((("transactions","adding to ledger")))The transaction created by Alice's wallet application is 258 bytes long and contains everything necessary to confirm ownership of the funds and assign new owners. Now, the transaction must be transmitted to the bitcoin network where it will become part of the distributed ledger (the blockchain). In the next section we will see how a transaction becomes part of a new block and how the block is "mined." Finally, we will see how the new block, once added to the blockchain, is increasingly trusted by the network as more blocks are added.



===== Transmettendo la transaction

((("transactions","transmitting")))((("transmitting transactions")))Because the transaction contains all the information necessary to process, it does not matter how or where it is transmitted to the bitcoin network. The bitcoin network is a peer-to-peer network, with each bitcoin client participating by connecting to several other bitcoin clients. The purpose of the bitcoin network is to propagate transactions and blocks to all participants. 

===== Come si propaga

((("transactions","propagating")))Alice's wallet application can send the new transaction to any of the other bitcoin clients it is connected to over any Internet connection: wired, WiFi, or mobile. Her bitcoin wallet does not have to be connected to Bob's bitcoin wallet directly and she does not have to use the Internet connection offered by the cafe, though both those options are possible, too. Any bitcoin network node (other client) that receives a valid transaction it has not seen before will immediately forward it to other nodes to which it is connected. Thus, the transaction rapidly propagates out across the peer-to-peer network, reaching a large percentage of the nodes within a few seconds. 

===== Il Punto di Vista di Bob

If Bob's bitcoin wallet application is directly connected to Alice's wallet application, Bob's wallet application might be the first node to receive the transaction. However, even if Alice's wallet sends the transaction through other nodes, it will reach Bob's wallet within a few seconds. Bob's wallet will immediately identify Alice's transaction as an incoming payment because it contains outputs redeemable by Bob's keys. Bob's wallet application can also independently verify that the transaction is well formed, uses previously unspent inputs, and contains sufficient transaction fees to be included in the next block. At this point Bob can assume, with little risk, that the transaction will shortly be included in a block and confirmed. 

[TIP]
====
((("transactions","accepting without confirmations")))A common misconception about bitcoin transactions is that they must be "confirmed" by waiting 10 minutes for a new block, or up to 60 minutes for a full six confirmations. Although confirmations ensure the transaction has been accepted by the whole network, such a delay is unnecessary for small-value items such as a cup of coffee. A merchant may accept a valid small-value transaction with no confirmations, with no more risk than a credit card payment made without an ID or a signature, as merchants routinely accept today.(((range="endofrange", startref="ix_ch02-asciidoc4")))(((range="endofrange", startref="ix_ch02-asciidoc1")))
====

=== Il Mining di Bitcoin

((("mining","blockchain")))La transazione è in questo modo propagata sulla rete bitcoin. Non entra a far parte del libro mastro condiviso (la _blockchain_) fino a che non è verificata e inclusa in un blocco da un processo chiamato _mining_. Vedi il <<ch8>> per una spiegazione più dettagliata. 

Il sistema della fiducia usato da bitcoin è basato sulla computazione. Le transazioni sono raggruppate in _blocchi_, che richiedono un'enorme quanità di potenza computazionale per essere verificate come valide. Il processo di mining in bitcoin serve a due scopi: 

* Il Mining crea nuovi bitcoin per ogni blocco, quasi come una banca centrale emette nuova moneta. La quantità di bitcoin creata per blocco è fissa e diminuisce col tempo.
* Il Mining crea fiducia assicurando che le transazioni siano confermate solo se è stata usata sufficiente potenza di calcolo per il blocco che le contiene. Un maggior numero di blocchi richiede una maggiore potenza di calcolo, questo processo assicura una fiducia maggiore. 

A good way to describe mining is like a giant competitive game of sudoku that resets every time someone finds a solution and whose difficulty automatically adjusts so that it takes approximately 10 minutes to find a solution. Imagine a giant sudoku puzzle, several thousand rows and columns in size. If I show you a completed puzzle you can verify it quite quickly. However, if the puzzle has a few squares filled and the rest are empty, it takes a lot of work to solve! The difficulty of the sudoku can be adjusted by changing its size (more or fewer rows and columns), but it can still be verified quite easily even if it is very large. The "puzzle" used in bitcoin is based on a cryptographic hash and exhibits similar characteristics: it is asymmetrically hard to solve but easy to verify, and its difficulty can be adjusted.

In <<user-stories>>, we introduced Jing, a computer engineering student in Shanghai. Jing is participating in the bitcoin network as a miner. Every 10 minutes or so, Jing joins thousands of other miners in a global race to find a solution to a block of transactions. Finding such a solution, the so-called proof of work, requires quadrillions of hashing operations per second across the entire bitcoin network. The algorithm for proof of work involves repeatedly hashing the header of the block and a random number with the SHA256 cryptographic algorithm until a solution matching a predetermined pattern emerges. The first miner to find such a solution wins the round of competition and publishes that block into the blockchain. 

((("mining","profitability of")))Jing started mining in 2010 using a very fast desktop computer to find a suitable proof of work for new blocks. As more miners started joining the bitcoin network, the difficulty of the problem increased rapidly. Soon, Jing and other miners upgraded to more specialized hardware, such as high-end dedicated graphical processing units (GPUs) cards such as those used in gaming desktops or consoles. At the time of this writing, the difficulty is so high that it is profitable only to mine with application-specific integrated circuits (ASIC), essentially hundreds of mining algorithms printed in hardware, running in parallel on a single silicon chip. Jing also joined a "mining pool," which much like a lottery pool allows several participants to share their efforts and the rewards. Jing now runs two USB-connected ASIC machines to mine for bitcoin 24 hours a day. He pays his electricity costs by selling the bitcoin he is able to generate from mining, creating some income from the profits. His computer runs a copy of bitcoind, the reference bitcoin client, as a backend to his specialized mining software.

=== Effettuare Mining delle Transazioni presenti nei Blocchi

((("mining","transactions in blocks")))((("transactions","mining in blocks")))A transaction transmitted across the network is not verified until it becomes part of the global distributed ledger, the blockchain. Every 10 minutes on average, miners generate a new block that contains all the transactions since the last block. New transactions are constantly flowing into the network from user wallets and other applications. As these are seen by the bitcoin network nodes, they get added to a temporary pool of unverified transactions maintained by each node. As miners build a new block, they add unverified transactions from this pool to a new block and then attempt to solve a very hard problem (a.k.a., proof of work) to prove the validity of that new block. The process of mining is explained in detail in <<mining>>.

Transactions are added to the new block, prioritized by the highest-fee transactions first and a few other criteria. Each miner starts the process of mining a new block of transactions as soon as he receives the previous block from the network, knowing he has lost that previous round of competition. He immediately creates a new block, fills it with transactions and the fingerprint of the previous block, and starts calculating the proof of work for the new block. Each miner includes a special transaction in his block, one that pays his own bitcoin address a reward of newly created bitcoins (currently 25 BTC per block). If he finds a solution that makes that block valid, he "wins" this reward because his successful block is added to the global blockchain and the reward transaction he included becomes spendable. Jing, who participates in a mining pool, has set up his software to create new blocks that assign the reward to a pool address. From there, a share of the reward is distributed to Jing and other miners in proportion to the amount of work they contributed in the last round. 

La transazione di Alice è stata raccolta dalla rete e inclusa nel gruppo di transazioni non ancora verificate. Visto che aveva una commissione sufficiente, è stata inclusa in un blocco generato dalla mining pool di Jing. Approssimativamente cinque minuti dopo che la transazione è stata trasmessa dal wallet di Alice, l'ASIC miner di Jing ha trovato una soluzione per il blocco e ha pubblicato il blocco #277316, contenente 419 altre transazioni. Il miner ASIC di Jing ha pubblicato il nuovo blocco sul network bitcoin, dove altri miner lo hanno validato e hanno iniziato la competizione per generare il blocco successivo. 

E' possibile visionare il blocco che include https://blockchain.info/block-height/277316[la transazione di Alice].

Qualche minuto dopo, un nuovo blocco, #277317, è confermato tramite il lavoro di mining di un altro miner. Visto che questo nuovo blocco è basato sul blocco precedente (#277316) che conteneva la transazione di Alice, ha aggiunto una grande quantità di computazione su quel blocco, rafforzando in questo modo la fiducia in quelle transazioni. Il blocco contenente le transazioni di Alice è contato come una "conferma" di quella transazione. Ogni blocco su cui è effettuato mining sopra di quello contenente la transazione è una conferma addizionale. Man mano che i blocchi si impilano uno sopra l'altro, diventa esponenzialmente più difficile invertire la transazione, in questo modo rendendo il network sempre più sicuro. 

In the diagram in <<block-alice1>>  we can see block #277316, which contains Alice's transaction. Below it are 277,316 blocks (including block #0), linked to each other in a chain of blocks (blockchain) all the way back to block #0, known as the _genesis block_. Over time, as the "height" in blocks increases, so does the computation difficulty for each block and the chain as a whole. The blocks mined after the one that contains Alice's transaction act as further assurance, as they pile on more computation in a longer and longer chain. By convention, any block with more than six confirmations is considered irrevocable, because it would require an immense amount of computation to invalidate and recalculate six blocks. We will examine the process of mining and the way it builds trust in more detail in <<ch8>>.

[[block-alice1]]
.La transazione di Alice inclusa nel blocco #277316
image::images/msbt_0209.png["La transazione di Alice inclusa in un blocco"]

=== Spendere la Transaction

((("transactions","spending")))Now that Alice's transaction has been embedded in the blockchain as part of a block, it is part of the distributed ledger of bitcoin and visible to all bitcoin applications. Each bitcoin client can independently verify the transaction as valid and spendable. Full-index clients can track the source of the funds from the moment the bitcoins were first generated in a block, incrementally from transaction to transaction, until they reach Bob's address. Lightweight clients can do what is called a simplified payment verification (see <<spv_nodes>>) by confirming that the transaction is in the blockchain and has several blocks mined after it, thus providing assurance that the network accepts it as valid. 
	
Bob can now spend the output from this and other transactions, by creating his own transactions that reference these outputs as their inputs and assign them new ownership. For example, Bob can pay a contractor or supplier by transferring value from Alice's coffee cup payment to these new owners. Most likely, Bob's bitcoin software will aggregate many small payments into a larger payment, perhaps concentrating all the day's bitcoin revenue into a single transaction. This would move the various payments into a single address, used as the store's general "checking" account. For a diagram of an aggregating transaction, see <<transaction-aggregating>>. 
	
Non appena Bob spende i pagamenti ricevuti da Alice e da altri clienti, egli estende la catena delle transazioni, le quali all'indietro sono aggiunte alla ledger (libro mastro) globale di modo che tutti possano vedere e fidarcisi. Assumiamo che Bob paghi il suo web designer Gopesh a Bangalore per una nuova pagina web del suo sito. Adesso la catena di transazioni assomiglierà a <<block-alice2>>.(((range="endofrange", startref="ix_ch02-asciidoc0")))

[[block-alice2]]
.La transazione di Alice come parte di una catena di transazioni da Joe a Gopesh
image::images/msbt_0210.png["La transazione di Alice come parte della catena di transazioni"]